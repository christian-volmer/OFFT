
//          Copyright Christian Volmer 2022, 2023.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

/*
	Number of additions       : 0
	Number of multiplications : 0
*/

template<> StandardModuleComplexity const StandardModule<float, 31>::Complexity = { 0, 0 };
template<> StandardModuleComplexity const StandardModule<double, 31>::Complexity = { 0, 0 };

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT r31, i31, r33, i33, r62, i62, r38, i38, r37, i37;
	valueT r89, i89, r93, i93, r88, i88, r47, i47, r46, i46;
	valueT r45, i45, r44, i44, r43, i43, r42, i42, r41, i41;
	valueT r40, i40, r39, i39, r36, i36, r35, i35, r34, i34;
	valueT r81, i81, r84, i84, r86, i86, r85, i85, r87, i87;
	valueT r90, i90, r91, i91, r92, i92, r128, i128, r126, i126;
	valueT r114, i114, r113, i113, r111, i111, r110, i110, r119, i119;
	valueT r345, i345, r171, i171, r351, i351, r540, i540, r546, i546;
	valueT r578, i578, r572, i572, r577, i577, r574, i574, r575, i575;
	valueT r542, i542, r544, i544, r549, i549, r545, i545, r585, i585;
	valueT r587, i587, r586, i586, r576, i576, r580, i580, r615, i615;
	valueT r606, i606, r619, i619, r535, i535, r568, i568, r567, i567;
	valueT r571, i571, r559, i559, r532, i532, r524, i524, r533, i533;
	valueT r562, i562, r573, i573, r583, i583, r560, i560, r566, i566;
	valueT r596, i596, r595, i595, r569, i569, r561, i561, r601, i601;
	valueT r590, i590, r597, i597, r581, i581, r579, i579, r613, i613;
	valueT r605, i605, r610, i610, r618, i618, r608, i608, r602, i602;
	valueT r592, i592, r603, i603, r617, i617, r612, i612, r598, i598;
	valueT r614, i614, r599, i599, r591, i591, r593, i593, r616, i616;
	valueT r607, i607;

	phasors.Multiply(r31, i31, pReal[30 * stride], pImag[30 * stride], twiddleStart + 30 * twiddleIncrement);
	{
		valueT s1r, s1i;
		phasors.Multiply(s1r, s1i, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
		r33 = s1r - r31;
		i33 = s1i - i31;
		r62 = r31 + s1r;
		i62 = i31 + s1i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i;
		phasors.Multiply(s1r, s1i, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
		phasors.Multiply(s2r, s2i, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
		phasors.Multiply(s3r, s3i, pReal[25 * stride], pImag[25 * stride], twiddleStart + 25 * twiddleIncrement);
		phasors.Multiply(s4r, s4i, pReal[26 * stride], pImag[26 * stride], twiddleStart + 26 * twiddleIncrement);
		r38 = s2r - s3r;
		i38 = s2i - s3i;
		s5r = s2r + s3r;
		s5i = s2i + s3i;
		r37 = s1r - s4r;
		i37 = s1i - s4i;
		s6r = s1r + s4r;
		s6i = s1i + s4i;
		r89 = s6r - s5r;
		i89 = s6i - s5i;
		r93 = r62 - s5r;
		i93 = i62 - s5i;
		r88 = r62 + s5r + s6r;
		i88 = i62 + s5i + s6i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i, s25r, s25i;
		valueT s26r, s26i, s27r, s27i, s28r, s28i, s29r, s29i, s30r, s30i;
		valueT s31r, s31i, s32r, s32i, s33r, s33i, s34r, s34i, s35r, s35i;
		valueT s36r, s36i, s37r, s37i, s38r, s38i, s39r, s39i, s40r, s40i;
		phasors.Multiply(s1r, s1i, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
		phasors.Multiply(s2r, s2i, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
		phasors.Multiply(s3r, s3i, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
		phasors.Multiply(s4r, s4i, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
		phasors.Multiply(s5r, s5i, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
		phasors.Multiply(s6r, s6i, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
		phasors.Multiply(s7r, s7i, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
		phasors.Multiply(s8r, s8i, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
		phasors.Multiply(s9r, s9i, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
		phasors.Multiply(s10r, s10i, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
		phasors.Multiply(s11r, s11i, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
		phasors.Multiply(s12r, s12i, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
		phasors.Multiply(s13r, s13i, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
		phasors.Multiply(s14r, s14i, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
		phasors.Multiply(s15r, s15i, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
		phasors.Multiply(s16r, s16i, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
		phasors.Multiply(s17r, s17i, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
		phasors.Multiply(s18r, s18i, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
		phasors.Multiply(s19r, s19i, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
		phasors.Multiply(s20r, s20i, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
		phasors.Multiply(s21r, s21i, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);
		phasors.Multiply(s22r, s22i, pReal[27 * stride], pImag[27 * stride], twiddleStart + 27 * twiddleIncrement);
		phasors.Multiply(s23r, s23i, pReal[28 * stride], pImag[28 * stride], twiddleStart + 28 * twiddleIncrement);
		phasors.Multiply(s24r, s24i, pReal[29 * stride], pImag[29 * stride], twiddleStart + 29 * twiddleIncrement);
		r47 = s12r - s13r;
		i47 = s12i - s13i;
		s25r = s12r + s13r;
		s25i = s12i + s13i;
		r46 = s11r - s14r;
		i46 = s11i - s14i;
		s26r = s11r + s14r;
		s26i = s11i + s14i;
		r45 = s10r - s15r;
		i45 = s10i - s15i;
		s27r = s10r + s15r;
		s27i = s10i + s15i;
		r44 = s9r - s16r;
		i44 = s9i - s16i;
		s28r = s9r + s16r;
		s28i = s9i + s16i;
		r43 = s8r - s17r;
		i43 = s8i - s17i;
		s29r = s8r + s17r;
		s29i = s8i + s17i;
		r42 = s7r - s18r;
		i42 = s7i - s18i;
		s30r = s7r + s18r;
		s30i = s7i + s18i;
		r41 = s6r - s19r;
		i41 = s6i - s19i;
		s31r = s6r + s19r;
		s31i = s6i + s19i;
		r40 = s5r - s20r;
		i40 = s5i - s20i;
		s32r = s5r + s20r;
		s32i = s5i + s20i;
		r39 = s4r - s21r;
		i39 = s4i - s21i;
		s33r = s4r + s21r;
		s33i = s4i + s21i;
		r36 = s3r - s22r;
		i36 = s3i - s22i;
		s34r = s3r + s22r;
		s34i = s3i + s22i;
		r35 = s2r - s23r;
		i35 = s2i - s23i;
		s35r = s2r + s23r;
		s35i = s2i + s23i;
		r34 = s1r - s24r;
		i34 = s1i - s24i;
		s36r = s1r + s24r;
		s36i = s1i + s24i;
		r81 = s27r - s25r;
		i81 = s27i - s25i;
		r84 = s30r - s28r;
		i84 = s30i - s28i;
		r86 = s32r - s26r;
		i86 = s32i - s26i;
		s37r = s26r + s31r + s32r;
		s37i = s26i + s31i + s32i;
		r85 = s31r - s32r;
		i85 = s31i - s32i;
		r87 = s33r - s29r;
		i87 = s33i - s29i;
		s38r = s29r + s33r + s34r;
		s38i = s29i + s33i + s34i;
		r90 = s34r - s33r;
		i90 = s34i - s33i;
		s39r = s25r + s27r + s35r;
		s39i = s25i + s27i + s35i;
		r91 = s35r - s27r;
		i91 = s35i - s27i;
		s40r = s28r + s30r + s36r;
		s40i = s28i + s30i + s36i;
		r92 = s36r - s30r;
		i92 = s36i - s30i;
		r128 = s38r - s39r;
		i128 = s38i - s39i;
		r126 = s37r - s40r;
		i126 = s37i - s40i;
		r114 = s38r - s40r;
		i114 = s38i - s40i;
		r113 = s40r - s39r;
		i113 = s40i - s39i;
		r111 = s37r - r88;
		i111 = s37i - i88;
		r110 = r88 + s37r + s38r + s39r + s40r;
		i110 = i88 + s37i + s38i + s39i + s40i;
		r119 = r88 - s40r;
		i119 = i88 - s40i;
	}
	r345 = valueT(0.65193306814142574562) * r113;
	i345 = valueT(0.65193306814142574562) * i113;
	r171 = -r113 - r119;
	i171 = -i113 - i119;
	r351 = valueT(0.060064820876731527434) * r119;
	i351 = valueT(0.060064820876731527434) * i119;
	{
		valueT s1r, s1i;
		s1r = valueT(-0.20672126143220018382) * r171;
		s1i = valueT(-0.20672126143220018382) * i171;
		r540 = r345 - s1r;
		i540 = i345 - s1i;
		r546 = r351 + s1r;
		i546 = i351 + s1i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i;
		phasors.Multiply(s1r, s1i, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
		s2r = valueT(0.04936475046746860167) * r128;
		s2i = valueT(0.04936475046746860167) * i128;
		s3r = valueT(0.31615083277640031293) * r126;
		s3i = valueT(0.31615083277640031293) * i126;
		s4r = r126 - r114;
		s4i = i126 - i114;
		s5r = valueT(0.38514698583249403436) * r114;
		s5i = valueT(0.38514698583249403436) * i114;
		s6r = r111 - r128;
		s6i = i111 - i128;
		s7r = valueT(-0.27571741448829390525) * r111;
		s7i = valueT(-0.27571741448829390525) * i111;
		s8r = r110 + s1r;
		s8i = i110 + s1i;
		s9r = valueT(-1.0333333333333333333) * r110;
		s9i = valueT(-1.0333333333333333333) * i110;
		s10r = valueT(-0.76136263948562587472) * s4r;
		s10i = valueT(-0.76136263948562587472) * s4i;
		s11r = valueT(0.1094295713442001291) * s6r;
		s11i = valueT(0.1094295713442001291) * s6i;
		pReal[0 * stride] = s8r;
		pImag[0 * stride] = s8i;
		s12r = s8r + s9r;
		s12i = s8i + s9i;
		s13r = s3r + s10r;
		s13i = s3i + s10i;
		s14r = s5r - s10r;
		s14i = s5i - s10i;
		s15r = s2r + s11r;
		s15i = s2i + s11i;
		s16r = s7r - s11r;
		s16i = s7i - s11i;
		r578 = s12r + s14r - s15r;
		i578 = s12i + s14i - s15i;
		r572 = s16r - s12r - s13r;
		i572 = s16i - s12i - s13i;
		r577 = r540 + s12r + s15r;
		i577 = i540 + s12i + s15i;
		r574 = s12r - r540 - r546 - s13r - s14r;
		i574 = s12i - i540 - i546 - s13i - s14i;
		r575 = r546 + s12r + s16r;
		i575 = i546 + s12i + s16i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i, s25r, s25i;
		valueT s26r, s26i, s27r, s27i, s28r, s28i, s29r, s29i, s30r, s30i;
		valueT s31r, s31i, s32r, s32i, s33r, s33i, s34r, s34i, s35r, s35i;
		valueT s36r, s36i, s37r, s37i, s38r, s38i, s39r, s39i, s40r, s40i;
		valueT s41r, s41i, s42r, s42i, s43r, s43i, s44r, s44i, s45r, s45i;
		valueT s46r, s46i, s47r, s47i, s48r, s48i, s49r, s49i, s50r, s50i;
		valueT s51r, s51i, s52r, s52i, s53r, s53i, s54r, s54i, s55r, s55i;
		valueT s56r, s56i, s57r, s57i, s58r, s58i, s59r, s59i, s60r, s60i;
		valueT s61r, s61i, s62r, s62i, s63r, s63i, s64r, s64i, s65r, s65i;
		valueT s66r, s66i, s67r, s67i, s68r, s68i, s69r, s69i, s70r, s70i;
		valueT s71r, s71i, s72r, s72i, s73r, s73i, s74r, s74i, s75r, s75i;
		valueT s76r, s76i, s77r, s77i, s78r, s78i, s79r, s79i, s80r, s80i;
		valueT s81r, s81i, s82r, s82i, s83r, s83i, s84r, s84i, s85r, s85i;
		valueT s86r, s86i, s87r, s87i, s88r, s88i, s89r, s89i, s90r, s90i;
		valueT s91r, s91i, s92r, s92i, s93r, s93i, s94r, s94i, s95r, s95i;
		valueT s96r, s96i, s97r, s97i, s98r, s98i, s99r, s99i, s100r, s100i;
		valueT s101r, s101i, s102r, s102i;
		s1r = r84 + r87;
		s1i = i84 + i87;
		s2r = -r89 - r85;
		s2i = -i89 - i85;
		s3r = r89 + r87;
		s3i = i89 + i87;
		s4r = r84 + r86 - r87 - r91;
		s4i = i84 + i86 - i87 - i91;
		s5r = r91 - r87;
		s5i = i91 - i87;
		s6r = r81 + r92;
		s6i = i81 + i92;
		s7r = r86 + r87 - r92;
		s7i = i86 + i87 - i92;
		s8r = r85 + r92;
		s8i = i85 + i92;
		s9r = r87 + r90 - r92;
		s9i = i87 + i90 - i92;
		s10r = r81 - r93 - r87 - r90 - r92;
		s10i = i81 - i93 - i87 - i90 - i92;
		s11r = r93 + r87 - r92;
		s11i = i93 + i87 - i92;
		s12r = valueT(2.0663224049296996294) * s1r;
		s12i = valueT(2.0663224049296996294) * s1i;
		s13r = -s1r - s3r;
		s13i = -s1i - s3i;
		s14r = valueT(1.4201987035706529949) * s3r;
		s14i = valueT(1.4201987035706529949) * s3i;
		s15r = s4r - s2r;
		s15i = s4i - s2i;
		s16r = s3r - s5r;
		s16i = s3i - s5i;
		s17r = valueT(-0.33157536347293794701) * s5r;
		s17i = valueT(-0.33157536347293794701) * s5i;
		s18r = s6r - s1r;
		s18i = s6i - s1i;
		s19r = valueT(-1.5062583125249073474) * s6r;
		s19i = valueT(-1.5062583125249073474) * s6i;
		s20r = s3r + s7r;
		s20i = s3i + s7i;
		s21r = s6r - s7r;
		s21i = s6i - s7i;
		s22r = valueT(0.56977486221042705878) * s7r;
		s22i = valueT(0.56977486221042705878) * s7i;
		s23r = -s6r - s8r;
		s23i = -s6i - s8i;
		s24r = valueT(-0.87653442241044649176) * s8r;
		s24i = valueT(-0.87653442241044649176) * s8i;
		s25r = s9r - s5r;
		s25i = s9i - s5i;
		s26r = s7r + s9r;
		s26i = s7i + s9i;
		s27r = s8r - s9r;
		s27i = s8i - s9i;
		s28r = valueT(1.5666835642099196222) * s9r;
		s28i = valueT(1.5666835642099196222) * s9i;
		s29r = s2r - s10r;
		s29i = s2i - s10i;
		s30r = s10r - s4r;
		s30i = s10i - s4i;
		s31r = -s1r - s11r;
		s31i = -s1i - s11i;
		s32r = s5r - s11r;
		s32i = s5i - s11i;
		s33r = s11r - s8r;
		s33i = s11i - s8i;
		s34r = valueT(-0.079462773150105537224) * s11r;
		s34i = valueT(-0.079462773150105537224) * s11i;
		s35r = valueT(-0.15857257518308971618) * s13r;
		s35i = valueT(-0.15857257518308971618) * s13i;
		s36r = valueT(0.34172056927689409979) * s15r;
		s36i = valueT(0.34172056927689409979) * s15i;
		s37r = valueT(-1.6625083184530484411) * s16r;
		s37i = valueT(-1.6625083184530484411) * s16i;
		s38r = valueT(1.9318541783406036209) * s18r;
		s38i = valueT(1.9318541783406036209) * s18i;
		s39r = s18r - s20r;
		s39i = s18i - s20i;
		s40r = valueT(-1.0845187363974908033) * s20r;
		s40i = valueT(-1.0845187363974908033) * s20i;
		s41r = valueT(-0.072512966228835363662) * s21r;
		s41i = valueT(-0.072512966228835363662) * s21i;
		s42r = valueT(-1.1986109185215112337) * s23r;
		s42i = valueT(-1.1986109185215112337) * s23i;
		s43r = valueT(-1.2310035970367574306) * s25r;
		s43i = valueT(-1.2310035970367574306) * s25i;
		s44r = s16r + s26r;
		s44i = s16i + s26i;
		s45r = -s23r - s26r;
		s45i = -s23i - s26i;
		s46r = valueT(-0.43745282575182779832) * s26r;
		s46i = valueT(-0.43745282575182779832) * s26i;
		s47r = valueT(-0.65821141590286972344) * s27r;
		s47i = valueT(-0.65821141590286972344) * s27i;
		s48r = valueT(0.29637372110299413755) * s29r;
		s48i = valueT(0.29637372110299413755) * s29i;
		s49r = valueT(0.045346848173899962232) * s30r;
		s49i = valueT(0.045346848173899962232) * s30i;
		s50r = s31r - s16r;
		s50i = s31i - s16i;
		s51r = s31r - s23r;
		s51i = s31i - s23i;
		s52r = valueT(1.8906929393063390177) * s31r;
		s52i = valueT(1.8906929393063390177) * s31i;
		s53r = valueT(-1.2031704748403782682) * s32r;
		s53i = valueT(-1.2031704748403782682) * s32i;
		s54r = -s25r - s33r;
		s54i = -s25i - s33i;
		s55r = valueT(-0.74206619582135048323) * s33r;
		s55i = valueT(-0.74206619582135048323) * s33i;
		s56r = s12r + s35r;
		s56i = s12i + s35i;
		s57r = s14r + s35r;
		s57i = s14i + s35i;
		s58r = valueT(-0.71880081799217585657) * s39r;
		s58i = valueT(-0.71880081799217585657) * s39i;
		s59r = s19r + s41r;
		s59i = s19i + s41i;
		s60r = s22r + s41r;
		s60i = s22i + s41i;
		s61r = valueT(0.88214058851585702392) * s44r;
		s61i = valueT(0.88214058851585702392) * s44i;
		s62r = valueT(0.18032330749307986855) * s45r;
		s62i = valueT(0.18032330749307986855) * s45i;
		s63r = s24r + s47r;
		s63i = s24i + s47i;
		s64r = s28r + s47r;
		s64i = s28i + s47i;
		s65r = s36r + s48r;
		s65i = s36i + s48i;
		r542 = s36r + s49r;
		i542 = s36i + s49i;
		s66r = s49r - s48r;
		s66i = s49i - s48i;
		s67r = valueT(-0.28357409243845733892) * s50r;
		s67i = valueT(-0.28357409243845733892) * s50i;
		s68r = s51r - s44r;
		s68i = s51i - s44i;
		s69r = valueT(-1.4774178156193771214) * s51r;
		s69i = valueT(-1.4774178156193771214) * s51i;
		s70r = s17r + s53r;
		s70i = s17i + s53i;
		s71r = s34r + s53r;
		s71i = s34i + s53i;
		s72r = valueT(-0.21916197727239584931) * s54r;
		s72i = valueT(-0.21916197727239584931) * s54i;
		s73r = s38r + s58r;
		s73i = s38i + s58i;
		s74r = s40r + s58r;
		s74i = s40i + s58i;
		s75r = s42r + s62r;
		s75i = s42i + s62i;
		s76r = s46r + s62r;
		s76i = s46i + s62i;
		s77r = s37r + s67r;
		s77i = s37i + s67i;
		s78r = s52r + s67r;
		s78i = s52i + s67i;
		s79r = valueT(0.49031208906032152155) * s68r;
		s79i = valueT(0.49031208906032152155) * s68i;
		s80r = s43r + s72r;
		s80i = s43i + s72i;
		s81r = s55r + s72r;
		s81i = s55i + s72i;
		s82r = s56r + s73r;
		s82i = s56i + s73i;
		s83r = s59r + s73r;
		s83i = s59i + s73i;
		s84r = s57r + s74r;
		s84i = s57i + s74i;
		s85r = s60r + s74r;
		s85i = s60i + s74i;
		s86r = s61r + s79r;
		s86i = s61i + s79i;
		s87r = s69r + s79r;
		s87i = s69i + s79i;
		s88r = s64r + s80r;
		s88i = s64i + s80i;
		s89r = s70r + s80r;
		s89i = s70i + s80i;
		s90r = s63r + s81r;
		s90i = s63i + s81i;
		s91r = s71r + s81r;
		s91i = s71i + s81i;
		s92r = s76r + s86r;
		s92i = s76i + s86i;
		s93r = s77r + s86r;
		s93i = s77i + s86i;
		s94r = s75r + s87r;
		s94i = s75i + s87i;
		s95r = s78r + s87r;
		s95i = s78i + s87i;
		r544 = s85r + s92r;
		i544 = s85i + s92i;
		s96r = s88r + s92r;
		s96i = s88i + s92i;
		s97r = s84r + s93r;
		s97i = s84i + s93i;
		r549 = s89r + s93r;
		i549 = s89i + s93i;
		s98r = s83r + s94r;
		s98i = s83i + s94i;
		s99r = s90r + s94r;
		s99i = s90i + s94i;
		r545 = s82r + s95r;
		i545 = s82i + s95i;
		s100r = s91r + s95r;
		s100i = s91i + s95i;
		r585 = s66r + s96r;
		i585 = s66i + s96i;
		s101r = s65r + s97r;
		s101i = s65i + s97i;
		r587 = s66r + s98r;
		i587 = s66i + s98i;
		r586 = s99r - s65r;
		i586 = s99i - s65i;
		r576 = s66r + r544 + s96r + s97r + r549 + r545 + s100r - r542;
		i576 = s66i + i544 + s96i + s97i + i549 + i545 + s100i - i542;
		r580 = r544 + s96r + s98r + s99r + s100r - s66r;
		i580 = i544 + s96i + s98i + s99i + s100i - s66i;
		s102r = s66r + s100r;
		s102i = s66i + s100i;
		r615 = s101r - r575;
		i615 = s101i - i575;
		r606 = r575 - s102r;
		i606 = i575 - s102i;
		r619 = r575 + s101r + s102r;
		i619 = i575 + s101i + s102i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i, s25r, s25i;
		valueT s26r, s26i, s27r, s27i, s28r, s28i, s29r, s29i, s30r, s30i;
		valueT s31r, s31i, s32r, s32i, s33r, s33i, s34r, s34i, s35r, s35i;
		valueT s36r, s36i, s37r, s37i, s38r, s38i, s39r, s39i, s40r, s40i;
		valueT s41r, s41i, s42r, s42i, s43r, s43i, s44r, s44i, s45r, s45i;
		valueT s46r, s46i, s47r, s47i, s48r, s48i, s49r, s49i, s50r, s50i;
		valueT s51r, s51i, s52r, s52i, s53r, s53i, s54r, s54i, s55r, s55i;
		valueT s56r, s56i, s57r, s57i, s58r, s58i, s59r, s59i, s60r, s60i;
		valueT s61r, s61i, s62r, s62i, s63r, s63i, s64r, s64i, s65r, s65i;
		valueT s66r, s66i, s67r, s67i, s68r, s68i, s69r, s69i, s70r, s70i;
		valueT s71r, s71i, s72r, s72i, s73r, s73i, s74r, s74i, s75r, s75i;
		valueT s76r, s76i, s77r, s77i, s78r, s78i, s79r, s79i, s80r, s80i;
		valueT s81r, s81i, s82r, s82i, s83r, s83i, s84r, s84i, s85r, s85i;
		valueT s86r, s86i, s87r, s87i, s88r, s88i, s89r, s89i, s90r, s90i;
		valueT s91r, s91i, s92r, s92i, s93r, s93i, s94r, s94i, s95r, s95i;
		valueT s96r, s96i, s97r, s97i, s98r, s98i, s99r, s99i, s100r, s100i;
		valueT s101r, s101i, s102r, s102i, s103r, s103i, s104r, s104i, s105r, s105i;
		valueT s106r, s106i, s107r, s107i, s108r, s108i, s109r, s109i, s110r, s110i;
		valueT s111r, s111i, s112r, s112i, s113r, s113i, s114r, s114i, s115r, s115i;
		valueT s116r, s116i, s117r, s117i, s118r, s118i, s119r, s119i, s120r, s120i;
		valueT s121r, s121i, s122r, s122i, s123r, s123i, s124r, s124i, s125r, s125i;
		valueT s126r, s126i, s127r, s127i, s128r, s128i, s129r, s129i, s130r, s130i;
		valueT s131r, s131i, s132r, s132i, s133r, s133i, s134r, s134i, s135r, s135i;
		valueT s136r, s136i, s137r, s137i, s138r, s138i, s139r, s139i, s140r, s140i;
		valueT s141r, s141i, s142r, s142i, s143r, s143i, s144r, s144i, s145r, s145i;
		s1r = r47 - r45;
		s1i = i47 - i45;
		s2r = r44 + r42;
		s2i = i44 + i42;
		s3r = r46 - r40;
		s3i = i46 - i40;
		s4r = r46 + r41 + r40;
		s4i = i46 + i41 + i40;
		s5r = r40 - r41;
		s5i = i40 - i41;
		s6r = r43 + r39;
		s6i = i43 + i39;
		s7r = r38 + r37;
		s7i = i38 + i37;
		s8r = r39 + r36 - r43;
		s8i = i39 + i36 - i43;
		s9r = r36 - r39;
		s9i = i36 - i39;
		s10r = r47 + r45 + r35;
		s10i = i47 + i45 + i35;
		s11r = r35 - r45;
		s11i = i35 - i45;
		s12r = r42 + r34 - r44;
		s12i = i42 + i34 - i44;
		s13r = r34 - r42;
		s13i = i34 - i42;
		s14r = r33 + r37 - r38;
		s14i = i33 + i37 - i38;
		s15r = r33 + r38;
		s15i = i33 + i38;
		s16r = s2r + s6r;
		s16i = s2i + s6i;
		s17r = s5r - s7r;
		s17i = s5i - s7i;
		s18r = s6r + s7r;
		s18i = s6i + s7i;
		s19r = s8r + s10r;
		s19i = s8i + s10i;
		s20r = s3r + s6r - s2r - s11r;
		s20i = s3i + s6i - s2i - s11i;
		s21r = s6r + s11r;
		s21i = s6i + s11i;
		s22r = s12r - s4r;
		s22i = s12i - s4i;
		s23r = s12r - s8r;
		s23i = s12i - s8i;
		s24r = s10r + s12r;
		s24i = s10i + s12i;
		s25r = s1r + s13r;
		s25i = s1i + s13i;
		s26r = s6r - s3r - s13r;
		s26i = s6i - s3i - s13i;
		s27r = s5r - s13r;
		s27i = s5i - s13i;
		s28r = s6r + s9r - s13r;
		s28i = s6i + s9i - s13i;
		s29r = s4r - s14r;
		s29i = s4i - s14i;
		s30r = s4r + s8r + s12r + s14r - s10r;
		s30i = s4i + s8i + s12i + s14i - s10i;
		s31r = s14r - s12r;
		s31i = s14i - s12i;
		s32r = s6r + s9r + s13r + s15r - s1r;
		s32i = s6i + s9i + s13i + s15i - s1i;
		s33r = s6r + s15r - s13r;
		s33i = s6i + s15i - s13i;
		s34r = valueT(1.9590412230487685409) * s16i;
		s34i = valueT(-1.9590412230487685409) * s16r;
		s35r = s16r + s18r;
		s35i = s16i + s18i;
		s36r = valueT(-1.4688531915605548397) * s18i;
		s36i = valueT(1.4688531915605548397) * s18r;
		s37r = valueT(-0.1499068046717888071) * s19i;
		s37i = valueT(0.1499068046717888071) * s19r;
		s38r = s17r + s20r;
		s38i = s17i + s20i;
		s39r = s18r + s21r;
		s39i = s18i + s21i;
		s40r = valueT(-0.62062914789405339961) * s21i;
		s40i = valueT(0.62062914789405339961) * s21r;
		s41r = valueT(-0.57150497863210255812) * s22i;
		s41i = valueT(0.57150497863210255812) * s22r;
		s42r = s22r - s23r;
		s42i = s22i - s23i;
		s43r = valueT(0.56979343757587095803) * s23i;
		s43i = valueT(-0.56979343757587095803) * s23r;
		s44r = valueT(-0.14819526361555720701) * s24i;
		s44i = valueT(0.14819526361555720701) * s24r;
		s45r = s16r - s25r;
		s45i = s16i - s25i;
		s46r = valueT(-1.1369254479631532131) * s25i;
		s46i = valueT(1.1369254479631532131) * s25r;
		s47r = s18r + s26r;
		s47i = s18i + s26i;
		s48r = s26r - s25r;
		s48i = s26i - s25i;
		s49r = valueT(0.58155196403300016044) * s26i;
		s49i = valueT(-0.58155196403300016044) * s26r;
		s50r = s25r - s27r;
		s50i = s25i - s27i;
		s51r = valueT(0.87262522759979267887) * s27i;
		s51i = valueT(-0.87262522759979267887) * s27r;
		s52r = -s21r - s28r;
		s52i = -s21i - s28i;
		s53r = -s26r - s28r;
		s53i = -s26i - s28i;
		s54r = s27r + s28r;
		s54i = s27i + s28i;
		s55r = valueT(1.5982638575965406979) * s28i;
		s55i = valueT(-1.5982638575965406979) * s28r;
		s56r = s19r - s29r;
		s56i = s19i - s29i;
		s57r = valueT(0.69169641702138115261) * s29i;
		s57i = valueT(-0.69169641702138115261) * s29r;
		s58r = valueT(-0.1855921454276673974) * s30i;
		s58i = valueT(0.1855921454276673974) * s30r;
		s59r = -s24r - s31r;
		s59i = -s24i - s31i;
		s60r = valueT(-0.028003825226278612524) * s31i;
		s60i = valueT(0.028003825226278612524) * s31r;
		s61r = s17r + s32r;
		s61i = s17i + s32i;
		s62r = s32r - s20r;
		s62i = s32i - s20i;
		s63r = -s16r - s33r;
		s63i = -s16i - s33i;
		s64r = -s21r - s33r;
		s64i = -s21i - s33i;
		s65r = -s27r - s33r;
		s65i = -s27i - s33i;
		s66r = valueT(0.48563392596301227479) * s33i;
		s66i = valueT(-0.48563392596301227479) * s33r;
		s67r = valueT(0.33449817292027100063) * s35i;
		s67i = valueT(-0.33449817292027100063) * s35r;
		s68r = valueT(0.25800692409527645209) * s38i;
		s68i = valueT(-0.25800692409527645209) * s38r;
		s69r = valueT(0.56039893280632889617) * s39i;
		s69i = valueT(-0.56039893280632889617) * s39r;
		s70r = valueT(-0.026292284170047012433) * s42i;
		s70i = valueT(0.026292284170047012433) * s42r;
		s71r = valueT(-0.88571167013882141603) * s45i;
		s71i = valueT(0.88571167013882141603) * s45r;
		s72r = s45r + s47r;
		s72i = s45i + s47i;
		s73r = valueT(-1.512449024865104052) * s47i;
		s73i = valueT(1.512449024865104052) * s47r;
		s74r = valueT(0.66642591651767262721) * s48i;
		s74i = valueT(-0.66642591651767262721) * s48r;
		s75r = valueT(1.3467958502599574745) * s50i;
		s75i = valueT(-1.3467958502599574745) * s50r;
		s76r = valueT(1.6418596909010899102) * s52i;
		s76i = valueT(-1.6418596909010899102) * s52r;
		s77r = s53r - s39r;
		s77i = s53i - s39i;
		s78r = -s50r - s53r;
		s78i = -s50i - s53i;
		s79r = valueT(1.9885780293806821384) * s53i;
		s79i = valueT(-1.9885780293806821384) * s53r;
		s80r = valueT(0.69527553837249884361) * s54i;
		s80i = valueT(-0.69527553837249884361) * s54r;
		s81r = valueT(0.12190297944551019458) * s56i;
		s81i = valueT(-0.12190297944551019458) * s56r;
		s82r = valueT(-0.44960199918659236354) * s59i;
		s82i = valueT(0.44960199918659236354) * s59r;
		s83r = valueT(-0.10209749786491606369) * s61i;
		s83i = valueT(0.10209749786491606369) * s61r;
		s84r = valueT(0.36010442196019251578) * s62i;
		s84i = valueT(-0.36010442196019251578) * s62r;
		s85r = s39r - s63r;
		s85i = s39i - s63i;
		s86r = s50r + s63r;
		s86i = s50i + s63i;
		s87r = valueT(-0.13510539545348763997) * s63i;
		s87i = valueT(0.13510539545348763997) * s63r;
		s88r = valueT(0.94727161807823812287) * s64i;
		s88i = valueT(-0.94727161807823812287) * s64r;
		s89r = -s52r - s65r;
		s89i = -s52i - s65i;
		s90r = valueT(-0.20070432531015444602) * s65i;
		s90i = valueT(0.20070432531015444602) * s65r;
		s91r = s34r + s67r;
		s91i = s34i + s67i;
		s92r = s36r - s67r;
		s92i = s36i - s67i;
		s93r = s41r + s70r;
		s93i = s41i + s70i;
		s94r = s43r - s70r;
		s94i = s43i - s70i;
		s95r = valueT(0.29740466526154981383) * s72i;
		s95i = valueT(-0.29740466526154981383) * s72r;
		s96r = s46r + s74r;
		s96i = s46i + s74i;
		s97r = s49r + s74r;
		s97i = s49i + s74i;
		s98r = valueT(-1.2962863977457801234) * s77i;
		s98i = valueT(1.2962863977457801234) * s77r;
		s99r = valueT(0.17316507770589176757) * s78i;
		s99i = valueT(-0.17316507770589176757) * s78r;
		s100r = s51r + s80r;
		s100i = s51i + s80i;
		s101r = s55r + s80r;
		s101i = s55i + s80i;
		s102r = s37r + s81r;
		s102i = s37i + s81i;
		s103r = s57r + s81r;
		s103i = s57i + s81i;
		s104r = s44r - s82r;
		s104i = s44i - s82i;
		s105r = s60r + s82r;
		s105i = s60i + s82i;
		s106r = s83r - s68r;
		s106i = s83i - s68i;
		r535 = s68r + s84r;
		i535 = s68i + s84i;
		s107r = s83r + s84r;
		s107i = s83i + s84i;
		s108r = valueT(-0.61323183974773681073) * s85i;
		s108i = valueT(0.61323183974773681073) * s85r;
		s109r = -s77r - s86r;
		s109i = -s77i - s86i;
		s110r = valueT(-0.069180450948261354806) * s86i;
		s110i = valueT(0.069180450948261354806) * s86r;
		s111r = s40r + s88r;
		s111i = s40i + s88i;
		s112r = s66r + s88r;
		s112i = s66i + s88i;
		s113r = valueT(-0.063372700190678029143) * s89i;
		s113i = valueT(0.063372700190678029143) * s89r;
		s114r = s71r + s95r;
		s114i = s71i + s95i;
		s115r = s73r + s95r;
		s115i = s73i + s95i;
		s116r = s75r + s99r;
		s116i = s75i + s99i;
		s117r = s79r + s99r;
		s117i = s79i + s99i;
		r568 = s94r + s102r - s58r;
		i568 = s94i + s102i - s58i;
		r567 = s58r + s103r - s93r;
		i567 = s58i + s103i - s93i;
		r571 = s104r - s58r - s102r;
		i571 = s104i - s58i - s102i;
		s118r = s58r - s103r - s105r;
		s118i = s58i - s103i - s105i;
		r559 = s58r + s93r + s94r + s104r + s105r;
		i559 = s58i + s93i + s94i + s104i + s105i;
		s119r = s69r - s108r;
		s119i = s69i - s108i;
		s120r = s87r + s108r;
		s120i = s87i + s108i;
		s121r = valueT(-0.09591803806998788565) * s109i;
		s121i = valueT(0.09591803806998788565) * s109r;
		s122r = s76r + s113r;
		s122i = s76i + s113i;
		s123r = s90r + s113r;
		s123i = s90i + s113i;
		s124r = s91r + s114r;
		s124i = s91i + s114i;
		s125r = s96r + s114r;
		s125i = s96i + s114i;
		s126r = s92r - s115r;
		s126i = s92i - s115i;
		s127r = s97r + s115r;
		s127i = s97i + s115i;
		s128r = s98r + s121r;
		s128i = s98i + s121i;
		s129r = s110r + s121r;
		s129i = s110i + s121i;
		s130r = s101r + s122r;
		s130i = s101i + s122i;
		s131r = s111r - s122r;
		s131i = s111i - s122i;
		s132r = s100r + s123r;
		s132i = s100i + s123i;
		s133r = s112r - s123r;
		s133i = s112i - s123i;
		s134r = s117r + s128r;
		s134i = s117i + s128i;
		s135r = s119r - s128r;
		s135i = s119i - s128i;
		s136r = s116r + s129r;
		s136i = s116i + s129i;
		s137r = s120r + s129r;
		s137i = s120i + s129i;
		r532 = s127r + s134r;
		i532 = s127i + s134i;
		s138r = s130r + s134r;
		s138i = s130i + s134i;
		s139r = s126r + s135r;
		s139i = s126i + s135i;
		r524 = s131r + s135r;
		i524 = s131i + s135i;
		s140r = s125r + s136r;
		s140i = s125i + s136i;
		s141r = s132r + s136r;
		s141i = s132i + s136i;
		r533 = s124r + s137r;
		i533 = s124i + s137i;
		s142r = s133r - s137r;
		s142i = s133i - s137i;
		r562 = s138r - s107r;
		i562 = s138i - s107i;
		s143r = s139r - s106r;
		s143i = s139i - s106i;
		r573 = s140r - s107r;
		i573 = s140i - s107i;
		r583 = s106r - s141r;
		i583 = s106i - s141i;
		r560 = s107r + s139r + r524 + s142r - r535 - r532 - s138r - r533;
		i560 = s107i + s139i + i524 + s142i - i535 - i532 - s138i - i533;
		s144r = s107r + s142r;
		s144i = s107i + s142i;
		r566 = s107r + r532 + s138r + s140r + s141r - s142r;
		i566 = s107i + i532 + s138i + s140i + s141i - s142i;
		r596 = s118r - s143r;
		i596 = s118i - s143i;
		r595 = s144r - s118r;
		i595 = s144i - s118i;
		s145r = s118r + s143r + s144r;
		s145i = s118i + s143i + s144i;
		pReal[6 * stride] = r619 - s145r;
		pImag[6 * stride] = i619 - s145i;
		pReal[25 * stride] = r619 + s145r;
		pImag[25 * stride] = i619 + s145i;
	}
	pReal[1 * stride] = r606 - r595;
	pImag[1 * stride] = i606 - i595;
	pReal[30 * stride] = r606 + r595;
	pImag[30 * stride] = i606 + i595;
	pReal[26 * stride] = -r615 - r596;
	pImag[26 * stride] = -i615 - i596;
	pReal[5 * stride] = r596 - r615;
	pImag[5 * stride] = i596 - i615;
	{
		valueT s1r, s1i;
		r569 = r532 - r535;
		i569 = i532 - i535;
		r561 = r535 + r524;
		i561 = i535 + i524;
		s1r = r533 - r535;
		s1i = i533 - i535;
		r601 = s1r - r559;
		i601 = s1i - i559;
		r590 = r559 - r566;
		i590 = i559 - i566;
		r597 = r559 + r566 + s1r;
		i597 = i559 + i566 + s1i;
	}
	{
		valueT s1r, s1i, s2r, s2i;
		r581 = r542 + r544;
		i581 = i542 + i544;
		r579 = r542 + r549;
		i579 = i542 + i549;
		s1r = r542 + r545;
		s1i = i542 + i545;
		r613 = r574 + s1r;
		i613 = i574 + s1i;
		s2r = r580 + s1r - r574;
		s2i = i580 + s1i - i574;
		r605 = r574 + r580;
		i605 = i574 + i580;
		pReal[21 * stride] = -r597 - s2r;
		pImag[21 * stride] = -i597 - s2i;
		pReal[10 * stride] = r597 - s2r;
		pImag[10 * stride] = i597 - s2i;
	}
	pReal[29 * stride] = r605 - r590;
	pImag[29 * stride] = i605 - i590;
	pReal[2 * stride] = r590 + r605;
	pImag[2 * stride] = i590 + i605;
	pReal[19 * stride] = r613 - r601;
	pImag[19 * stride] = i613 - i601;
	pReal[12 * stride] = r601 + r613;
	pImag[12 * stride] = i601 + i613;
	r610 = r577 + r579;
	i610 = i577 + i579;
	r618 = r577 + r587 - r579;
	i618 = i577 + i587 - i579;
	r608 = r577 - r587;
	i608 = i577 - i587;
	{
		valueT s1r, s1i;
		r602 = r571 - r561;
		i602 = i571 - i561;
		s1r = r573 - r571;
		s1i = i573 - i571;
		r592 = r571 + r573 + r561;
		i592 = i571 + i573 + i561;
		pReal[15 * stride] = r608 - s1r;
		pImag[15 * stride] = i608 - s1i;
		pReal[16 * stride] = r608 + s1r;
		pImag[16 * stride] = i608 + s1i;
	}
	pReal[18 * stride] = r618 - r592;
	pImag[18 * stride] = i618 - i592;
	pReal[13 * stride] = r618 + r592;
	pImag[13 * stride] = i618 + i592;
	pReal[28 * stride] = r610 - r602;
	pImag[28 * stride] = i610 - i602;
	pReal[3 * stride] = r610 + r602;
	pImag[3 * stride] = i610 + i602;
	r603 = r572 - r581;
	i603 = i572 - i581;
	r617 = r586 - r572;
	i617 = i586 - i572;
	r612 = r572 + r586 + r581;
	i612 = i572 + i586 + i581;
	{
		valueT s1r, s1i;
		r598 = r567 - r569;
		i598 = i567 - i569;
		r614 = r567 + r583;
		i614 = i567 + i583;
		s1r = r567 + r569 - r583;
		s1i = i567 + i569 - i583;
		pReal[23 * stride] = -r612 - s1r;
		pImag[23 * stride] = -i612 - s1i;
		pReal[8 * stride] = s1r - r612;
		pImag[8 * stride] = s1i - i612;
	}
	pReal[22 * stride] = r617 - r614;
	pImag[22 * stride] = i617 - i614;
	pReal[9 * stride] = r617 + r614;
	pImag[9 * stride] = i617 + i614;
	pReal[17 * stride] = -r603 - r598;
	pImag[17 * stride] = -i603 - i598;
	pReal[14 * stride] = r598 - r603;
	pImag[14 * stride] = i598 - i603;
	r599 = r568 - r562;
	i599 = i568 - i562;
	r591 = r560 - r568;
	i591 = i560 - i568;
	r593 = r568 + r562 + r560;
	i593 = i568 + i562 + i560;
	{
		valueT s1r, s1i;
		r616 = r585 - r578;
		i616 = i585 - i578;
		r607 = r578 + r576;
		i607 = i578 + i576;
		s1r = r578 + r585 - r576;
		s1i = i578 + i585 - i576;
		pReal[7 * stride] = s1r - r593;
		pImag[7 * stride] = s1i - i593;
		pReal[24 * stride] = r593 + s1r;
		pImag[24 * stride] = i593 + s1i;
	}
	pReal[11 * stride] = r607 - r591;
	pImag[11 * stride] = i607 - i591;
	pReal[20 * stride] = r591 + r607;
	pImag[20 * stride] = i591 + i607;
	pReal[4 * stride] = -r599 - r616;
	pImag[4 * stride] = -i599 - i616;
	pReal[27 * stride] = r599 - r616;
	pImag[27 * stride] = i599 - i616;
}

template<> void StandardModule<float, 31>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 31>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
