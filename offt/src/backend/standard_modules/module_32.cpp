
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

/*
	Number of additions       : 372
	Number of multiplications : 84
*/

template<> StandardModuleComplexity const StandardModule<float, 32>::Complexity = { 372, 84 };
template<> StandardModuleComplexity const StandardModule<double, 32>::Complexity = { 372, 84 };

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
	valueT t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
	valueT t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
	valueT t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
	valueT t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	valueT t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	valueT t60, t61, t62, t63, t64, t65;

	phasors.Multiply(t0, t1, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t2, t3, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t4, t5, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t6, t7, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t8, t9, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t10, t11, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t12, t13, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t14, t15, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t16, t17, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t18, t19, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t20, t21, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t22, t23, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t24, t25, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t26, t27, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t28, t29, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t30, t31, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t32, t33, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t34, t35, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t36, t37, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
	phasors.Multiply(t38, t39, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
	phasors.Multiply(t40, t41, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
	phasors.Multiply(t42, t43, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
	phasors.Multiply(t44, t45, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
	phasors.Multiply(t46, t47, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
	phasors.Multiply(t48, t49, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);
	phasors.Multiply(t50, t51, pReal[25 * stride], pImag[25 * stride], twiddleStart + 25 * twiddleIncrement);
	phasors.Multiply(t52, t53, pReal[26 * stride], pImag[26 * stride], twiddleStart + 26 * twiddleIncrement);
	phasors.Multiply(t54, t55, pReal[27 * stride], pImag[27 * stride], twiddleStart + 27 * twiddleIncrement);
	phasors.Multiply(t56, t57, pReal[28 * stride], pImag[28 * stride], twiddleStart + 28 * twiddleIncrement);
	phasors.Multiply(t58, t59, pReal[29 * stride], pImag[29 * stride], twiddleStart + 29 * twiddleIncrement);
	phasors.Multiply(t60, t61, pReal[30 * stride], pImag[30 * stride], twiddleStart + 30 * twiddleIncrement);
	phasors.Multiply(t62, t63, pReal[31 * stride], pImag[31 * stride], twiddleStart + 31 * twiddleIncrement);

	t64 = t0 - t32;
	t65 = t1 - t33;
	t0 += t32;
	t1 += t33;
	t32 = t16 - t48;
	t33 = t17 - t49;
	t16 += t48;
	t17 += t49;
	t48 = t64 + t33;
	t49 = t65 - t32;
	t64 -= t33;
	t65 += t32;
	t32 = t0 - t16;
	t33 = t1 - t17;
	t0 += t16;
	t1 += t17;
	t16 = t4 - t36;
	t17 = t5 - t37;
	t4 += t36;
	t5 += t37;
	t36 = t8 - t40;
	t37 = t9 - t41;
	t8 += t40;
	t9 += t41;
	t40 = t12 - t44;
	t41 = t13 - t45;
	t12 += t44;
	t13 += t45;
	t44 = t20 - t52;
	t45 = t21 - t53;
	t20 += t52;
	t21 += t53;
	t52 = t24 - t56;
	t53 = t25 - t57;
	t24 += t56;
	t25 += t57;
	t56 = t28 - t60;
	t57 = t29 - t61;
	t28 += t60;
	t29 += t61;
	t60 = t2 - t34;
	t61 = t3 - t35;
	t2 += t34;
	t3 += t35;
	t34 = t6 - t38;
	t35 = t7 - t39;
	t6 += t38;
	t7 += t39;
	t38 = valueT(0.7071067811865475244) * (t36 - t37);
	t36 = valueT(0.7071067811865475244) * (t36 + t37);
	t37 = t18 - t50;
	t39 = t19 - t51;
	t18 += t50;
	t19 += t51;
	t50 = t22 - t54;
	t51 = t23 - t55;
	t22 += t54;
	t23 += t55;
	t54 = valueT(0.7071067811865475244) * (t52 + t53);
	t52 = valueT(0.7071067811865475244) * (t52 - t53);
	t53 = t17 + t44;
	t55 = t16 - t45;
	t17 -= t44;
	t16 += t45;
	t44 = t4 - t20;
	t45 = t5 - t21;
	t4 += t20;
	t5 += t21;
	t20 = t38 + t54;
	t21 = t36 - t52;
	t38 -= t54;
	t36 += t52;
	t52 = t8 - t24;
	t54 = t9 - t25;
	t8 += t24;
	t9 += t25;
	t24 = t41 + t56;
	t25 = t40 - t57;
	t41 -= t56;
	t40 += t57;
	t56 = t12 - t28;
	t57 = t13 - t29;
	t12 += t28;
	t13 += t29;
	t28 = t48 - t21;
	t29 = t49 + t20;
	t48 += t21;
	t49 -= t20;
	t20 = t64 - t38;
	t21 = t65 - t36;
	t64 += t38;
	t65 += t36;
	t36 = t32 + t54;
	t38 = t33 - t52;
	t32 -= t54;
	t33 += t52;
	t52 = t0 - t8;
	t54 = t1 - t9;
	t0 += t8;
	t1 += t9;
	t8 = t60 + t39;
	t9 = t61 - t37;
	t60 -= t39;
	t61 += t37;
	t37 = t2 - t18;
	t39 = t3 - t19;
	t2 += t18;
	t3 += t19;
	t18 = t34 + t51;
	t19 = t35 - t50;
	t34 -= t51;
	t35 += t50;
	t50 = t6 - t22;
	t51 = t7 - t23;
	t6 += t22;
	t7 += t23;
	t22 = t10 - t42;
	t23 = t11 - t43;
	t10 += t42;
	t11 += t43;
	t42 = t14 - t46;
	t43 = t15 - t47;
	t14 += t46;
	t15 += t47;
	t46 = t26 - t58;
	t47 = t27 - t59;
	t26 += t58;
	t27 += t59;
	t58 = t30 - t62;
	t59 = t31 - t63;
	t30 += t62;
	t31 += t63;
	t62 = valueT(0.92387953251128675613) * t55 - valueT(0.38268343236508977173) * t53;
	t55 = valueT(0.38268343236508977173) * t55 + valueT(0.92387953251128675613) * t53;
	t53 = valueT(0.38268343236508977173) * t16 - valueT(0.92387953251128675613) * t17;
	t16 = valueT(0.92387953251128675613) * t16 + valueT(0.38268343236508977173) * t17;
	t17 = valueT(0.7071067811865475244) * (t44 - t45);
	t44 = valueT(0.7071067811865475244) * (t44 + t45);
	t45 = valueT(0.7071067811865475244) * (t22 - t23);
	t22 = valueT(0.7071067811865475244) * (t22 + t23);
	t23 = valueT(0.38268343236508977173) * t25 - valueT(0.92387953251128675613) * t24;
	t25 = valueT(0.92387953251128675613) * t25 + valueT(0.38268343236508977173) * t24;
	t24 = valueT(0.92387953251128675613) * t40 - valueT(0.38268343236508977173) * t41;
	t40 = valueT(0.38268343236508977173) * t40 + valueT(0.92387953251128675613) * t41;
	t41 = valueT(0.7071067811865475244) * (t56 + t57);
	t56 = valueT(0.7071067811865475244) * (t56 - t57);
	t57 = valueT(0.7071067811865475244) * (t42 - t43);
	t42 = valueT(0.7071067811865475244) * (t42 + t43);
	t43 = valueT(0.7071067811865475244) * (t46 + t47);
	t46 = valueT(0.7071067811865475244) * (t46 - t47);
	t47 = valueT(0.7071067811865475244) * (t58 + t59);
	t58 = valueT(0.7071067811865475244) * (t58 - t59);
	t59 = t62 - t23;
	t63 = t55 - t25;
	t62 += t23;
	t55 += t25;
	t23 = t53 + t24;
	t25 = t16 + t40;
	t53 -= t24;
	t16 -= t40;
	t24 = t17 + t41;
	t40 = t44 - t56;
	t17 -= t41;
	t44 += t56;
	t41 = t4 - t12;
	t56 = t5 - t13;
	t4 += t12;
	t5 += t13;
	t12 = t45 + t43;
	t13 = t22 - t46;
	t45 -= t43;
	t22 += t46;
	t43 = t10 - t26;
	t46 = t11 - t27;
	t10 += t26;
	t11 += t27;
	t26 = t57 + t47;
	t27 = t42 - t58;
	t57 -= t47;
	t42 += t58;
	t47 = t14 - t30;
	t58 = t15 - t31;
	t14 += t30;
	t15 += t31;
	t30 = t28 - t53;
	t31 = t29 - t16;
	t28 += t53;
	t29 += t16;
	t16 = t48 + t25;
	t53 = t49 - t23;
	t48 -= t25;
	t49 += t23;
	t23 = t20 + t63;
	t25 = t21 - t59;
	t20 -= t63;
	t21 += t59;
	t59 = t64 - t62;
	t63 = t65 - t55;
	t64 += t62;
	t65 += t55;
	t55 = t36 + t40;
	t62 = t38 - t24;
	t36 -= t40;
	t38 += t24;
	t24 = t32 - t17;
	t40 = t33 - t44;
	t32 += t17;
	t33 += t44;
	t17 = t52 + t56;
	t44 = t54 - t41;
	t52 -= t56;
	t54 += t41;
	t41 = t0 - t4;
	t56 = t1 - t5;
	t0 += t4;
	t1 += t5;
	t4 = t8 + t13;
	t5 = t9 - t12;
	t8 -= t13;
	t9 += t12;
	t12 = t60 - t45;
	t13 = t61 - t22;
	t60 += t45;
	t61 += t22;
	t22 = t37 + t46;
	t45 = t39 - t43;
	t37 -= t46;
	t39 += t43;
	t43 = t2 - t10;
	t46 = t3 - t11;
	t2 += t10;
	t3 += t11;
	t10 = t18 + t27;
	t11 = t19 - t26;
	t18 -= t27;
	t19 += t26;
	t26 = t34 - t57;
	t27 = t35 - t42;
	t34 += t57;
	t35 += t42;
	t42 = t50 + t58;
	t57 = t51 - t47;
	t50 -= t58;
	t51 += t47;
	t47 = t6 - t14;
	t58 = t7 - t15;
	t6 += t14;
	t7 += t15;
	t14 = valueT(0.19509032201612826785) * t4 - valueT(0.98078528040323044913) * t5;
	t4 = valueT(0.98078528040323044913) * t4 + valueT(0.19509032201612826785) * t5;
	t5 = valueT(0.83146961230254523708) * t8 - valueT(0.55557023301960222474) * t9;
	t8 = valueT(0.55557023301960222474) * t8 + valueT(0.83146961230254523708) * t9;
	t9 = valueT(0.55557023301960222474) * t12 - valueT(0.83146961230254523708) * t13;
	t12 = valueT(0.83146961230254523708) * t12 + valueT(0.55557023301960222474) * t13;
	t13 = valueT(0.98078528040323044913) * t60 - valueT(0.19509032201612826785) * t61;
	t60 = valueT(0.19509032201612826785) * t60 + valueT(0.98078528040323044913) * t61;
	t15 = valueT(0.38268343236508977173) * t22 - valueT(0.92387953251128675613) * t45;
	t22 = valueT(0.92387953251128675613) * t22 + valueT(0.38268343236508977173) * t45;
	t45 = valueT(0.92387953251128675613) * t37 - valueT(0.38268343236508977173) * t39;
	t37 = valueT(0.38268343236508977173) * t37 + valueT(0.92387953251128675613) * t39;
	t39 = valueT(0.7071067811865475244) * (t43 - t46);
	t43 = valueT(0.7071067811865475244) * (t43 + t46);
	t46 = valueT(0.55557023301960222474) * t10 - valueT(0.83146961230254523708) * t11;
	t10 = valueT(0.83146961230254523708) * t10 + valueT(0.55557023301960222474) * t11;
	t11 = valueT(0.19509032201612826785) * t18 + valueT(0.98078528040323044913) * t19;
	t18 = valueT(0.98078528040323044913) * t18 - valueT(0.19509032201612826785) * t19;
	t19 = valueT(0.98078528040323044913) * t26 + valueT(0.19509032201612826785) * t27;
	t26 = valueT(0.19509032201612826785) * t26 - valueT(0.98078528040323044913) * t27;
	t27 = valueT(0.83146961230254523708) * t34 - valueT(0.55557023301960222474) * t35;
	t34 = valueT(0.55557023301960222474) * t34 + valueT(0.83146961230254523708) * t35;
	t35 = valueT(0.92387953251128675613) * t42 - valueT(0.38268343236508977173) * t57;
	t42 = valueT(0.38268343236508977173) * t42 + valueT(0.92387953251128675613) * t57;
	t57 = valueT(0.38268343236508977173) * t50 - valueT(0.92387953251128675613) * t51;
	t50 = valueT(0.92387953251128675613) * t50 + valueT(0.38268343236508977173) * t51;
	t51 = valueT(0.7071067811865475244) * (t47 + t58);
	t47 = valueT(0.7071067811865475244) * (t47 - t58);
	t58 = t14 + t46;
	t61 = t4 + t10;
	t14 -= t46;
	t4 -= t10;
	t10 = t5 + t11;
	t46 = t8 - t18;
	t5 -= t11;
	t8 += t18;
	t11 = t9 + t19;
	t18 = t12 - t26;
	t9 -= t19;
	t12 += t26;
	t19 = t13 - t27;
	t26 = t60 - t34;
	t13 += t27;
	t60 += t34;
	t27 = t15 + t35;
	t34 = t22 + t42;
	t15 -= t35;
	t22 -= t42;
	t35 = t45 - t57;
	t42 = t37 - t50;
	t45 += t57;
	t37 += t50;
	t50 = t39 + t51;
	t57 = t43 - t47;
	t39 -= t51;
	t43 += t47;
	t47 = t2 - t6;
	t51 = t3 - t7;
	t2 += t6;
	t3 += t7;
	pReal[0 * stride] = t0 + t2;
	pImag[0 * stride] = t1 + t3;
	pReal[1 * stride] = t64 + t13;
	pImag[1 * stride] = t65 + t60;
	pReal[2 * stride] = t32 + t45;
	pImag[2 * stride] = t33 + t37;
	pReal[3 * stride] = t28 + t5;
	pImag[3 * stride] = t29 + t8;
	pReal[4 * stride] = t52 + t39;
	pImag[4 * stride] = t54 + t43;
	pReal[5 * stride] = t20 + t9;
	pImag[5 * stride] = t21 + t12;
	pReal[6 * stride] = t36 + t15;
	pImag[6 * stride] = t38 + t22;
	pReal[7 * stride] = t48 + t14;
	pImag[7 * stride] = t49 + t4;
	pReal[8 * stride] = t41 - t51;
	pImag[8 * stride] = t56 + t47;
	pReal[9 * stride] = t59 - t26;
	pImag[9 * stride] = t63 + t19;
	pReal[10 * stride] = t24 - t42;
	pImag[10 * stride] = t40 + t35;
	pReal[11 * stride] = t30 - t46;
	pImag[11 * stride] = t31 + t10;
	pReal[12 * stride] = t17 - t57;
	pImag[12 * stride] = t44 + t50;
	pReal[13 * stride] = t23 - t18;
	pImag[13 * stride] = t25 + t11;
	pReal[14 * stride] = t55 - t34;
	pImag[14 * stride] = t62 + t27;
	pReal[15 * stride] = t16 - t61;
	pImag[15 * stride] = t53 + t58;
	pReal[16 * stride] = t0 - t2;
	pImag[16 * stride] = t1 - t3;
	pReal[17 * stride] = t64 - t13;
	pImag[17 * stride] = t65 - t60;
	pReal[18 * stride] = t32 - t45;
	pImag[18 * stride] = t33 - t37;
	pReal[19 * stride] = t28 - t5;
	pImag[19 * stride] = t29 - t8;
	pReal[20 * stride] = t52 - t39;
	pImag[20 * stride] = t54 - t43;
	pReal[21 * stride] = t20 - t9;
	pImag[21 * stride] = t21 - t12;
	pReal[22 * stride] = t36 - t15;
	pImag[22 * stride] = t38 - t22;
	pReal[23 * stride] = t48 - t14;
	pImag[23 * stride] = t49 - t4;
	pReal[24 * stride] = t41 + t51;
	pImag[24 * stride] = t56 - t47;
	pReal[25 * stride] = t59 + t26;
	pImag[25 * stride] = t63 - t19;
	pReal[26 * stride] = t24 + t42;
	pImag[26 * stride] = t40 - t35;
	pReal[27 * stride] = t30 + t46;
	pImag[27 * stride] = t31 - t10;
	pReal[28 * stride] = t17 + t57;
	pImag[28 * stride] = t44 - t50;
	pReal[29 * stride] = t23 + t18;
	pImag[29 * stride] = t25 - t11;
	pReal[30 * stride] = t55 + t34;
	pImag[30 * stride] = t62 - t27;
	pReal[31 * stride] = t16 + t61;
	pImag[31 * stride] = t53 - t58;
}

template<> void StandardModule<float, 32>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 32>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
