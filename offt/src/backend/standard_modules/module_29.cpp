
//          Copyright Christian Volmer 2022, 2023.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

/*
	Number of additions       : 0
	Number of multiplications : 0
*/

template<> StandardModuleComplexity const StandardModule<float, 29>::Complexity = { 0, 0 };
template<> StandardModuleComplexity const StandardModule<double, 29>::Complexity = { 0, 0 };

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT r29, i29, r31, i31, r58, i58, r42, i42, r76, i76;
	valueT r87, i87, r44, i44, r43, i43, r41, i41, r40, i40;
	valueT r39, i39, r38, i38, r37, i37, r36, i36, r35, i35;
	valueT r34, i34, r33, i33, r32, i32, r75, i75, r79, i79;
	valueT r74, i74, r78, i78, r81, i81, r83, i83, r112, i112;
	valueT r110, i110, r114, i114, r115, i115, r116, i116, r107, i107;
	valueT r117, i117, r233, i233, r352, i352, r356, i356, r163, i163;
	valueT r326, i326, r320, i320, r358, i358, r313, i313, r221, i221;
	valueT r359, i359, r222, i222, r206, i206, r354, i354, r209, i209;
	valueT r388, i388, r315, i315, r368, i368, r484, i484, r464, i464;
	valueT r409, i409, r450, i450, r491, i491, r467, i467, r521, i521;
	valueT r520, i520, r530, i530, r453, i453, r564, i564, r567, i567;
	valueT r596, i596, r600, i600, r599, i599, r594, i594, r598, i598;
	valueT r601, i601, r591, i591, r589, i589, r597, i597, r595, i595;
	valueT r593, i593, r592, i592, r590, i590, r621, i621, r618, i618;
	valueT r343, i343, r342, i342, r341, i341, r321, i321, r334, i334;
	valueT r426, i426, r413, i413, r575, i575, r487, i487, r482, i482;
	valueT r492, i492, r488, i488, r501, i501, r536, i536, r535, i535;
	valueT r538, i538, r498, i498, r526, i526, r524, i524, r534, i534;
	valueT r537, i537, r531, i531, r553, i553, r612, i612, r616, i616;
	valueT r610, i610, r608, i608, r607, i607, r609, i609, r625, i625;
	valueT r615, i615, r617, i617, r614, i614, r613, i613, r611, i611;
	valueT r605, i605, r620, i620, r624, i624, r622, i622, r619, i619;
	valueT r627, i627;

	phasors.Multiply(r29, i29, pReal[28 * stride], pImag[28 * stride], twiddleStart + 28 * twiddleIncrement);
	{
		valueT s1r, s1i;
		phasors.Multiply(s1r, s1i, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
		r31 = s1r - r29;
		i31 = s1i - i29;
		r58 = r29 + s1r;
		i58 = i29 + s1i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i;
		phasors.Multiply(s1r, s1i, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
		phasors.Multiply(s2r, s2i, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
		r42 = s1r - s2r;
		i42 = s1i - s2i;
		s3r = s1r + s2r;
		s3i = s1i + s2i;
		r76 = s3r - r58;
		i76 = s3i - i58;
		r87 = r58 + s3r;
		i87 = i58 + s3i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i, s25r, s25i;
		valueT s26r, s26i, s27r, s27i, s28r, s28i, s29r, s29i, s30r, s30i;
		valueT s31r, s31i, s32r, s32i, s33r, s33i, s34r, s34i, s35r, s35i;
		valueT s36r, s36i, s37r, s37i, s38r, s38i, s39r, s39i, s40r, s40i;
		valueT s41r, s41i, s42r, s42i;
		phasors.Multiply(s1r, s1i, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
		phasors.Multiply(s2r, s2i, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
		phasors.Multiply(s3r, s3i, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
		phasors.Multiply(s4r, s4i, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
		phasors.Multiply(s5r, s5i, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
		phasors.Multiply(s6r, s6i, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
		phasors.Multiply(s7r, s7i, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
		phasors.Multiply(s8r, s8i, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
		phasors.Multiply(s9r, s9i, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
		phasors.Multiply(s10r, s10i, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
		phasors.Multiply(s11r, s11i, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
		phasors.Multiply(s12r, s12i, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
		phasors.Multiply(s13r, s13i, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
		phasors.Multiply(s14r, s14i, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
		phasors.Multiply(s15r, s15i, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
		phasors.Multiply(s16r, s16i, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
		phasors.Multiply(s17r, s17i, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
		phasors.Multiply(s18r, s18i, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
		phasors.Multiply(s19r, s19i, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
		phasors.Multiply(s20r, s20i, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
		phasors.Multiply(s21r, s21i, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);
		phasors.Multiply(s22r, s22i, pReal[25 * stride], pImag[25 * stride], twiddleStart + 25 * twiddleIncrement);
		phasors.Multiply(s23r, s23i, pReal[26 * stride], pImag[26 * stride], twiddleStart + 26 * twiddleIncrement);
		phasors.Multiply(s24r, s24i, pReal[27 * stride], pImag[27 * stride], twiddleStart + 27 * twiddleIncrement);
		r44 = s12r - s13r;
		i44 = s12i - s13i;
		s25r = s12r + s13r;
		s25i = s12i + s13i;
		r43 = s11r - s14r;
		i43 = s11i - s14i;
		s26r = s11r + s14r;
		s26i = s11i + s14i;
		r41 = s10r - s15r;
		i41 = s10i - s15i;
		s27r = s10r + s15r;
		s27i = s10i + s15i;
		r40 = s9r - s16r;
		i40 = s9i - s16i;
		s28r = s9r + s16r;
		s28i = s9i + s16i;
		r39 = s8r - s17r;
		i39 = s8i - s17i;
		s29r = s8r + s17r;
		s29i = s8i + s17i;
		r38 = s7r - s18r;
		i38 = s7i - s18i;
		s30r = s7r + s18r;
		s30i = s7i + s18i;
		r37 = s6r - s19r;
		i37 = s6i - s19i;
		s31r = s6r + s19r;
		s31i = s6i + s19i;
		r36 = s5r - s20r;
		i36 = s5i - s20i;
		s32r = s5r + s20r;
		s32i = s5i + s20i;
		r35 = s4r - s21r;
		i35 = s4i - s21i;
		s33r = s4r + s21r;
		s33i = s4i + s21i;
		r34 = s3r - s22r;
		i34 = s3i - s22i;
		s34r = s3r + s22r;
		s34i = s3i + s22i;
		r33 = s2r - s23r;
		i33 = s2i - s23i;
		s35r = s2r + s23r;
		s35i = s2i + s23i;
		r32 = s1r - s24r;
		i32 = s1i - s24i;
		s36r = s1r + s24r;
		s36i = s1i + s24i;
		r75 = s26r - s27r;
		i75 = s26i - s27i;
		s37r = s26r + s27r;
		s37i = s26i + s27i;
		r79 = s29r - s30r;
		i79 = s29i - s30i;
		s38r = s29r + s30r;
		s38i = s29i + s30i;
		r74 = s25r - s32r;
		i74 = s25i - s32i;
		s39r = s25r + s32r;
		s39i = s25i + s32i;
		r78 = s28r - s34r;
		i78 = s28i - s34i;
		s40r = s28r + s34r;
		s40i = s28i + s34i;
		r81 = s31r - s35r;
		i81 = s31i - s35i;
		s41r = s31r + s35r;
		s41i = s31i + s35i;
		r83 = s33r - s36r;
		i83 = s33i - s36i;
		s42r = s33r + s36r;
		s42i = s33i + s36i;
		r112 = s39r - s37r;
		i112 = s39i - s37i;
		r110 = s38r - s39r;
		i110 = s38i - s39i;
		r114 = s40r - s39r;
		i114 = s40i - s39i;
		r115 = s41r - s39r;
		i115 = s41i - s39i;
		r116 = s42r - s39r;
		i116 = s42i - s39i;
		r107 = r87 + s37r + s38r + s39r + s40r + s41r + s42r;
		i107 = i87 + s37i + s38i + s39i + s40i + s41i + s42i;
		r117 = r87 - s39r;
		i117 = i87 - s39i;
	}
	{
		valueT s1r, s1i;
		r233 = -r112 - r110;
		i233 = -i112 - i110;
		r352 = valueT(-2.199110244768684341) * r110;
		i352 = valueT(-2.199110244768684341) * i110;
		r356 = valueT(-1.2451582386369712029) * r114;
		i356 = valueT(-1.2451582386369712029) * i114;
		r163 = -r110 - r115;
		i163 = -i110 - i115;
		r326 = r114 - r115;
		i326 = i114 - i115;
		r320 = r112 + r116;
		i320 = i112 + i116;
		r358 = valueT(0.4804324838913158808) * r116;
		i358 = valueT(0.4804324838913158808) * i116;
		r313 = r117 - r110;
		i313 = i117 - i110;
		s1r = -r114 - r117;
		s1i = -i114 - i117;
		r221 = r116 - r117;
		i221 = i116 - i117;
		r359 = valueT(-0.19386149913902821259) * r117;
		i359 = valueT(-0.19386149913902821259) * i117;
		r222 = s1r - r116;
		i222 = s1i - i116;
		r206 = r116 + s1r;
		i206 = i116 + s1i;
	}
	{
		valueT s1r, s1i;
		r354 = valueT(0.45673744217887117294) * r112;
		i354 = valueT(0.45673744217887117294) * i112;
		s1r = r163 - r112;
		s1i = i163 - i112;
		r209 = r112 + r163;
		i209 = i112 + i163;
		r388 = valueT(0.71665655846687549571) * s1r;
		i388 = valueT(0.71665655846687549571) * s1i;
		r315 = r206 - s1r;
		i315 = i206 - s1i;
		r368 = valueT(0.54874024105708110331) * r206;
		i368 = valueT(0.54874024105708110331) * i206;
	}
	{
		valueT s1r, s1i;
		s1r = valueT(-0.39421039822905001498) * r315;
		s1i = valueT(-0.39421039822905001498) * i315;
		r484 = r388 - s1r;
		i484 = i388 - s1i;
		r464 = r368 + s1r;
		i464 = i368 + s1i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i;
		s1r = valueT(-0.45673744217887117294) * r233;
		s1i = valueT(-0.45673744217887117294) * i233;
		s2r = valueT(0.47351952224039725733) * r320;
		s2i = valueT(0.47351952224039725733) * i320;
		r409 = valueT(1.1645955853322674351) * r313;
		i409 = valueT(1.1645955853322674351) * i313;
		s3r = r233 - r221;
		s3i = i233 - i221;
		s4r = valueT(0.4804324838913158808) * r221;
		s4i = valueT(0.4804324838913158808) * i221;
		s5r = valueT(-0.46787993029260016536) * r209;
		s5i = valueT(-0.46787993029260016536) * i209;
		r450 = r354 - s2r;
		i450 = i354 - s2i;
		s6r = r358 + s2r;
		s6i = i358 + s2i;
		s7r = r359 + r409;
		s7i = i359 + i409;
		s8r = r209 - r222;
		s8i = i209 - i222;
		s9r = valueT(0.0090960727732564037059) * r222;
		s9i = valueT(0.0090960727732564037059) * i222;
		s10r = valueT(-0.47351952224039725733) * s3r;
		s10i = valueT(-0.47351952224039725733) * s3i;
		s11r = valueT(-0.066619874630766335383) * s8r;
		s11i = valueT(-0.066619874630766335383) * s8i;
		r491 = s1r - s10r;
		i491 = s1i - s10i;
		s12r = s4r + s10r;
		s12i = s4i + s10i;
		r467 = s5r - s11r;
		i467 = s5i - s11i;
		s13r = s9r + s11r;
		s13i = s9i + s11i;
		r521 = s7r + s12r;
		i521 = s7i + s12i;
		r520 = r464 + s6r + s13r - s12r;
		i520 = i464 + s6i + s13i - s12i;
		r530 = r464 - s13r;
		i530 = i464 - s13i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i;
		s1r = valueT(-1.3191863035059950549) * r115;
		s1i = valueT(-1.3191863035059950549) * i115;
		s2r = valueT(0.36523429737428191673) * r326;
		s2i = valueT(0.36523429737428191673) * i326;
		s3r = r356 + s2r;
		s3i = i356 + s2i;
		r453 = s1r - s2r;
		i453 = s1i - s2i;
		r564 = s3r - r530;
		i564 = s3i - i530;
		r567 = r521 - r530;
		i567 = i521 - i530;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		phasors.Multiply(s1r, s1i, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
		s2r = r107 + s1r;
		s2i = i107 + s1i;
		s3r = valueT(-1.0357142857142857143) * r107;
		s3i = valueT(-1.0357142857142857143) * i107;
		pReal[0 * stride] = s2r;
		pImag[0 * stride] = s2i;
		s4r = s2r + s3r;
		s4i = s2i + s3i;
		s5r = r352 - r409;
		s5i = i352 - i409;
		s6r = r491 + s5r;
		s6i = i491 + s5i;
		s7r = r484 + r450 + r467 - r491;
		s7i = i484 + i450 + i467 - i491;
		s8r = r467 - r484;
		s8i = i467 - i484;
		r596 = s4r + s7r;
		i596 = s4i + s7i;
		s9r = r453 + s8r;
		s9i = i453 + s8i;
		s10r = s6r + s8r;
		s10i = s6i + s8i;
		r600 = r520 + s4r;
		i600 = i520 + s4i;
		r599 = s4r + s9r;
		i599 = s4i + s9i;
		r594 = s4r + s10r;
		i594 = s4i + s10i;
		r598 = r564 + s4r;
		i598 = i564 + s4i;
		r601 = r520 + r564 + r567 + s7r + s9r + s10r - s4r;
		i601 = i520 + i564 + i567 + s7i + s9i + s10i - s4i;
		r591 = r567 + s4r;
		i591 = i567 + s4i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i, s25r, s25i;
		valueT s26r, s26i, s27r, s27i, s28r, s28i, s29r, s29i, s30r, s30i;
		valueT s31r, s31i, s32r, s32i, s33r, s33i, s34r, s34i, s35r, s35i;
		valueT s36r, s36i, s37r, s37i, s38r, s38i, s39r, s39i, s40r, s40i;
		valueT s41r, s41i, s42r, s42i, s43r, s43i, s44r, s44i, s45r, s45i;
		valueT s46r, s46i, s47r, s47i, s48r, s48i, s49r, s49i, s50r, s50i;
		valueT s51r, s51i, s52r, s52i, s53r, s53i, s54r, s54i, s55r, s55i;
		valueT s56r, s56i, s57r, s57i, s58r, s58i, s59r, s59i, s60r, s60i;
		valueT s61r, s61i, s62r, s62i, s63r, s63i;
		s1r = r75 + r74;
		s1i = i75 + i74;
		s2r = r79 + r74;
		s2i = i79 + i74;
		s3r = r78 - r74;
		s3i = i78 - i74;
		s4r = r74 + r81;
		s4i = i74 + i81;
		s5r = r74 + r83;
		s5i = i74 + i83;
		s6r = r76 + r74 + r78 - r75 - r79 - r81 - r83;
		s6i = i76 + i74 + i78 - i75 - i79 - i81 - i83;
		s7r = r76 - r74;
		s7i = i76 - i74;
		s8r = valueT(1.0541141783383589678) * s1r;
		s8i = valueT(1.0541141783383589678) * s1i;
		s9r = s1r + s2r;
		s9i = s1i + s2i;
		s10r = valueT(0.47049654017752359027) * s2r;
		s10i = valueT(0.47049654017752359027) * s2i;
		s11r = valueT(-2.0028314592008918711) * s3r;
		s11i = valueT(-2.0028314592008918711) * s3i;
		s12r = s2r + s4r;
		s12i = s2i + s4i;
		s13r = s3r - s4r;
		s13i = s3i - s4i;
		s14r = valueT(1.1723105344069424317) * s4r;
		s14i = valueT(1.1723105344069424317) * s4i;
		s15r = -s1r - s5r;
		s15i = -s1i - s5i;
		s16r = valueT(0.6262565773796173661) * s5r;
		s16i = valueT(0.6262565773796173661) * s5i;
		s17r = valueT(-0.19232731454051800112) * s6r;
		s17i = valueT(-0.19232731454051800112) * s6i;
		s18r = s7r - s2r;
		s18i = s7i - s2i;
		s19r = s3r + s7r;
		s19i = s3i + s7i;
		s20r = s7r - s5r;
		s20i = s7i - s5i;
		s21r = valueT(-0.58060338567942270123) * s7r;
		s21i = valueT(-0.58060338567942270123) * s7i;
		s22r = valueT(-1.0541141783383589678) * s9r;
		s22i = valueT(-1.0541141783383589678) * s9i;
		s23r = s12r - s1r;
		s23i = s12i - s1i;
		s24r = s1r + s12r;
		s24i = s1i + s12i;
		s25r = valueT(1.2877159444989510738) * s13r;
		s25i = valueT(1.2877159444989510738) * s13i;
		s26r = valueT(0.74166198747162600814) * s15r;
		s26i = valueT(0.74166198747162600814) * s15i;
		s27r = valueT(1.0084609866381643029) * s18r;
		s27i = valueT(1.0084609866381643029) * s18i;
		s28r = s19r - s5r;
		s28i = s19i - s5i;
		s29r = s5r + s19r;
		s29i = s5i + s19i;
		s30r = s20r - s9r;
		s30i = s20i - s9i;
		s31r = valueT(0.6262565773796173661) * s20r;
		s31i = valueT(0.6262565773796173661) * s20i;
		s32r = valueT(0.088970030922107431786) * s23r;
		s32i = valueT(0.088970030922107431786) * s23i;
		s33r = valueT(-0.062423558152422220936) * s24r;
		s33i = valueT(-0.062423558152422220936) * s24i;
		s34r = s11r + s25r;
		s34i = s11i + s25i;
		s35r = s14r + s25r;
		s35i = s14i + s25i;
		s36r = s8r + s26r;
		s36i = s8i + s26i;
		s37r = s16r + s26r;
		s37i = s16i + s26i;
		s38r = s10r + s27r;
		s38i = s10i + s27i;
		s39r = s21r + s27r;
		s39i = s21i + s27i;
		s40r = s28r - s24r;
		s40i = s28i - s24i;
		s41r = valueT(0.12012626319842654196) * s28r;
		s41i = valueT(0.12012626319842654196) * s28i;
		s42r = s29r - s23r;
		s42i = s29i - s23i;
		s43r = valueT(0.85513749043379157219) * s29r;
		s43i = valueT(0.85513749043379157219) * s29i;
		s44r = valueT(-0.74166198747162600814) * s30r;
		s44i = valueT(-0.74166198747162600814) * s30i;
		s45r = valueT(-0.062399279899679448541) * s40r;
		s45i = valueT(-0.062399279899679448541) * s40i;
		s46r = valueT(-0.5009051132009516625) * s42r;
		s46i = valueT(-0.5009051132009516625) * s42i;
		s47r = s22r + s44r;
		s47i = s22i + s44i;
		s48r = s31r + s44r;
		s48i = s31i + s44i;
		s49r = s33r + s45r;
		s49i = s33i + s45i;
		s50r = s41r + s45r;
		s50i = s41i + s45i;
		s51r = s32r - s46r;
		s51i = s32i - s46i;
		s52r = s43r + s46r;
		s52i = s43i + s46i;
		s53r = s38r + s47r;
		s53i = s38i + s47i;
		s54r = s39r + s48r;
		s54i = s39i + s48i;
		s55r = s36r + s47r + s49r + s51r;
		s55i = s36i + s47i + s49i + s51i;
		s56r = s51r - s49r;
		s56i = s51i - s49i;
		s57r = s37r + s48r + s50r - s52r;
		s57i = s37i + s48i + s50i - s52i;
		s58r = s50r + s52r;
		s58i = s50i + s52i;
		r589 = s55r - s17r;
		i589 = s55i - s17i;
		s59r = s35r - s56r;
		s59i = s35i - s56i;
		s60r = s53r - s56r;
		s60i = s53i - s56i;
		r597 = s57r - s17r;
		i597 = s57i - s17i;
		s61r = s34r + s58r;
		s61i = s34i + s58i;
		s62r = s54r + s58r;
		s62i = s54i + s58i;
		r595 = s59r - s17r;
		i595 = s59i - s17i;
		r593 = s60r - s17r;
		i593 = s60i - s17i;
		r592 = s61r - s17r;
		i592 = s61i - s17i;
		s63r = s17r - s62r;
		s63i = s17i - s62i;
		r590 = s17r + s55r + s57r + s59r + s60r + s61r + s62r;
		i590 = s17i + s55i + s57i + s59i + s60i + s61i + s62i;
		r621 = r591 - s63r;
		i621 = i591 - s63i;
		r618 = r591 + s63r;
		i618 = i591 + s63i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i, s25r, s25i;
		valueT s26r, s26i, s27r, s27i, s28r, s28i, s29r, s29i, s30r, s30i;
		valueT s31r, s31i, s32r, s32i, s33r, s33i, s34r, s34i, s35r, s35i;
		valueT s36r, s36i, s37r, s37i, s38r, s38i, s39r, s39i, s40r, s40i;
		valueT s41r, s41i, s42r, s42i, s43r, s43i, s44r, s44i, s45r, s45i;
		valueT s46r, s46i, s47r, s47i, s48r, s48i, s49r, s49i, s50r, s50i;
		valueT s51r, s51i, s52r, s52i, s53r, s53i, s54r, s54i, s55r, s55i;
		valueT s56r, s56i, s57r, s57i, s58r, s58i, s59r, s59i, s60r, s60i;
		valueT s61r, s61i, s62r, s62i, s63r, s63i, s64r, s64i, s65r, s65i;
		valueT s66r, s66i, s67r, s67i, s68r, s68i, s69r, s69i, s70r, s70i;
		valueT s71r, s71i, s72r, s72i, s73r, s73i, s74r, s74i, s75r, s75i;
		valueT s76r, s76i, s77r, s77i, s78r, s78i, s79r, s79i, s80r, s80i;
		valueT s81r, s81i, s82r, s82i, s83r, s83i, s84r, s84i, s85r, s85i;
		valueT s86r, s86i, s87r, s87i, s88r, s88i, s89r, s89i, s90r, s90i;
		valueT s91r, s91i, s92r, s92i, s93r, s93i, s94r, s94i, s95r, s95i;
		valueT s96r, s96i, s97r, s97i, s98r, s98i, s99r, s99i, s100r, s100i;
		valueT s101r, s101i, s102r, s102i, s103r, s103i, s104r, s104i, s105r, s105i;
		valueT s106r, s106i, s107r, s107i, s108r, s108i, s109r, s109i, s110r, s110i;
		valueT s111r, s111i, s112r, s112i, s113r, s113i, s114r, s114i, s115r, s115i;
		valueT s116r, s116i, s117r, s117i, s118r, s118i, s119r, s119i, s120r, s120i;
		valueT s121r, s121i, s122r, s122i, s123r, s123i, s124r, s124i, s125r, s125i;
		valueT s126r, s126i, s127r, s127i, s128r, s128i, s129r, s129i, s130r, s130i;
		valueT s131r, s131i, s132r, s132i, s133r, s133i, s134r, s134i, s135r, s135i;
		valueT s136r, s136i, s137r, s137i, s138r, s138i, s139r, s139i, s140r, s140i;
		valueT s141r, s141i, s142r, s142i, s143r, s143i, s144r, s144i, s145r, s145i;
		valueT s146r, s146i, s147r, s147i, s148r, s148i, s149r, s149i, s150r, s150i;
		valueT s151r, s151i, s152r, s152i, s153r, s153i, s154r, s154i, s155r, s155i;
		valueT s156r, s156i, s157r, s157i, s158r, s158i, s159r, s159i, s160r, s160i;
		valueT s161r, s161i;
		s1r = r42 + r44;
		s1i = i42 + i44;
		s2r = r41 - r44;
		s2i = i41 - i44;
		s3r = r44 + r40;
		s3i = i44 + i40;
		s4r = r44 + r38;
		s4i = i44 + i38;
		s5r = r43 + r37;
		s5i = i43 + i37;
		s6r = r39 + r37;
		s6i = i39 + i37;
		s7r = r37 + r36;
		s7i = i37 + i36;
		s8r = r37 + r35;
		s8i = i37 + i35;
		s9r = r35 - r36;
		s9i = i35 - i36;
		s10r = r37 + r34;
		s10i = i37 + i34;
		s11r = r33 - r44;
		s11i = i33 - i44;
		s12r = r44 + r41 + r33 + r32 - r42 - r40 - r38;
		s12i = i44 + i41 + i33 + i32 - i42 - i40 - i38;
		s13r = r44 - r32;
		s13i = i44 - i32;
		s14r = r31 + r37 - r43 - r39 - r36 - r35 - r34;
		s14i = i31 + i37 - i43 - i39 - i36 - i35 - i34;
		s15r = r37 - r31;
		s15i = i37 - i31;
		s16r = r31 + r34;
		s16i = i31 + i34;
		r343 = valueT(-0.72023069602016977662) * s1i;
		i343 = valueT(0.72023069602016977662) * s1r;
		r342 = valueT(2.4773412066737595288) * s2i;
		i342 = valueT(-2.4773412066737595288) * s2r;
		s17r = s2r + s3r;
		s17i = s2i + s3i;
		r341 = valueT(-2.2106707410646592313) * s3i;
		i341 = valueT(2.2106707410646592313) * s3r;
		s18r = s3r + s4r;
		s18i = s3i + s4i;
		s19r = valueT(-3.8210714177002708172) * s4i;
		s19i = valueT(3.8210714177002708172) * s4r;
		s20r = s4r + s5r;
		s20i = s4i + s5i;
		s21r = valueT(-0.51884275862858327983) * s5i;
		s21i = valueT(0.51884275862858327983) * s5r;
		s22r = s6r - s1r;
		s22i = s6i - s1i;
		s23r = s3r + s6r;
		s23i = s3i + s6i;
		s24r = s5r + s6r;
		s24i = s5i + s6i;
		s25r = valueT(0.71263251733048594545) * s6i;
		s25i = valueT(-0.71263251733048594545) * s6r;
		s26r = s7r - s1r;
		s26i = s7i - s1i;
		s27r = s3r + s7r;
		s27i = s3i + s7i;
		s28r = valueT(-4.207744468725357903) * s7i;
		s28i = valueT(4.207744468725357903) * s7r;
		s29r = s2r - s8r;
		s29i = s2i - s8i;
		s30r = valueT(-2.4427679339713280105) * s8i;
		s30i = valueT(2.4427679339713280105) * s8r;
		s31r = s9r - s1r;
		s31i = s9i - s1i;
		s32r = s1r + s9r;
		s32i = s1i + s9i;
		s33r = s8r + s10r;
		s33i = s8i + s10i;
		s34r = valueT(-1.4372232982598195581) * s10i;
		s34i = valueT(1.4372232982598195581) * s10r;
		r321 = -s2r - s11r;
		i321 = -s2i - s11i;
		s35r = s4r + s11r;
		s35i = s4i + s11i;
		s36r = s11r - s10r;
		s36i = s11i - s10i;
		r334 = valueT(1.9714952686068235984) * s11i;
		i334 = valueT(-1.9714952686068235984) * s11r;
		s37r = valueT(-0.30497298630563745439) * s12i;
		s37i = valueT(0.30497298630563745439) * s12r;
		s38r = s1r + s13r;
		s38i = s1i + s13i;
		s39r = s5r - s13r;
		s39i = s5i - s13i;
		s40r = valueT(0.57610278233688463497) * s13i;
		s40i = valueT(-0.57610278233688463497) * s13r;
		s41r = s14r - s12r;
		s41i = s14i - s12i;
		s42r = valueT(0.45045515311822135399) * s14i;
		s42i = valueT(-0.45045515311822135399) * s14r;
		s43r = -s4r - s15r;
		s43i = -s4i - s15i;
		s44r = s7r + s15r;
		s44i = s7i + s15i;
		s45r = s13r - s15r;
		s45i = s13i - s15i;
		s46r = valueT(-0.96543040775604257462) * s15i;
		s46i = valueT(0.96543040775604257462) * s15r;
		s47r = s16r - s13r;
		s47i = s16i - s13i;
		s48r = s13r + s16r;
		s48i = s13i + s16i;
		s49r = s17r - s6r;
		s49i = s17i - s6i;
		s50r = s6r + s17r;
		s50i = s6i + s17i;
		r426 = valueT(1.8229300743337223851) * s18i;
		i426 = valueT(-1.8229300743337223851) * s18r;
		s51r = valueT(0.51884275862858327983) * s20i;
		s51i = valueT(-0.51884275862858327983) * s20r;
		s52r = valueT(-1.1510202792979488592) * s22i;
		s52i = valueT(1.1510202792979488592) * s22r;
		s53r = s20r + s23r;
		s53i = s20i + s23i;
		s54r = valueT(-0.71263251733048594545) * s23i;
		s54i = valueT(0.71263251733048594545) * s23r;
		s55r = valueT(-0.15149454666140099157) * s24i;
		s55i = valueT(0.15149454666140099157) * s24r;
		s56r = s23r + s26r;
		s56i = s23i + s26i;
		s57r = valueT(-0.72023069602016977662) * s26i;
		s57i = valueT(0.72023069602016977662) * s26r;
		s58r = valueT(-0.72407239762015454749) * s27i;
		s58i = valueT(0.72407239762015454749) * s27r;
		s59r = valueT(-1.177470784625126042) * s29i;
		s59i = valueT(1.177470784625126042) * s29r;
		s60r = valueT(-1.3513758108910238651) * s31i;
		s60i = valueT(1.3513758108910238651) * s31r;
		s61r = valueT(1.4216326551609725698) * s32i;
		s61i = valueT(-1.4216326551609725698) * s32r;
		s62r = valueT(1.9983612689289045119) * s33i;
		s62i = valueT(-1.9983612689289045119) * s33r;
		s63r = s35r - s5r;
		s63i = s35i - s5i;
		s64r = s5r + s35r;
		s64i = s5i + s35i;
		s65r = -s29r - s36r;
		s65i = -s29i - s36i;
		s66r = valueT(-0.7061981192606216299) * s36i;
		s66i = valueT(0.7061981192606216299) * s36r;
		r413 = valueT(0.37277585506313716507) * s38i;
		i413 = valueT(-0.37277585506313716507) * s38r;
		s67r = s22r + s39r;
		s67i = s22i + s39i;
		s68r = valueT(-1.352408216689535356) * s39i;
		s68i = valueT(1.352408216689535356) * s39r;
		s69r = valueT(0.0727410834062919498) * s41i;
		s69i = valueT(-0.0727410834062919498) * s41r;
		s70r = s27r - s43r;
		s70i = s27i - s43i;
		s71r = valueT(1.1107454486452416332) * s43i;
		s71i = valueT(-1.1107454486452416332) * s43r;
		s72r = valueT(1.4699023801136408761) * s44i;
		s72i = valueT(-1.4699023801136408761) * s44r;
		s73r = s45r - s20r;
		s73i = s45i - s20i;
		s74r = s26r - s45r;
		s74i = s26i - s45i;
		s75r = valueT(0.57610278233688463497) * s45i;
		s75i = valueT(-0.57610278233688463497) * s45r;
		s76r = -s31r - s47r;
		s76i = -s31i - s47i;
		s77r = valueT(0.95867284888846891676) * s47i;
		s77i = valueT(-0.95867284888846891676) * s47r;
		s78r = s32r + s48r;
		s78i = s32i + s48i;
		s79r = valueT(1.1625480818665135035) * s48i;
		s79i = valueT(-1.1625480818665135035) * s48r;
		s80r = s31r - s49r;
		s80i = s31i - s49i;
		s81r = valueT(1.2353272144376894755) * s49i;
		s81i = valueT(-1.2353272144376894755) * s49r;
		s82r = s50r - s32r;
		s82i = s50i - s32i;
		s83r = valueT(1.6177191996875069966) * s50i;
		s83i = valueT(-1.6177191996875069966) * s50r;
		s84r = s19r + r426;
		s84i = s19i + i426;
		s85r = valueT(0.15149454666140099157) * s53i;
		s85i = valueT(-0.15149454666140099157) * s53r;
		s86r = s21r + s55r;
		s86i = s21i + s55i;
		s87r = s25r + s55r;
		s87i = s25i + s55i;
		s88r = valueT(-1.1510202792979488592) * s56i;
		s88i = valueT(1.1510202792979488592) * s56r;
		s89r = s30r + s62r;
		s89i = s30i + s62i;
		s90r = s34r + s62r;
		s90i = s34i + s62i;
		s91r = s47r - s63r;
		s91i = s47i - s63i;
		s92r = -s49r - s63r;
		s92i = -s49i - s63i;
		s93r = valueT(-0.23325121083175671283) * s63i;
		s93i = valueT(0.23325121083175671283) * s63r;
		s94r = s64r - s48r;
		s94i = s64i - s48i;
		s95r = -s50r - s64r;
		s95i = -s50i - s64i;
		s96r = valueT(-0.94775651748494840434) * s64i;
		s96i = valueT(0.94775651748494840434) * s64r;
		s97r = valueT(-0.94130064408994895572) * s65i;
		s97i = valueT(0.94130064408994895572) * s65r;
		s98r = s40r + r413;
		s98i = s40i + i413;
		s99r = valueT(0.82498483345819123117) * s67i;
		s99i = valueT(-0.82498483345819123117) * s67r;
		r575 = s37r + s69r;
		i575 = s37i + s69i;
		s100r = s42r - s69r;
		s100i = s42i - s69i;
		s101r = valueT(0.81949220594907459462) * s70i;
		s101i = valueT(-0.81949220594907459462) * s70r;
		s102r = s28r + s72r;
		s102i = s28i + s72i;
		s103r = s46r + s72r;
		s103i = s46i + s72i;
		s104r = s56r - s73r;
		s104i = s56i - s73i;
		s105r = valueT(-1.352408216689535356) * s73i;
		s105i = valueT(1.352408216689535356) * s73r;
		s106r = valueT(-0.37277585506313716507) * s74i;
		s106i = valueT(0.37277585506313716507) * s74r;
		s107r = valueT(-0.32246947409067704954) * s76i;
		s107i = valueT(0.32246947409067704954) * s76r;
		s108r = valueT(-0.94376904290313171197) * s78i;
		s108i = valueT(0.94376904290313171197) * s78r;
		s109r = valueT(0.17834551870392280354) * s80i;
		s109i = valueT(-0.17834551870392280354) * s80r;
		s110r = valueT(1.4961804626910266413) * s82i;
		s110i = valueT(-1.4961804626910266413) * s82r;
		s111r = s51r + s85r;
		s111i = s51i + s85i;
		s112r = s54r + s85r;
		s112i = s54i + s85i;
		s113r = -s80r - s91r;
		s113i = -s80i - s91i;
		s114r = valueT(-0.93977908135534434873) * s91i;
		s114i = valueT(0.93977908135534434873) * s91r;
		s115r = valueT(-0.23475387679308598613) * s92i;
		s115i = valueT(0.23475387679308598613) * s92r;
		s116r = -s82r - s94r;
		s116i = -s82i - s94i;
		s117r = valueT(1.0223043250150024759) * s94i;
		s117i = valueT(-1.0223043250150024759) * s94r;
		s118r = valueT(-1.1183711753895827281) * s95i;
		s118i = valueT(1.1183711753895827281) * s95r;
		r487 = s59r + s97r;
		i487 = s59i + s97i;
		r482 = s66r + s97r;
		i482 = s66i + s97i;
		r492 = s52r + s99r;
		i492 = s52i + s99i;
		s119r = s68r + s99r;
		s119i = s68i + s99i;
		r488 = s58r + s101r;
		i488 = s58i + s101i;
		s120r = s71r + s101r;
		s120i = s71i + s101i;
		s121r = valueT(-0.82498483345819123117) * s104i;
		s121i = valueT(0.82498483345819123117) * s104r;
		s122r = s57r - s106r;
		s122i = s57i - s106i;
		s123r = s75r + s106r;
		s123i = s75i + s106i;
		s124r = s60r + s107r;
		s124i = s60i + s107i;
		s125r = s77r + s107r;
		s125i = s77i + s107i;
		s126r = s61r + s108r;
		s126i = s61i + s108i;
		s127r = s79r + s108r;
		s127i = s79i + s108i;
		s128r = valueT(-0.30790347065166901294) * s113i;
		s128i = valueT(0.30790347065166901294) * s113r;
		s129r = s81r - s115r;
		s129i = s81i - s115i;
		s130r = s93r + s115r;
		s130i = s93i + s115i;
		s131r = valueT(1.0683440129113842558) * s116i;
		s131i = valueT(-1.0683440129113842558) * s116r;
		s132r = s83r - s118r;
		s132i = s83i - s118i;
		s133r = s96r + s118r;
		s133i = s96i + s118i;
		s134r = s89r + r487;
		s134i = s89i + i487;
		s135r = s90r + r482;
		s135i = s90i + i482;
		s136r = s87r + r492;
		s136i = s87i + i492;
		s137r = s86r + s119r;
		s137i = s86i + s119i;
		s138r = s98r - s119r;
		s138i = s98i - s119i;
		s139r = s102r + r488;
		s139i = s102i + i488;
		r501 = s84r + s120r;
		i501 = s84i + s120i;
		s140r = s103r + s120r;
		s140i = s103i + s120i;
		s141r = s88r - s121r;
		s141i = s88i - s121i;
		s142r = s105r + s121r;
		s142i = s105i + s121i;
		s143r = s109r + s128r;
		s143i = s109i + s128i;
		s144r = s114r + s128r;
		s144i = s114i + s128i;
		s145r = s110r + s131r;
		s145i = s110i + s131i;
		s146r = s117r + s131r;
		s146i = s117i + s131i;
		r536 = s112r - s141r;
		i536 = s112i - s141i;
		r535 = s122r + s141r;
		i535 = s122i + s141i;
		r538 = s111r + s142r;
		i538 = s111i + s142i;
		s147r = s123r + s142r;
		s147i = s123i + s142i;
		r498 = s124r + s143r;
		i498 = s124i + s143i;
		r526 = s129r + s143r;
		i526 = s129i + s143i;
		s148r = s125r + s144r;
		s148i = s125i + s144i;
		r524 = s130r - s144r;
		i524 = s130i - s144i;
		r534 = s126r + s145r;
		i534 = s126i + s145i;
		r537 = s132r - s145r;
		i537 = s132i - s145i;
		s149r = s127r + s146r;
		s149i = s127i + s146i;
		r531 = s133r + s146r;
		i531 = s133i + s146i;
		s150r = s139r - r535;
		s150i = s139i - i535;
		s151r = s140r + s147r;
		s151i = s140i + s147i;
		s152r = r498 - r534;
		s152i = i498 - i534;
		s153r = s136r + r536 + r537 - r526;
		s153i = s136i + i536 + i537 - i526;
		r553 = s138r + s148r + s149r - s147r;
		i553 = s138i + s148i + s149i - s147i;
		s154r = s149r - s148r;
		s154i = s149i - s148i;
		s155r = s137r + r538 + r524 - r531;
		s155i = s137i + i538 + i524 - i531;
		s156r = s152r - s134r;
		s156i = s152i - s134i;
		s157r = s150r + s152r;
		s157i = s150i + s152i;
		r612 = s153r - s100r;
		i612 = s153i - s100i;
		s158r = s135r + s154r;
		s158i = s135i + s154i;
		s159r = s154r - s151r;
		s159i = s154i - s151i;
		r616 = s155r - s100r;
		i616 = s155i - s100i;
		s160r = s134r + s135r + s150r + s151r + s153r + s155r;
		s160i = s134i + s135i + s150i + s151i + s153i + s155i;
		r610 = s100r + s156r;
		i610 = s100i + s156i;
		r608 = s157r - s100r;
		i608 = s157i - s100i;
		r607 = s158r - s100r;
		i607 = s158i - s100i;
		s161r = s100r + s159r;
		s161i = s100i + s159i;
		r609 = s100r + s160r;
		i609 = s100i + s160i;
		pReal[28 * stride] = r618 - s161r;
		pImag[28 * stride] = i618 - s161i;
		pReal[1 * stride] = r618 + s161r;
		pImag[1 * stride] = i618 + s161i;
	}
	{
		valueT s1r, s1i;
		s1r = r599 - r595;
		s1i = i599 - i595;
		r625 = r599 + r595;
		i625 = i599 + i595;
		pReal[22 * stride] = s1r - r609;
		pImag[22 * stride] = s1i - i609;
		pReal[7 * stride] = r609 + s1r;
		pImag[7 * stride] = i609 + s1i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i;
		s1r = valueT(1.149537168597195368) * i321;
		s1i = valueT(-1.149537168597195368) * r321;
		s2r = r341 + r426;
		s2i = i341 + i426;
		s3r = r342 + s1r;
		s3i = i342 + s1i;
		s4r = r334 + s1r;
		s4i = i334 + s1i;
		s5r = r343 + r413;
		s5i = i343 + i413;
		s6r = r487 + s3r;
		s6i = i487 + s3i;
		s7r = r482 + s4r;
		s7i = i482 + s4i;
		s8r = s5r - r492;
		s8i = s5i - i492;
		s9r = r488 + s2r;
		s9i = i488 + s2i;
		s10r = r536 + s9r;
		s10i = i536 + s9i;
		s11r = r501 + r538;
		s11i = i501 + i538;
		s12r = r535 + r498 + r534 + s8r;
		s12i = i535 + i498 + i534 + s8i;
		s13r = r526 + r537;
		s13i = i526 + i537;
		s14r = r524 + r531;
		s14i = i524 + i531;
		r615 = s12r - r575;
		i615 = s12i - i575;
		s15r = s6r - s13r;
		s15i = s6i - s13i;
		s16r = s10r + s13r;
		s16i = s10i + s13i;
		r617 = r553 - r575;
		i617 = i553 - i575;
		s17r = s7r + s14r;
		s17i = s7i + s14i;
		s18r = s11r - s14r;
		s18i = s11i - s14i;
		r614 = s15r - r575;
		i614 = s15i - i575;
		r613 = s16r - r575;
		i613 = s16i - i575;
		s19r = s17r - r575;
		s19i = s17i - i575;
		r611 = s18r - r575;
		i611 = s18i - i575;
		r605 = r575 + r553 + s12r + s15r + s16r + s17r + s18r;
		i605 = i575 + i553 + s12i + s15i + s16i + s17i + s18i;
		pReal[3 * stride] = r625 - s19r;
		pImag[3 * stride] = i625 - s19i;
		pReal[26 * stride] = r625 + s19r;
		pImag[26 * stride] = i625 + s19i;
	}
	{
		valueT s1r, s1i;
		r620 = r590 - r601;
		i620 = i590 - i601;
		s1r = r601 + r590;
		s1i = i601 + i590;
		pReal[15 * stride] = -r605 - s1r;
		pImag[15 * stride] = -i605 - s1i;
		pReal[14 * stride] = r605 - s1r;
		pImag[14 * stride] = i605 - s1i;
	}
	pReal[23 * stride] = r620 - r608;
	pImag[23 * stride] = i620 - i608;
	pReal[6 * stride] = r608 + r620;
	pImag[6 * stride] = i608 + i620;
	{
		valueT s1r, s1i;
		r624 = r594 - r593;
		i624 = i594 - i593;
		s1r = r594 + r593;
		s1i = i594 + i593;
		pReal[21 * stride] = s1r - r611;
		pImag[21 * stride] = s1i - i611;
		pReal[8 * stride] = r611 + s1r;
		pImag[8 * stride] = i611 + s1i;
	}
	pReal[20 * stride] = r624 - r612;
	pImag[20 * stride] = i624 - i612;
	pReal[9 * stride] = r612 + r624;
	pImag[9 * stride] = i612 + i624;
	{
		valueT s1r, s1i;
		r622 = r592 - r598;
		i622 = i592 - i598;
		s1r = r598 + r592;
		s1i = i598 + i592;
		pReal[19 * stride] = s1r - r613;
		pImag[19 * stride] = s1i - i613;
		pReal[10 * stride] = r613 + s1r;
		pImag[10 * stride] = i613 + s1i;
	}
	pReal[25 * stride] = -r607 - r622;
	pImag[25 * stride] = -i607 - i622;
	pReal[4 * stride] = r607 - r622;
	pImag[4 * stride] = i607 - i622;
	{
		valueT s1r, s1i;
		r619 = r589 - r596;
		i619 = i589 - i596;
		s1r = r596 + r589;
		s1i = i596 + i589;
		pReal[11 * stride] = s1r - r614;
		pImag[11 * stride] = s1i - i614;
		pReal[18 * stride] = r614 + s1r;
		pImag[18 * stride] = i614 + s1i;
	}
	pReal[16 * stride] = -r616 - r619;
	pImag[16 * stride] = -i616 - i619;
	pReal[13 * stride] = r616 - r619;
	pImag[13 * stride] = i616 - i619;
	{
		valueT s1r, s1i;
		r627 = r597 - r600;
		i627 = i597 - i600;
		s1r = r600 + r597;
		s1i = i600 + i597;
		pReal[2 * stride] = s1r - r617;
		pImag[2 * stride] = s1i - i617;
		pReal[27 * stride] = r617 + s1r;
		pImag[27 * stride] = i617 + s1i;
	}
	pReal[5 * stride] = -r610 - r627;
	pImag[5 * stride] = -i610 - i627;
	pReal[24 * stride] = r610 - r627;
	pImag[24 * stride] = i610 - i627;
	pReal[17 * stride] = r621 - r615;
	pImag[17 * stride] = i621 - i615;
	pReal[12 * stride] = r621 + r615;
	pImag[12 * stride] = i621 + i615;
}

template<> void StandardModule<float, 29>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 29>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
