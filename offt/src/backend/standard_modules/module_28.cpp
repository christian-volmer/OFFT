
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
	valueT t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
	valueT t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
	valueT t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
	valueT t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	valueT t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	valueT t60, t61, t62, t63, t64, t65, t66, t67, t68, t69;
	valueT t70, t71, t72, t73, t74, t75;

	phasors.Multiply(t0, t1, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t2, t3, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t4, t5, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t6, t7, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t8, t9, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t10, t11, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t12, t13, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t14, t15, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t16, t17, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t18, t19, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t20, t21, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t22, t23, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t24, t25, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t26, t27, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t28, t29, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t30, t31, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t32, t33, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t34, t35, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t36, t37, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
	phasors.Multiply(t38, t39, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
	phasors.Multiply(t40, t41, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
	phasors.Multiply(t42, t43, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
	phasors.Multiply(t44, t45, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
	phasors.Multiply(t46, t47, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
	phasors.Multiply(t48, t49, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);
	phasors.Multiply(t50, t51, pReal[25 * stride], pImag[25 * stride], twiddleStart + 25 * twiddleIncrement);
	phasors.Multiply(t52, t53, pReal[26 * stride], pImag[26 * stride], twiddleStart + 26 * twiddleIncrement);
	phasors.Multiply(t54, t55, pReal[27 * stride], pImag[27 * stride], twiddleStart + 27 * twiddleIncrement);

	t56 = t0 - t28;
	t57 = t1 - t29;
	t0 += t28;
	t1 += t29;
	t28 = t2 - t30;
	t29 = t3 - t31;
	t2 += t30;
	t3 += t31;
	t30 = t4 - t32;
	t31 = t5 - t33;
	t4 += t32;
	t5 += t33;
	t32 = t6 - t34;
	t33 = t7 - t35;
	t6 += t34;
	t7 += t35;
	t34 = t8 - t36;
	t35 = t9 - t37;
	t8 += t36;
	t9 += t37;
	t36 = t10 - t38;
	t37 = t11 - t39;
	t10 += t38;
	t11 += t39;
	t38 = t12 - t40;
	t39 = t13 - t41;
	t12 += t40;
	t13 += t41;
	t40 = t14 - t42;
	t41 = t15 - t43;
	t14 += t42;
	t15 += t43;
	t42 = t16 - t44;
	t43 = t17 - t45;
	t16 += t44;
	t17 += t45;
	t44 = t18 - t46;
	t45 = t19 - t47;
	t18 += t46;
	t19 += t47;
	t46 = t20 - t48;
	t47 = t21 - t49;
	t20 += t48;
	t21 += t49;
	t48 = t22 - t50;
	t49 = t23 - t51;
	t22 += t50;
	t23 += t51;
	t50 = t24 - t52;
	t51 = t25 - t53;
	t24 += t52;
	t25 += t53;
	t52 = t26 - t54;
	t53 = t27 - t55;
	t26 += t54;
	t27 += t55;
	t54 = t28 - t52;
	t55 = t29 - t53;
	t28 += t52;
	t29 += t53;
	t52 = t2 - t26;
	t53 = t3 - t27;
	t2 += t26;
	t3 += t27;
	t26 = t30 - t50;
	t27 = t31 - t51;
	t30 += t50;
	t31 += t51;
	t50 = t4 - t24;
	t51 = t5 - t25;
	t4 += t24;
	t5 += t25;
	t24 = t32 - t48;
	t25 = t33 - t49;
	t32 += t48;
	t33 += t49;
	t48 = t6 - t22;
	t49 = t7 - t23;
	t6 += t22;
	t7 += t23;
	t22 = t34 - t46;
	t23 = t35 - t47;
	t34 += t46;
	t35 += t47;
	t46 = t8 - t20;
	t47 = t9 - t21;
	t8 += t20;
	t9 += t21;
	t20 = t36 - t44;
	t21 = t37 - t45;
	t36 += t44;
	t37 += t45;
	t44 = t10 - t18;
	t45 = t11 - t19;
	t10 += t18;
	t11 += t19;
	t18 = t38 - t42;
	t19 = t39 - t43;
	t38 += t42;
	t39 += t43;
	t42 = t12 - t16;
	t43 = t13 - t17;
	t12 += t16;
	t13 += t17;
	t16 = t54 - t24;
	t17 = t55 - t25;
	t24 = t54 + t24 - t20;
	t25 = t55 + t25 - t21;
	t54 += t20;
	t55 += t21;
	t20 = t28 + t32;
	t21 = t29 + t33;
	t58 = t28 - t32 + t36;
	t59 = t29 - t33 + t37;
	t28 -= t36;
	t29 -= t37;
	t60 = t52 + t48;
	t61 = t53 + t49;
	t48 = t52 - t48 - t44;
	t49 = t53 - t49 - t45;
	t52 += t44;
	t53 += t45;
	t44 = t2 - t6;
	t45 = t3 - t7;
	t62 = t2 + t6 + t10;
	t63 = t3 + t7 + t11;
	t2 -= t10;
	t3 -= t11;
	t64 = t26 + t22;
	t65 = t27 + t23;
	t66 = t26 - t22 + t18;
	t67 = t27 - t23 + t19;
	t26 -= t18;
	t27 -= t19;
	t68 = t30 - t34 - t38;
	t69 = t31 - t35 - t39;
	t30 += t38;
	t31 += t39;
	t70 = t50 + t46 - t42;
	t71 = t51 + t47 - t43;
	t50 += t42;
	t51 += t43;
	t72 = t4 - t8;
	t73 = t5 - t9;
	t74 = t4 + t8 + t12;
	t75 = t5 + t9 + t13;
	t4 -= t12;
	t5 -= t13;
	t32 += t36;
	t33 += t37;
	t6 -= t10;
	t7 -= t11;
	t22 += t18;
	t23 += t19;
	t34 -= t38;
	t35 -= t39;
	t46 += t42;
	t47 += t43;
	t8 -= t12;
	t9 -= t13;
	t56 -= t66;
	t57 -= t67;
	t0 += t74;
	t1 += t75;
	t10 = t16 + t54;
	t11 = t17 + t55;
	t40 = t58 - t40;
	t41 = t59 - t41;
	t12 = t60 + t52;
	t13 = t61 + t53;
	t14 = t62 + t14;
	t15 = t63 + t15;
	t18 = t30 - t34;
	t19 = t31 - t35;
	t36 = t50 + t46;
	t37 = t51 + t47;
	t16 *= valueT(1.2157152215855879292);
	t17 *= valueT(1.2157152215855879292);
	t10 *= valueT(0.87484229096165655223);
	t11 *= valueT(0.87484229096165655223);
	t24 *= valueT(0.44095855184409843175);
	t25 *= valueT(0.44095855184409843175);
	t54 *= valueT(1.4088116512993817275);
	t55 *= valueT(1.4088116512993817275);
	t21 *= valueT(0.055854267289647737622);
	t20 *= valueT(0.055854267289647737622);
	t59 *= valueT(1.1666666666666666667);
	t58 *= valueT(1.1666666666666666667);
	t29 *= valueT(0.79015646852540019719);
	t28 *= valueT(0.79015646852540019719);
	t61 *= valueT(1.2157152215855879292);
	t60 *= valueT(1.2157152215855879292);
	t13 *= valueT(0.87484229096165655223);
	t12 *= valueT(0.87484229096165655223);
	t49 *= valueT(0.44095855184409843175);
	t48 *= valueT(0.44095855184409843175);
	t53 *= valueT(1.4088116512993817275);
	t52 *= valueT(1.4088116512993817275);
	t44 *= valueT(0.055854267289647737622);
	t45 *= valueT(0.055854267289647737622);
	t62 *= valueT(1.1666666666666666667);
	t63 *= valueT(1.1666666666666666667);
	t2 *= valueT(0.79015646852540019719);
	t3 *= valueT(0.79015646852540019719);
	t64 *= valueT(0.73430220123575245957);
	t65 *= valueT(0.73430220123575245957);
	t66 *= valueT(1.1666666666666666667);
	t67 *= valueT(1.1666666666666666667);
	t26 *= valueT(0.79015646852540019719);
	t27 *= valueT(0.79015646852540019719);
	t69 *= valueT(0.44095855184409843175);
	t68 *= valueT(0.44095855184409843175);
	t31 *= valueT(1.4088116512993817275);
	t30 *= valueT(1.4088116512993817275);
	t19 *= valueT(0.87484229096165655223);
	t18 *= valueT(0.87484229096165655223);
	t71 *= valueT(0.44095855184409843175);
	t70 *= valueT(0.44095855184409843175);
	t51 *= valueT(1.4088116512993817275);
	t50 *= valueT(1.4088116512993817275);
	t37 *= valueT(0.87484229096165655223);
	t36 *= valueT(0.87484229096165655223);
	t72 *= valueT(0.73430220123575245957);
	t73 *= valueT(0.73430220123575245957);
	t74 *= valueT(1.1666666666666666667);
	t75 *= valueT(1.1666666666666666667);
	t4 *= valueT(0.79015646852540019719);
	t5 *= valueT(0.79015646852540019719);
	t33 *= valueT(0.73430220123575245957);
	t32 *= valueT(0.73430220123575245957);
	t6 *= valueT(0.73430220123575245957);
	t7 *= valueT(0.73430220123575245957);
	t22 *= valueT(0.055854267289647737622);
	t23 *= valueT(0.055854267289647737622);
	t35 *= valueT(1.2157152215855879292);
	t34 *= valueT(1.2157152215855879292);
	t47 *= valueT(1.2157152215855879292);
	t46 *= valueT(1.2157152215855879292);
	t8 *= valueT(0.055854267289647737622);
	t9 *= valueT(0.055854267289647737622);
	t66 = t56 + t66;
	t67 = t57 + t67;
	t74 = t0 - t74;
	t75 = t1 - t75;
	t16 -= t10;
	t17 -= t11;
	t10 -= t54;
	t11 -= t55;
	t59 -= t41;
	t58 -= t40;
	t61 -= t13;
	t60 -= t12;
	t13 -= t53;
	t12 -= t52;
	t62 -= t14;
	t63 -= t15;
	t31 -= t19;
	t30 -= t18;
	t19 += t35;
	t18 += t34;
	t51 -= t37;
	t50 -= t36;
	t37 -= t47;
	t36 -= t46;
	t34 = t66 - t64 + t26;
	t35 = t67 - t65 + t27;
	t64 = t66 + t64 + t22;
	t65 = t67 + t65 + t23;
	t66 -= t26 + t22;
	t67 -= t27 + t23;
	t22 = t74 + t72 - t4;
	t23 = t75 + t73 - t5;
	t72 = t74 - t72 + t8;
	t73 = t75 - t73 + t9;
	t74 += t4 - t8;
	t75 += t5 - t9;
	t4 = t16 - t10 + t24;
	t5 = t17 - t11 + t25;
	t16 -= t24;
	t17 -= t25;
	t10 += t24;
	t11 += t25;
	t8 = t21 - t59 - t29;
	t9 = t20 - t58 - t28;
	t21 += t59 + t33;
	t20 += t58 + t32;
	t59 -= t29 + t33;
	t58 -= t28 + t32;
	t24 = t61 - t13 + t49;
	t25 = t60 - t12 + t48;
	t61 -= t49;
	t60 -= t48;
	t13 += t49;
	t12 += t48;
	t26 = t44 - t62 - t2;
	t27 = t45 - t63 - t3;
	t44 += t62 - t6;
	t45 += t63 - t7;
	t62 -= t2 - t6;
	t63 -= t3 - t7;
	t2 = t69 + t31;
	t3 = t68 + t30;
	t31 = t69 - t31 + t19;
	t30 = t68 - t30 + t18;
	t69 -= t19;
	t68 -= t18;
	t6 = t71 + t51;
	t7 = t70 + t50;
	t51 = t71 - t51 + t37;
	t50 = t70 - t50 + t36;
	t71 -= t37;
	t70 -= t36;
	t18 = t34 - t2;
	t19 = t35 + t3;
	t34 += t2;
	t35 -= t3;
	t2 = t64 + t69;
	t3 = t65 - t68;
	t64 -= t69;
	t65 += t68;
	t28 = t66 + t31;
	t29 = t67 - t30;
	t66 -= t31;
	t67 += t30;
	t30 = t22 + t6;
	t31 = t23 - t7;
	t22 -= t6;
	t23 += t7;
	t6 = t72 - t71;
	t7 = t73 + t70;
	t72 += t71;
	t73 -= t70;
	t32 = t74 - t51;
	t33 = t75 + t50;
	t74 += t51;
	t75 -= t50;
	t36 = t4 + t8;
	t37 = t5 - t9;
	t4 -= t8;
	t5 += t9;
	t8 = t16 + t21;
	t9 = t17 - t20;
	t16 -= t21;
	t17 += t20;
	t20 = t10 + t59;
	t21 = t11 - t58;
	t10 -= t59;
	t11 += t58;
	t38 = t24 - t26;
	t39 = t25 + t27;
	t24 += t26;
	t25 -= t27;
	t26 = t61 - t44;
	t27 = t60 + t45;
	t61 += t44;
	t60 -= t45;
	t42 = t13 - t62;
	t43 = t12 + t63;
	t13 += t62;
	t12 -= t63;
	pReal[0 * stride] = t0 + t14;
	pImag[0 * stride] = t1 + t15;
	pReal[1 * stride] = t2 - t8;
	pImag[1 * stride] = t3 - t9;
	pReal[2 * stride] = t32 + t38;
	pImag[2 * stride] = t33 - t39;
	pReal[3 * stride] = t18 + t20;
	pImag[3 * stride] = t19 + t21;
	pReal[4 * stride] = t22 - t13;
	pImag[4 * stride] = t23 + t12;
	pReal[5 * stride] = t66 - t4;
	pImag[5 * stride] = t67 - t5;
	pReal[6 * stride] = t72 + t61;
	pImag[6 * stride] = t73 - t60;
	pReal[7 * stride] = t56 - t41;
	pImag[7 * stride] = t57 + t40;
	pReal[8 * stride] = t6 + t26;
	pImag[8 * stride] = t7 - t27;
	pReal[9 * stride] = t28 + t36;
	pImag[9 * stride] = t29 + t37;
	pReal[10 * stride] = t30 - t42;
	pImag[10 * stride] = t31 + t43;
	pReal[11 * stride] = t34 - t10;
	pImag[11 * stride] = t35 - t11;
	pReal[12 * stride] = t74 + t24;
	pImag[12 * stride] = t75 - t25;
	pReal[13 * stride] = t64 + t16;
	pImag[13 * stride] = t65 + t17;
	pReal[14 * stride] = t0 - t14;
	pImag[14 * stride] = t1 - t15;
	pReal[15 * stride] = t2 + t8;
	pImag[15 * stride] = t3 + t9;
	pReal[16 * stride] = t32 - t38;
	pImag[16 * stride] = t33 + t39;
	pReal[17 * stride] = t18 - t20;
	pImag[17 * stride] = t19 - t21;
	pReal[18 * stride] = t22 + t13;
	pImag[18 * stride] = t23 - t12;
	pReal[19 * stride] = t66 + t4;
	pImag[19 * stride] = t67 + t5;
	pReal[20 * stride] = t72 - t61;
	pImag[20 * stride] = t73 + t60;
	pReal[21 * stride] = t56 + t41;
	pImag[21 * stride] = t57 - t40;
	pReal[22 * stride] = t6 - t26;
	pImag[22 * stride] = t7 + t27;
	pReal[23 * stride] = t28 - t36;
	pImag[23 * stride] = t29 - t37;
	pReal[24 * stride] = t30 + t42;
	pImag[24 * stride] = t31 - t43;
	pReal[25 * stride] = t34 + t10;
	pImag[25 * stride] = t35 + t11;
	pReal[26 * stride] = t74 - t24;
	pImag[26 * stride] = t75 + t25;
	pReal[27 * stride] = t64 - t16;
	pImag[27 * stride] = t65 - t17;
}

template<> void StandardModule<float, 28>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 28>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
