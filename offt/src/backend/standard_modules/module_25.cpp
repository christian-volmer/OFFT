
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

/*
	Number of additions       : 372
	Number of multiplications : 164
*/

template<> StandardModuleComplexity const StandardModule<float, 25>::Complexity = { 372, 164 };
template<> StandardModuleComplexity const StandardModule<double, 25>::Complexity = { 372, 164 };

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
	valueT t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
	valueT t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
	valueT t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
	valueT t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	valueT t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	valueT t60, t61;

	phasors.Multiply(t0, t1, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t2, t3, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t4, t5, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t6, t7, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t8, t9, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t10, t11, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t12, t13, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t14, t15, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t16, t17, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t18, t19, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t20, t21, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t22, t23, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t24, t25, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t26, t27, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t28, t29, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t30, t31, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t32, t33, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t34, t35, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t36, t37, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
	phasors.Multiply(t38, t39, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
	phasors.Multiply(t40, t41, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
	phasors.Multiply(t42, t43, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
	phasors.Multiply(t44, t45, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
	phasors.Multiply(t46, t47, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
	phasors.Multiply(t48, t49, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);

	t50 = t10 - t40;
	t51 = t11 - t41;
	t10 += t40;
	t11 += t41;
	t40 = t12 - t42;
	t41 = t13 - t43;
	t12 += t42;
	t13 += t43;
	t42 = t14 - t44;
	t43 = t15 - t45;
	t14 += t44;
	t15 += t45;
	t44 = t16 - t46;
	t45 = t17 - t47;
	t16 += t46;
	t17 += t47;
	t46 = t18 - t48;
	t47 = t19 - t49;
	t18 += t48;
	t19 += t49;
	t48 = t20 - t30;
	t49 = t21 - t31;
	t20 += t30;
	t21 += t31;
	t30 = t22 - t32;
	t31 = t23 - t33;
	t22 += t32;
	t23 += t33;
	t32 = t24 - t34;
	t33 = t25 - t35;
	t24 += t34;
	t25 += t35;
	t34 = t26 - t36;
	t35 = t27 - t37;
	t26 += t36;
	t27 += t37;
	t36 = t28 - t38;
	t37 = t29 - t39;
	t28 += t38;
	t29 += t39;
	t38 = t50 - t48;
	t39 = t51 - t49;
	t52 = t10 - t20;
	t53 = t11 - t21;
	t10 += t20;
	t11 += t21;
	t20 = t40 - t30;
	t21 = t41 - t31;
	t54 = t12 - t22;
	t55 = t13 - t23;
	t12 += t22;
	t13 += t23;
	t22 = t42 - t32;
	t23 = t43 - t33;
	t56 = t14 - t24;
	t57 = t15 - t25;
	t14 += t24;
	t15 += t25;
	t24 = t44 - t34;
	t25 = t45 - t35;
	t58 = t16 - t26;
	t59 = t17 - t27;
	t16 += t26;
	t17 += t27;
	t26 = t46 - t36;
	t27 = t47 - t37;
	t60 = t18 - t28;
	t61 = t19 - t29;
	t18 += t28;
	t19 += t29;
	t0 += t10;
	t1 += t11;
	t2 += t12;
	t3 += t13;
	t4 += t14;
	t5 += t15;
	t6 += t16;
	t7 += t17;
	t8 += t18;
	t9 += t19;
	t51 *= valueT(1.5388417685876267013);
	t50 *= valueT(1.5388417685876267013);
	t39 *= valueT(0.58778525229247312917);
	t38 *= valueT(0.58778525229247312917);
	t52 *= valueT(0.5590169943749474241);
	t53 *= valueT(0.5590169943749474241);
	t10 *= valueT(1.25);
	t11 *= valueT(1.25);
	t41 *= valueT(1.5388417685876267013);
	t40 *= valueT(1.5388417685876267013);
	t21 *= valueT(0.58778525229247312917);
	t20 *= valueT(0.58778525229247312917);
	t54 *= valueT(0.5590169943749474241);
	t55 *= valueT(0.5590169943749474241);
	t12 *= valueT(1.25);
	t13 *= valueT(1.25);
	t43 *= valueT(1.5388417685876267013);
	t42 *= valueT(1.5388417685876267013);
	t23 *= valueT(0.58778525229247312917);
	t22 *= valueT(0.58778525229247312917);
	t56 *= valueT(0.5590169943749474241);
	t57 *= valueT(0.5590169943749474241);
	t14 *= valueT(1.25);
	t15 *= valueT(1.25);
	t45 *= valueT(1.5388417685876267013);
	t44 *= valueT(1.5388417685876267013);
	t25 *= valueT(0.58778525229247312917);
	t24 *= valueT(0.58778525229247312917);
	t58 *= valueT(0.5590169943749474241);
	t59 *= valueT(0.5590169943749474241);
	t16 *= valueT(1.25);
	t17 *= valueT(1.25);
	t47 *= valueT(1.5388417685876267013);
	t46 *= valueT(1.5388417685876267013);
	t27 *= valueT(0.58778525229247312917);
	t26 *= valueT(0.58778525229247312917);
	t60 *= valueT(0.5590169943749474241);
	t61 *= valueT(0.5590169943749474241);
	t18 *= valueT(1.25);
	t19 *= valueT(1.25);
	t49 *= valueT(0.36327126400268044295);
	t48 *= valueT(0.36327126400268044295);
	t31 *= valueT(0.36327126400268044295);
	t30 *= valueT(0.36327126400268044295);
	t33 *= valueT(0.36327126400268044295);
	t32 *= valueT(0.36327126400268044295);
	t35 *= valueT(0.36327126400268044295);
	t34 *= valueT(0.36327126400268044295);
	t37 *= valueT(0.36327126400268044295);
	t36 *= valueT(0.36327126400268044295);
	t10 = t0 - t10;
	t11 = t1 - t11;
	t12 = t2 - t12;
	t13 = t3 - t13;
	t14 = t4 - t14;
	t15 = t5 - t15;
	t16 = t6 - t16;
	t17 = t7 - t17;
	t18 = t8 - t18;
	t19 = t9 - t19;
	t28 = t10 - t52;
	t29 = t11 - t53;
	t10 += t52;
	t11 += t53;
	t52 = t12 - t54;
	t53 = t13 - t55;
	t12 += t54;
	t13 += t55;
	t54 = t14 - t56;
	t55 = t15 - t57;
	t14 += t56;
	t15 += t57;
	t56 = t16 - t58;
	t57 = t17 - t59;
	t16 += t58;
	t17 += t59;
	t58 = t18 - t60;
	t59 = t19 - t61;
	t18 += t60;
	t19 += t61;
	t51 -= t39;
	t50 -= t38;
	t39 -= t49;
	t38 -= t48;
	t41 -= t21;
	t40 -= t20;
	t21 -= t31;
	t20 -= t30;
	t43 -= t23;
	t42 -= t22;
	t23 -= t33;
	t22 -= t32;
	t45 -= t25;
	t44 -= t24;
	t25 -= t35;
	t24 -= t34;
	t47 -= t27;
	t46 -= t26;
	t27 -= t37;
	t26 -= t36;
	t30 = t28 - t39;
	t31 = t29 + t38;
	t28 += t39;
	t29 -= t38;
	t32 = t10 + t51;
	t33 = t11 - t50;
	t10 -= t51;
	t11 += t50;
	t34 = t52 - t21;
	t35 = t53 + t20;
	t52 += t21;
	t53 -= t20;
	t20 = t12 + t41;
	t21 = t13 - t40;
	t12 -= t41;
	t13 += t40;
	t36 = t54 - t23;
	t37 = t55 + t22;
	t54 += t23;
	t55 -= t22;
	t22 = t14 + t43;
	t23 = t15 - t42;
	t14 -= t43;
	t15 += t42;
	t38 = t56 - t25;
	t39 = t57 + t24;
	t56 += t25;
	t57 -= t24;
	t24 = t16 + t45;
	t25 = t17 - t44;
	t16 -= t45;
	t17 += t44;
	t40 = t58 - t27;
	t41 = t59 + t26;
	t58 += t27;
	t59 -= t26;
	t26 = t18 + t47;
	t27 = t19 - t46;
	t18 -= t47;
	t19 += t46;
	t42 = valueT(0.87630668004386358731) * t34 - valueT(0.48175367410171527499) * t35;
	t34 = valueT(0.48175367410171527499) * t34 + valueT(0.87630668004386358731) * t35;
	t35 = valueT(0.72896862742141152315) * t52 - valueT(0.68454710592868867373) * t53;
	t52 = valueT(0.68454710592868867373) * t52 + valueT(0.72896862742141152315) * t53;
	t43 = valueT(0.53582679497899661827) * t20 - valueT(0.84432792550201507855) * t21;
	t20 = valueT(0.84432792550201507855) * t20 + valueT(0.53582679497899661827) * t21;
	t21 = valueT(0.96858316112863111949) * t12 - valueT(0.24868988716485478824) * t13;
	t12 = valueT(0.24868988716485478824) * t12 + valueT(0.96858316112863111949) * t13;
	t13 = valueT(0.53582679497899661827) * t36 - valueT(0.84432792550201507855) * t37;
	t36 = valueT(0.84432792550201507855) * t36 + valueT(0.53582679497899661827) * t37;
	t37 = valueT(0.062790519529313376076) * t54 - valueT(0.99802672842827156195) * t55;
	t54 = valueT(0.99802672842827156195) * t54 + valueT(0.062790519529313376076) * t55;
	t44 = valueT(0.42577929156507264886) * t22 + valueT(0.90482705246601952771) * t23;
	t22 = valueT(0.90482705246601952771) * t22 - valueT(0.42577929156507264886) * t23;
	t23 = valueT(0.87630668004386358731) * t14 - valueT(0.48175367410171527499) * t15;
	t14 = valueT(0.48175367410171527499) * t14 + valueT(0.87630668004386358731) * t15;
	t15 = valueT(0.062790519529313376076) * t38 - valueT(0.99802672842827156195) * t39;
	t38 = valueT(0.99802672842827156195) * t38 + valueT(0.062790519529313376076) * t39;
	t39 = valueT(0.63742398974868971018) * t56 + valueT(0.7705132427757892308) * t57;
	t56 = valueT(0.7705132427757892308) * t56 - valueT(0.63742398974868971018) * t57;
	t45 = valueT(0.99211470131447783105) * t24 + valueT(0.12533323356430424537) * t25;
	t24 = valueT(0.12533323356430424537) * t24 - valueT(0.99211470131447783105) * t25;
	t25 = valueT(0.72896862742141152315) * t16 - valueT(0.68454710592868867373) * t17;
	t16 = valueT(0.68454710592868867373) * t16 + valueT(0.72896862742141152315) * t17;
	t17 = valueT(0.42577929156507264886) * t40 + valueT(0.90482705246601952771) * t41;
	t40 = valueT(0.90482705246601952771) * t40 - valueT(0.42577929156507264886) * t41;
	t41 = valueT(0.99211470131447783105) * t58 + valueT(0.12533323356430424537) * t59;
	t58 = valueT(0.12533323356430424537) * t58 - valueT(0.99211470131447783105) * t59;
	t46 = valueT(0.63742398974868971018) * t26 - valueT(0.7705132427757892308) * t27;
	t26 = valueT(0.7705132427757892308) * t26 + valueT(0.63742398974868971018) * t27;
	t27 = valueT(0.53582679497899661827) * t18 - valueT(0.84432792550201507855) * t19;
	t18 = valueT(0.84432792550201507855) * t18 + valueT(0.53582679497899661827) * t19;
	t19 = t2 - t8;
	t47 = t3 - t9;
	t2 += t8;
	t3 += t9;
	t8 = t42 + t17;
	t9 = t34 - t40;
	t42 -= t17;
	t34 += t40;
	t17 = t35 + t41;
	t40 = t52 - t58;
	t35 -= t41;
	t52 += t58;
	t41 = t43 + t46;
	t48 = t20 + t26;
	t43 -= t46;
	t20 -= t26;
	t26 = t21 - t27;
	t46 = t12 - t18;
	t21 += t27;
	t12 += t18;
	t18 = t4 - t6;
	t27 = t5 - t7;
	t4 += t6;
	t5 += t7;
	t6 = t13 - t15;
	t7 = t36 - t38;
	t13 += t15;
	t36 += t38;
	t15 = t37 + t39;
	t38 = t54 - t56;
	t37 -= t39;
	t54 += t56;
	t39 = t44 - t45;
	t49 = t22 - t24;
	t44 += t45;
	t22 += t24;
	t24 = t23 - t25;
	t45 = t14 - t16;
	t23 += t25;
	t14 += t16;
	t16 = t19 - t18;
	t25 = t47 - t27;
	t50 = t2 - t4;
	t51 = t3 - t5;
	t2 += t4;
	t3 += t5;
	t4 = t8 - t6;
	t5 = t9 - t7;
	t53 = t42 - t13;
	t55 = t34 - t36;
	t42 += t13;
	t34 += t36;
	t13 = t17 - t15;
	t36 = t40 - t38;
	t56 = t35 - t37;
	t57 = t52 - t54;
	t35 += t37;
	t52 += t54;
	t37 = t41 + t39;
	t54 = t48 - t49;
	t58 = t43 + t44;
	t59 = t20 - t22;
	t43 -= t44;
	t20 += t22;
	t22 = t26 - t24;
	t44 = t46 - t45;
	t60 = t21 - t23;
	t61 = t12 - t14;
	t21 += t23;
	t12 += t14;
	t0 += t2;
	t1 += t3;
	t30 += t42;
	t31 += t34;
	t28 += t35;
	t29 += t52;
	t32 += t43;
	t33 += t20;
	t10 += t21;
	t11 += t12;
	t47 *= valueT(1.5388417685876267013);
	t19 *= valueT(1.5388417685876267013);
	t25 *= valueT(0.58778525229247312917);
	t16 *= valueT(0.58778525229247312917);
	t50 *= valueT(0.5590169943749474241);
	t51 *= valueT(0.5590169943749474241);
	t2 *= valueT(1.25);
	t3 *= valueT(1.25);
	t9 *= valueT(1.5388417685876267013);
	t8 *= valueT(1.5388417685876267013);
	t5 *= valueT(0.58778525229247312917);
	t4 *= valueT(0.58778525229247312917);
	t53 *= valueT(0.5590169943749474241);
	t55 *= valueT(0.5590169943749474241);
	t42 *= valueT(1.25);
	t34 *= valueT(1.25);
	t40 *= valueT(1.5388417685876267013);
	t17 *= valueT(1.5388417685876267013);
	t36 *= valueT(0.58778525229247312917);
	t13 *= valueT(0.58778525229247312917);
	t56 *= valueT(0.5590169943749474241);
	t57 *= valueT(0.5590169943749474241);
	t35 *= valueT(1.25);
	t52 *= valueT(1.25);
	t48 *= valueT(1.5388417685876267013);
	t41 *= valueT(1.5388417685876267013);
	t54 *= valueT(0.58778525229247312917);
	t37 *= valueT(0.58778525229247312917);
	t58 *= valueT(0.5590169943749474241);
	t59 *= valueT(0.5590169943749474241);
	t43 *= valueT(1.25);
	t20 *= valueT(1.25);
	t46 *= valueT(1.5388417685876267013);
	t26 *= valueT(1.5388417685876267013);
	t44 *= valueT(0.58778525229247312917);
	t22 *= valueT(0.58778525229247312917);
	t60 *= valueT(0.5590169943749474241);
	t61 *= valueT(0.5590169943749474241);
	t21 *= valueT(1.25);
	t12 *= valueT(1.25);
	t27 *= valueT(0.36327126400268044295);
	t18 *= valueT(0.36327126400268044295);
	t7 *= valueT(0.36327126400268044295);
	t6 *= valueT(0.36327126400268044295);
	t38 *= valueT(0.36327126400268044295);
	t15 *= valueT(0.36327126400268044295);
	t49 *= valueT(0.36327126400268044295);
	t39 *= valueT(0.36327126400268044295);
	t45 *= valueT(0.36327126400268044295);
	t24 *= valueT(0.36327126400268044295);
	t2 = t0 - t2;
	t3 = t1 - t3;
	t42 = t30 - t42;
	t34 = t31 - t34;
	t35 = t28 - t35;
	t52 = t29 - t52;
	t43 = t32 - t43;
	t20 = t33 - t20;
	t21 = t10 - t21;
	t12 = t11 - t12;
	t14 = t2 - t50;
	t23 = t3 - t51;
	t2 += t50;
	t3 += t51;
	t50 = t42 - t53;
	t51 = t34 - t55;
	t42 += t53;
	t34 += t55;
	t53 = t35 - t56;
	t55 = t52 - t57;
	t35 += t56;
	t52 += t57;
	t56 = t43 - t58;
	t57 = t20 - t59;
	t43 += t58;
	t20 += t59;
	t58 = t21 - t60;
	t59 = t12 - t61;
	t21 += t60;
	t12 += t61;
	t47 -= t25;
	t19 -= t16;
	t25 -= t27;
	t16 -= t18;
	t9 -= t5;
	t8 -= t4;
	t5 -= t7;
	t4 -= t6;
	t40 -= t36;
	t17 -= t13;
	t36 -= t38;
	t13 -= t15;
	t48 -= t54;
	t41 -= t37;
	t54 -= t49;
	t37 += t39;
	t46 -= t44;
	t26 -= t22;
	t44 -= t45;
	t22 -= t24;
	pReal[0 * stride] = t0;
	pImag[0 * stride] = t1;
	pReal[1 * stride] = t10;
	pImag[1 * stride] = t11;
	pReal[2 * stride] = t30;
	pImag[2 * stride] = t31;
	pReal[3 * stride] = t28;
	pImag[3 * stride] = t29;
	pReal[4 * stride] = t32;
	pImag[4 * stride] = t33;
	pReal[5 * stride] = t2 - t47;
	pImag[5 * stride] = t3 + t19;
	pReal[6 * stride] = t21 - t46;
	pImag[6 * stride] = t12 + t26;
	pReal[7 * stride] = t42 - t9;
	pImag[7 * stride] = t34 + t8;
	pReal[8 * stride] = t35 - t40;
	pImag[8 * stride] = t52 + t17;
	pReal[9 * stride] = t43 - t48;
	pImag[9 * stride] = t20 + t41;
	pReal[10 * stride] = t14 - t25;
	pImag[10 * stride] = t23 + t16;
	pReal[11 * stride] = t58 - t44;
	pImag[11 * stride] = t59 + t22;
	pReal[12 * stride] = t50 - t5;
	pImag[12 * stride] = t51 + t4;
	pReal[13 * stride] = t53 - t36;
	pImag[13 * stride] = t55 + t13;
	pReal[14 * stride] = t56 - t54;
	pImag[14 * stride] = t57 + t37;
	pReal[15 * stride] = t14 + t25;
	pImag[15 * stride] = t23 - t16;
	pReal[16 * stride] = t58 + t44;
	pImag[16 * stride] = t59 - t22;
	pReal[17 * stride] = t50 + t5;
	pImag[17 * stride] = t51 - t4;
	pReal[18 * stride] = t53 + t36;
	pImag[18 * stride] = t55 - t13;
	pReal[19 * stride] = t56 + t54;
	pImag[19 * stride] = t57 - t37;
	pReal[20 * stride] = t2 + t47;
	pImag[20 * stride] = t3 - t19;
	pReal[21 * stride] = t21 + t46;
	pImag[21 * stride] = t12 - t26;
	pReal[22 * stride] = t42 + t9;
	pImag[22 * stride] = t34 - t8;
	pReal[23 * stride] = t35 + t40;
	pImag[23 * stride] = t52 - t17;
	pReal[24 * stride] = t43 + t48;
	pImag[24 * stride] = t20 - t41;
}

template<> void StandardModule<float, 25>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 25>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
