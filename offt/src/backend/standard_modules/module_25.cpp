
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
	valueT t11, t12, t13, t14, t15, t16, t17, t18, t19, t20;
	valueT t21, t22, t23, t24, t25, t26, t27, t28, t29, t30;
	valueT t31, t32, t33, t34, t35, t36, t37, t38, t39, t40;
	valueT t41, t42, t43, t44, t45, t46, t47, t48, t49, t50;
	valueT t61, t62, t63, t64, t65, t66, t67, t68, t69, t70;
	valueT t71, t72;

	phasors.Multiply(t1, t2, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t3, t4, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t5, t6, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t7, t8, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t9, t10, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t11, t12, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t13, t14, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t15, t16, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t17, t18, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t19, t20, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t21, t22, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t23, t24, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t25, t26, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t27, t28, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t29, t30, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t31, t32, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t33, t34, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t35, t36, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t37, t38, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
	phasors.Multiply(t39, t40, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
	phasors.Multiply(t41, t42, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
	phasors.Multiply(t43, t44, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
	phasors.Multiply(t45, t46, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
	phasors.Multiply(t47, t48, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
	phasors.Multiply(t49, t50, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);

	t61 = t11 - t41;
	t62 = t12 - t42;
	t11 += t41;
	t12 += t42;
	t41 = t13 - t43;
	t42 = t14 - t44;
	t13 += t43;
	t14 += t44;
	t43 = t15 - t45;
	t44 = t16 - t46;
	t15 += t45;
	t16 += t46;
	t45 = t17 - t47;
	t46 = t18 - t48;
	t17 += t47;
	t18 += t48;
	t47 = t19 - t49;
	t48 = t20 - t50;
	t19 += t49;
	t20 += t50;
	t49 = t21 - t31;
	t50 = t22 - t32;
	t21 += t31;
	t22 += t32;
	t31 = t23 - t33;
	t32 = t24 - t34;
	t23 += t33;
	t24 += t34;
	t33 = t25 - t35;
	t34 = t26 - t36;
	t25 += t35;
	t26 += t36;
	t35 = t27 - t37;
	t36 = t28 - t38;
	t27 += t37;
	t28 += t38;
	t37 = t29 - t39;
	t38 = t30 - t40;
	t29 += t39;
	t30 += t40;
	t39 = t61 - t49;
	t40 = t62 - t50;
	t63 = t11 - t21;
	t64 = t12 - t22;
	t11 += t21;
	t12 += t22;
	t21 = t41 - t31;
	t22 = t42 - t32;
	t65 = t13 - t23;
	t66 = t14 - t24;
	t13 += t23;
	t14 += t24;
	t23 = t43 - t33;
	t24 = t44 - t34;
	t67 = t15 - t25;
	t68 = t16 - t26;
	t15 += t25;
	t16 += t26;
	t25 = t45 - t35;
	t26 = t46 - t36;
	t69 = t17 - t27;
	t70 = t18 - t28;
	t17 += t27;
	t18 += t28;
	t27 = t47 - t37;
	t28 = t48 - t38;
	t71 = t19 - t29;
	t72 = t20 - t30;
	t19 += t29;
	t20 += t30;
	t1 += t11;
	t2 += t12;
	t3 += t13;
	t4 += t14;
	t5 += t15;
	t6 += t16;
	t7 += t17;
	t8 += t18;
	t9 += t19;
	t10 += t20;
	t62 *= valueT(1.5388417685876267013);
	t61 *= valueT(1.5388417685876267013);
	t40 *= valueT(0.58778525229247312917);
	t39 *= valueT(0.58778525229247312917);
	t63 *= valueT(0.5590169943749474241);
	t64 *= valueT(0.5590169943749474241);
	t11 *= valueT(1.25);
	t12 *= valueT(1.25);
	t42 *= valueT(1.5388417685876267013);
	t41 *= valueT(1.5388417685876267013);
	t22 *= valueT(0.58778525229247312917);
	t21 *= valueT(0.58778525229247312917);
	t65 *= valueT(0.5590169943749474241);
	t66 *= valueT(0.5590169943749474241);
	t13 *= valueT(1.25);
	t14 *= valueT(1.25);
	t44 *= valueT(1.5388417685876267013);
	t43 *= valueT(1.5388417685876267013);
	t24 *= valueT(0.58778525229247312917);
	t23 *= valueT(0.58778525229247312917);
	t67 *= valueT(0.5590169943749474241);
	t68 *= valueT(0.5590169943749474241);
	t15 *= valueT(1.25);
	t16 *= valueT(1.25);
	t46 *= valueT(1.5388417685876267013);
	t45 *= valueT(1.5388417685876267013);
	t26 *= valueT(0.58778525229247312917);
	t25 *= valueT(0.58778525229247312917);
	t69 *= valueT(0.5590169943749474241);
	t70 *= valueT(0.5590169943749474241);
	t17 *= valueT(1.25);
	t18 *= valueT(1.25);
	t48 *= valueT(1.5388417685876267013);
	t47 *= valueT(1.5388417685876267013);
	t28 *= valueT(0.58778525229247312917);
	t27 *= valueT(0.58778525229247312917);
	t71 *= valueT(0.5590169943749474241);
	t72 *= valueT(0.5590169943749474241);
	t19 *= valueT(1.25);
	t20 *= valueT(1.25);
	t50 *= valueT(0.36327126400268044295);
	t49 *= valueT(0.36327126400268044295);
	t32 *= valueT(0.36327126400268044295);
	t31 *= valueT(0.36327126400268044295);
	t34 *= valueT(0.36327126400268044295);
	t33 *= valueT(0.36327126400268044295);
	t36 *= valueT(0.36327126400268044295);
	t35 *= valueT(0.36327126400268044295);
	t38 *= valueT(0.36327126400268044295);
	t37 *= valueT(0.36327126400268044295);
	t11 = t1 - t11;
	t12 = t2 - t12;
	t13 = t3 - t13;
	t14 = t4 - t14;
	t15 = t5 - t15;
	t16 = t6 - t16;
	t17 = t7 - t17;
	t18 = t8 - t18;
	t19 = t9 - t19;
	t20 = t10 - t20;
	t29 = t11 - t63;
	t30 = t12 - t64;
	t11 += t63;
	t12 += t64;
	t63 = t13 - t65;
	t64 = t14 - t66;
	t13 += t65;
	t14 += t66;
	t65 = t15 - t67;
	t66 = t16 - t68;
	t15 += t67;
	t16 += t68;
	t67 = t17 - t69;
	t68 = t18 - t70;
	t17 += t69;
	t18 += t70;
	t69 = t19 - t71;
	t70 = t20 - t72;
	t19 += t71;
	t20 += t72;
	t62 -= t40;
	t61 -= t39;
	t40 -= t50;
	t39 -= t49;
	t42 -= t22;
	t41 -= t21;
	t22 -= t32;
	t21 -= t31;
	t44 -= t24;
	t43 -= t23;
	t24 -= t34;
	t23 -= t33;
	t46 -= t26;
	t45 -= t25;
	t26 -= t36;
	t25 -= t35;
	t48 -= t28;
	t47 -= t27;
	t28 -= t38;
	t27 -= t37;
	t31 = t29 - t40;
	t32 = t30 + t39;
	t29 += t40;
	t30 -= t39;
	t33 = t11 + t62;
	t34 = t12 - t61;
	t11 -= t62;
	t12 += t61;
	t35 = t63 - t22;
	t36 = t64 + t21;
	t63 += t22;
	t64 -= t21;
	t21 = t13 + t42;
	t22 = t14 - t41;
	t13 -= t42;
	t14 += t41;
	t37 = t65 - t24;
	t38 = t66 + t23;
	t65 += t24;
	t66 -= t23;
	t23 = t15 + t44;
	t24 = t16 - t43;
	t15 -= t44;
	t16 += t43;
	t39 = t67 - t26;
	t40 = t68 + t25;
	t67 += t26;
	t68 -= t25;
	t25 = t17 + t46;
	t26 = t18 - t45;
	t17 -= t46;
	t18 += t45;
	t41 = t69 - t28;
	t42 = t70 + t27;
	t69 += t28;
	t70 -= t27;
	t27 = t19 + t48;
	t28 = t20 - t47;
	t19 -= t48;
	t20 += t47;
	t43 = valueT(0.87630668004386358731) * t35 - valueT(0.48175367410171527499) * t36;
	t35 = valueT(0.48175367410171527499) * t35 + valueT(0.87630668004386358731) * t36;
	t36 = valueT(0.72896862742141152315) * t63 - valueT(0.68454710592868867373) * t64;
	t63 = valueT(0.68454710592868867373) * t63 + valueT(0.72896862742141152315) * t64;
	t44 = valueT(0.53582679497899661827) * t21 - valueT(0.84432792550201507855) * t22;
	t21 = valueT(0.84432792550201507855) * t21 + valueT(0.53582679497899661827) * t22;
	t22 = valueT(0.96858316112863111949) * t13 - valueT(0.24868988716485478824) * t14;
	t13 = valueT(0.24868988716485478824) * t13 + valueT(0.96858316112863111949) * t14;
	t14 = valueT(0.53582679497899661827) * t37 - valueT(0.84432792550201507855) * t38;
	t37 = valueT(0.84432792550201507855) * t37 + valueT(0.53582679497899661827) * t38;
	t38 = valueT(0.062790519529313376076) * t65 - valueT(0.99802672842827156195) * t66;
	t65 = valueT(0.99802672842827156195) * t65 + valueT(0.062790519529313376076) * t66;
	t45 = valueT(0.42577929156507264886) * t23 + valueT(0.90482705246601952771) * t24;
	t23 = valueT(0.90482705246601952771) * t23 - valueT(0.42577929156507264886) * t24;
	t24 = valueT(0.87630668004386358731) * t15 - valueT(0.48175367410171527499) * t16;
	t15 = valueT(0.48175367410171527499) * t15 + valueT(0.87630668004386358731) * t16;
	t16 = valueT(0.062790519529313376076) * t39 - valueT(0.99802672842827156195) * t40;
	t39 = valueT(0.99802672842827156195) * t39 + valueT(0.062790519529313376076) * t40;
	t40 = valueT(0.63742398974868971018) * t67 + valueT(0.7705132427757892308) * t68;
	t67 = valueT(0.7705132427757892308) * t67 - valueT(0.63742398974868971018) * t68;
	t46 = valueT(0.99211470131447783105) * t25 + valueT(0.12533323356430424537) * t26;
	t25 = valueT(0.12533323356430424537) * t25 - valueT(0.99211470131447783105) * t26;
	t26 = valueT(0.72896862742141152315) * t17 - valueT(0.68454710592868867373) * t18;
	t17 = valueT(0.68454710592868867373) * t17 + valueT(0.72896862742141152315) * t18;
	t18 = valueT(0.42577929156507264886) * t41 + valueT(0.90482705246601952771) * t42;
	t41 = valueT(0.90482705246601952771) * t41 - valueT(0.42577929156507264886) * t42;
	t42 = valueT(0.99211470131447783105) * t69 + valueT(0.12533323356430424537) * t70;
	t69 = valueT(0.12533323356430424537) * t69 - valueT(0.99211470131447783105) * t70;
	t47 = valueT(0.63742398974868971018) * t27 - valueT(0.7705132427757892308) * t28;
	t27 = valueT(0.7705132427757892308) * t27 + valueT(0.63742398974868971018) * t28;
	t28 = valueT(0.53582679497899661827) * t19 - valueT(0.84432792550201507855) * t20;
	t19 = valueT(0.84432792550201507855) * t19 + valueT(0.53582679497899661827) * t20;
	t20 = t3 - t9;
	t48 = t4 - t10;
	t3 += t9;
	t4 += t10;
	t9 = t43 + t18;
	t10 = t35 - t41;
	t43 -= t18;
	t35 += t41;
	t18 = t36 + t42;
	t41 = t63 - t69;
	t36 -= t42;
	t63 += t69;
	t42 = t44 + t47;
	t49 = t21 + t27;
	t44 -= t47;
	t21 -= t27;
	t27 = t22 - t28;
	t47 = t13 - t19;
	t22 += t28;
	t13 += t19;
	t19 = t5 - t7;
	t28 = t6 - t8;
	t5 += t7;
	t6 += t8;
	t7 = t14 - t16;
	t8 = t37 - t39;
	t14 += t16;
	t37 += t39;
	t16 = t38 + t40;
	t39 = t65 - t67;
	t38 -= t40;
	t65 += t67;
	t40 = t45 - t46;
	t50 = t23 - t25;
	t45 += t46;
	t23 += t25;
	t25 = t24 - t26;
	t46 = t15 - t17;
	t24 += t26;
	t15 += t17;
	t17 = t20 - t19;
	t26 = t48 - t28;
	t61 = t3 - t5;
	t62 = t4 - t6;
	t3 += t5;
	t4 += t6;
	t5 = t9 - t7;
	t6 = t10 - t8;
	t64 = t43 - t14;
	t66 = t35 - t37;
	t43 += t14;
	t35 += t37;
	t14 = t18 - t16;
	t37 = t41 - t39;
	t67 = t36 - t38;
	t68 = t63 - t65;
	t36 += t38;
	t63 += t65;
	t38 = t42 + t40;
	t65 = t49 - t50;
	t69 = t44 + t45;
	t70 = t21 - t23;
	t44 -= t45;
	t21 += t23;
	t23 = t27 - t25;
	t45 = t47 - t46;
	t71 = t22 - t24;
	t72 = t13 - t15;
	t22 += t24;
	t13 += t15;
	t1 += t3;
	t2 += t4;
	t31 += t43;
	t32 += t35;
	t29 += t36;
	t30 += t63;
	t33 += t44;
	t34 += t21;
	t11 += t22;
	t12 += t13;
	t48 *= valueT(1.5388417685876267013);
	t20 *= valueT(1.5388417685876267013);
	t26 *= valueT(0.58778525229247312917);
	t17 *= valueT(0.58778525229247312917);
	t61 *= valueT(0.5590169943749474241);
	t62 *= valueT(0.5590169943749474241);
	t3 *= valueT(1.25);
	t4 *= valueT(1.25);
	t10 *= valueT(1.5388417685876267013);
	t9 *= valueT(1.5388417685876267013);
	t6 *= valueT(0.58778525229247312917);
	t5 *= valueT(0.58778525229247312917);
	t64 *= valueT(0.5590169943749474241);
	t66 *= valueT(0.5590169943749474241);
	t43 *= valueT(1.25);
	t35 *= valueT(1.25);
	t41 *= valueT(1.5388417685876267013);
	t18 *= valueT(1.5388417685876267013);
	t37 *= valueT(0.58778525229247312917);
	t14 *= valueT(0.58778525229247312917);
	t67 *= valueT(0.5590169943749474241);
	t68 *= valueT(0.5590169943749474241);
	t36 *= valueT(1.25);
	t63 *= valueT(1.25);
	t49 *= valueT(1.5388417685876267013);
	t42 *= valueT(1.5388417685876267013);
	t65 *= valueT(0.58778525229247312917);
	t38 *= valueT(0.58778525229247312917);
	t69 *= valueT(0.5590169943749474241);
	t70 *= valueT(0.5590169943749474241);
	t44 *= valueT(1.25);
	t21 *= valueT(1.25);
	t47 *= valueT(1.5388417685876267013);
	t27 *= valueT(1.5388417685876267013);
	t45 *= valueT(0.58778525229247312917);
	t23 *= valueT(0.58778525229247312917);
	t71 *= valueT(0.5590169943749474241);
	t72 *= valueT(0.5590169943749474241);
	t22 *= valueT(1.25);
	t13 *= valueT(1.25);
	t28 *= valueT(0.36327126400268044295);
	t19 *= valueT(0.36327126400268044295);
	t8 *= valueT(0.36327126400268044295);
	t7 *= valueT(0.36327126400268044295);
	t39 *= valueT(0.36327126400268044295);
	t16 *= valueT(0.36327126400268044295);
	t50 *= valueT(0.36327126400268044295);
	t40 *= valueT(0.36327126400268044295);
	t46 *= valueT(0.36327126400268044295);
	t25 *= valueT(0.36327126400268044295);
	t3 = t1 - t3;
	t4 = t2 - t4;
	t43 = t31 - t43;
	t35 = t32 - t35;
	t36 = t29 - t36;
	t63 = t30 - t63;
	t44 = t33 - t44;
	t21 = t34 - t21;
	t22 = t11 - t22;
	t13 = t12 - t13;
	t15 = t3 - t61;
	t24 = t4 - t62;
	t3 += t61;
	t4 += t62;
	t61 = t43 - t64;
	t62 = t35 - t66;
	t43 += t64;
	t35 += t66;
	t64 = t36 - t67;
	t66 = t63 - t68;
	t36 += t67;
	t63 += t68;
	t67 = t44 - t69;
	t68 = t21 - t70;
	t44 += t69;
	t21 += t70;
	t69 = t22 - t71;
	t70 = t13 - t72;
	t22 += t71;
	t13 += t72;
	t48 -= t26;
	t20 -= t17;
	t26 -= t28;
	t17 -= t19;
	t10 -= t6;
	t9 -= t5;
	t6 -= t8;
	t5 -= t7;
	t41 -= t37;
	t18 -= t14;
	t37 -= t39;
	t14 -= t16;
	t49 -= t65;
	t42 -= t38;
	t65 -= t50;
	t38 += t40;
	t47 -= t45;
	t27 -= t23;
	t45 -= t46;
	t23 -= t25;
	pReal[0 * stride] = t1;
	pImag[0 * stride] = t2;
	pReal[1 * stride] = t11;
	pImag[1 * stride] = t12;
	pReal[2 * stride] = t31;
	pImag[2 * stride] = t32;
	pReal[3 * stride] = t29;
	pImag[3 * stride] = t30;
	pReal[4 * stride] = t33;
	pImag[4 * stride] = t34;
	pReal[5 * stride] = t3 - t48;
	pImag[5 * stride] = t4 + t20;
	pReal[6 * stride] = t22 - t47;
	pImag[6 * stride] = t13 + t27;
	pReal[7 * stride] = t43 - t10;
	pImag[7 * stride] = t35 + t9;
	pReal[8 * stride] = t36 - t41;
	pImag[8 * stride] = t63 + t18;
	pReal[9 * stride] = t44 - t49;
	pImag[9 * stride] = t21 + t42;
	pReal[10 * stride] = t15 - t26;
	pImag[10 * stride] = t24 + t17;
	pReal[11 * stride] = t69 - t45;
	pImag[11 * stride] = t70 + t23;
	pReal[12 * stride] = t61 - t6;
	pImag[12 * stride] = t62 + t5;
	pReal[13 * stride] = t64 - t37;
	pImag[13 * stride] = t66 + t14;
	pReal[14 * stride] = t67 - t65;
	pImag[14 * stride] = t68 + t38;
	pReal[15 * stride] = t15 + t26;
	pImag[15 * stride] = t24 - t17;
	pReal[16 * stride] = t69 + t45;
	pImag[16 * stride] = t70 - t23;
	pReal[17 * stride] = t61 + t6;
	pImag[17 * stride] = t62 - t5;
	pReal[18 * stride] = t64 + t37;
	pImag[18 * stride] = t66 - t14;
	pReal[19 * stride] = t67 + t65;
	pImag[19 * stride] = t68 - t38;
	pReal[20 * stride] = t3 + t48;
	pImag[20 * stride] = t4 - t20;
	pReal[21 * stride] = t22 + t47;
	pImag[21 * stride] = t13 - t27;
	pReal[22 * stride] = t43 + t10;
	pImag[22 * stride] = t35 - t9;
	pReal[23 * stride] = t36 + t41;
	pImag[23 * stride] = t63 - t18;
	pReal[24 * stride] = t44 + t49;
	pImag[24 * stride] = t21 - t42;
}

template<> void StandardModule<float, 25>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 25>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
