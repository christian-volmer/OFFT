
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
	valueT t11, t12, t13, t14, t15, t16, t17, t18, t19, t20;
	valueT t21, t22, t23, t24, t25, t26, t27, t28, t29, t30;
	valueT t31, t32, t33, t34, t37, t38, t39, t40, t41, t42;
	valueT t43, t44, t45, t46, t47, t48, t49, t50, t51, t52;
	valueT t53, t54, t55, t56, t57, t58, t59, t60, t61, t62;
	valueT t63, t64, t65, t66, t67, t68, t73, t74, t75, t76;
	valueT t77, t78, t81, t82, t83, t84, t85, t86, t89, t90;
	valueT t91, t92, t93, t94, t101, t102;

	phasors.Multiply(t1, t2, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t3, t4, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t5, t6, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t7, t8, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t9, t10, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t11, t12, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t13, t14, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t15, t16, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t17, t18, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t19, t20, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t21, t22, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t23, t24, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t25, t26, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t27, t28, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t29, t30, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t31, t32, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t33, t34, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);

	t37 = t3 - t33;
	t38 = t4 - t34;
	t3 += t33;
	t4 += t34;
	t33 = t5 - t31;
	t34 = t6 - t32;
	t5 += t31;
	t6 += t32;
	t31 = t7 - t29;
	t32 = t8 - t30;
	t7 += t29;
	t8 += t30;
	t29 = t9 - t27;
	t30 = t10 - t28;
	t9 += t27;
	t10 += t28;
	t27 = t11 - t25;
	t28 = t12 - t26;
	t11 += t25;
	t12 += t26;
	t25 = t13 - t23;
	t26 = t14 - t24;
	t13 += t23;
	t14 += t24;
	t23 = t15 - t21;
	t24 = t16 - t22;
	t15 += t21;
	t16 += t22;
	t21 = t17 - t19;
	t22 = t18 - t20;
	t17 += t19;
	t18 += t20;
	t19 = t37 + t29;
	t20 = t38 + t30;
	t39 = t3 - t9;
	t40 = t4 - t10;
	t3 += t9;
	t4 += t10;
	t9 = t33 - t21;
	t10 = t34 - t22;
	t41 = t5 - t17;
	t42 = t6 - t18;
	t5 += t17;
	t6 += t18;
	t17 = t31 - t27;
	t18 = t32 - t28;
	t43 = t7 - t11;
	t44 = t8 - t12;
	t7 += t11;
	t8 += t12;
	t11 = t25 - t23;
	t12 = t26 - t24;
	t45 = t13 - t15;
	t46 = t14 - t16;
	t13 += t15;
	t14 += t16;
	t15 = t37 + t21;
	t16 = t38 + t22;
	t47 = t19 - t9;
	t48 = t20 - t10;
	t49 = t39 + t41;
	t50 = t40 + t42;
	t51 = t3 - t5;
	t52 = t4 - t6;
	t3 += t5;
	t4 += t6;
	t5 = t33 - t29;
	t6 = t34 - t30;
	t53 = t31 + t23;
	t54 = t32 + t24;
	t55 = t17 - t11;
	t56 = t18 - t12;
	t57 = t43 + t45;
	t58 = t44 + t46;
	t59 = t7 - t13;
	t60 = t8 - t14;
	t7 += t13;
	t8 += t14;
	t13 = t27 + t25;
	t14 = t28 + t26;
	t61 = t37 - t31;
	t62 = t38 - t32;
	t63 = t15 - t53;
	t64 = t16 - t54;
	t65 = t19 - t17;
	t66 = t20 - t18;
	t67 = t47 - t55;
	t68 = t48 - t56;
	t73 = t39 - t43;
	t74 = t40 - t44;
	t75 = t49 - t57;
	t76 = t50 - t58;
	t77 = t51 - t59;
	t78 = t52 - t60;
	t81 = t3 - t7;
	t82 = t4 - t8;
	t3 += t7;
	t4 += t8;
	t7 = t33 - t25;
	t8 = t34 - t26;
	t83 = t5 - t13;
	t84 = t6 - t14;
	t85 = t9 - t11;
	t86 = t10 - t12;
	t89 = t41 - t45;
	t90 = t42 - t46;
	t91 = t29 + t27;
	t92 = t30 + t28;
	t93 = t23 - t21;
	t94 = t24 - t22;
	t1 += t3;
	t2 += t4;
	t38 *= valueT(0.95939812720072302752);
	t37 *= valueT(0.95939812720072302752);
	t62 *= valueT(0.5325395443702860889);
	t61 *= valueT(0.5325395443702860889);
	t16 *= valueT(2.1818945516207228469);
	t15 *= valueT(2.1818945516207228469);
	t64 *= valueT(1.3244493901575953036);
	t63 *= valueT(1.3244493901575953036);
	t20 *= valueT(1.5056214040490121665);
	t19 *= valueT(1.5056214040490121665);
	t66 *= valueT(0.16380841589257956708);
	t65 *= valueT(0.16380841589257956708);
	t48 *= valueT(1.471712870926796715);
	t47 *= valueT(1.471712870926796715);
	t68 *= valueT(0.79801722728023950333);
	t67 *= valueT(0.79801722728023950333);
	t39 *= valueT(0.20497965023262185845);
	t40 *= valueT(0.20497965023262185845);
	t73 *= valueT(0.23590942324913168399);
	t74 *= valueT(0.23590942324913168399);
	t49 *= valueT(0.98478225812745932858);
	t50 *= valueT(0.98478225812745932858);
	t75 *= valueT(0.12379124967517888148);
	t76 *= valueT(0.12379124967517888148);
	t51 *= valueT(0.72340797728605660184);
	t52 *= valueT(0.72340797728605660184);
	t77 *= valueT(0.40623178445333148629);
	t78 *= valueT(0.40623178445333148629);
	t81 *= valueT(0.25769410160110378436);
	t82 *= valueT(0.25769410160110378436);
	t3 *= valueT(1.0625);
	t4 *= valueT(1.0625);
	t34 *= valueT(1.9840276146528704026);
	t33 *= valueT(1.9840276146528704026);
	t8 *= valueT(2.1285739989307650956);
	t7 *= valueT(2.1285739989307650956);
	t6 *= valueT(0.76153119023287058323);
	t5 *= valueT(0.76153119023287058323);
	t84 *= valueT(0.27158506440288370309);
	t83 *= valueT(0.27158506440288370309);
	t10 *= valueT(2.7281178284690119859);
	t9 *= valueT(2.7281178284690119859);
	t86 *= valueT(1.6931805186353018254);
	t85 *= valueT(1.6931805186353018254);
	t41 *= valueT(1.7645848660222967987);
	t42 *= valueT(1.7645848660222967987);
	t89 *= valueT(0.48349192259948944695);
	t90 *= valueT(0.48349192259948944695);
	t32 *= valueT(1.681881459575028925);
	t31 *= valueT(1.681881459575028925);
	t54 *= valueT(2.6814252326397827742);
	t53 *= valueT(2.6814252326397827742);
	t18 *= valueT(0.87112889394113059338);
	t17 *= valueT(0.87112889394113059338);
	t56 *= valueT(1.1592588934673924521);
	t55 *= valueT(1.1592588934673924521);
	t43 *= valueT(1.0451835201736756678);
	t44 *= valueT(1.0451835201736756678);
	t57 *= valueT(0.54389318464570578614);
	t58 *= valueT(0.54389318464570578614);
	t59 *= valueT(0.08905559162060637075);
	t60 *= valueT(0.08905559162060637075);
	t30 *= valueT(2.0518446808973013055);
	t29 *= valueT(2.0518446808973013055);
	t92 *= valueT(0.20492271258512695475);
	t91 *= valueT(0.20492271258512695475);
	t28 *= valueT(0.060376328307232261758);
	t27 *= valueT(0.060376328307232261758);
	t14 *= valueT(0.36290744570499787004);
	t13 *= valueT(0.36290744570499787004);
	t26 *= valueT(0.63663632735975597915);
	t25 *= valueT(0.63663632735975597915);
	t12 *= valueT(1.8706726670058844426);
	t11 *= valueT(1.8706726670058844426);
	t45 *= valueT(0.042602849117735904509);
	t46 *= valueT(0.042602849117735904509);
	t24 *= valueT(3.104709006652012906);
	t23 *= valueT(3.104709006652012906);
	t94 *= valueT(1.2577870383398385552);
	t93 *= valueT(1.2577870383398385552);
	t22 *= valueT(3.4722080422851535691);
	t21 *= valueT(3.4722080422851535691);
	t3 = t1 - t3;
	t4 = t2 - t4;
	t101 = t3 - t81;
	t102 = t4 - t82;
	t3 += t81;
	t4 += t82;
	t38 += t62;
	t37 += t61;
	t62 -= t32;
	t61 -= t31;
	t16 -= t64;
	t15 -= t63;
	t64 += t54;
	t63 += t53;
	t20 += t66;
	t19 += t65;
	t66 -= t18;
	t65 -= t17;
	t48 -= t68;
	t47 -= t67;
	t68 += t56;
	t67 += t55;
	t39 += t73;
	t40 += t74;
	t73 -= t43;
	t74 -= t44;
	t49 -= t75;
	t50 -= t76;
	t75 += t57;
	t76 += t58;
	t51 -= t77;
	t52 -= t78;
	t77 += t59;
	t78 += t60;
	t34 -= t8;
	t33 -= t7;
	t8 += t26;
	t7 += t25;
	t6 -= t84;
	t5 -= t83;
	t84 -= t14;
	t83 -= t13;
	t10 -= t86;
	t9 -= t85;
	t86 += t12;
	t85 += t11;
	t41 -= t89;
	t42 -= t90;
	t89 += t45;
	t90 += t46;
	t30 -= t92;
	t29 -= t91;
	t92 -= t28;
	t91 -= t27;
	t24 -= t94;
	t23 -= t93;
	t94 += t22;
	t93 += t21;
	t11 = t101 - t77;
	t12 = t102 - t78;
	t101 += t77;
	t102 += t78;
	t13 = t3 - t51;
	t14 = t4 - t52;
	t3 += t51;
	t4 += t52;
	t38 -= t16;
	t37 -= t15;
	t62 += t64;
	t61 += t63;
	t16 -= t94;
	t15 -= t93;
	t64 -= t24;
	t63 -= t23;
	t20 -= t48;
	t19 -= t47;
	t66 += t68;
	t65 += t67;
	t48 += t10;
	t47 += t9;
	t68 += t86;
	t67 += t85;
	t39 -= t49;
	t40 -= t50;
	t73 += t75;
	t74 += t76;
	t49 -= t41;
	t50 -= t42;
	t75 -= t89;
	t76 -= t90;
	t34 -= t6;
	t33 -= t5;
	t8 -= t84;
	t7 -= t83;
	t6 += t30;
	t5 += t29;
	t84 += t92;
	t83 += t91;
	t9 = t11 - t75;
	t10 = t12 - t76;
	t11 += t75;
	t12 += t76;
	t17 = t101 - t73;
	t18 = t102 - t74;
	t101 += t73;
	t102 += t74;
	t21 = t13 + t49;
	t22 = t14 + t50;
	t13 -= t49;
	t14 -= t50;
	t23 = t3 - t39;
	t24 = t4 - t40;
	t3 += t39;
	t4 += t40;
	t38 -= t20;
	t37 -= t19;
	t62 -= t66;
	t61 -= t65;
	t16 -= t48;
	t15 -= t47;
	t64 -= t68;
	t63 -= t67;
	t20 -= t6;
	t19 -= t5;
	t66 += t84;
	t65 += t83;
	t48 -= t34;
	t47 -= t33;
	t68 -= t8;
	t67 -= t7;
	pReal[0 * stride] = t1;
	pImag[0 * stride] = t2;
	pReal[1 * stride] = t23 + t38;
	pImag[1 * stride] = t24 - t37;
	pReal[2 * stride] = t21 - t48;
	pImag[2 * stride] = t22 + t47;
	pReal[3 * stride] = t101 - t62;
	pImag[3 * stride] = t102 + t61;
	pReal[4 * stride] = t3 - t20;
	pImag[4 * stride] = t4 + t19;
	pReal[5 * stride] = t17 - t66;
	pImag[5 * stride] = t18 + t65;
	pReal[6 * stride] = t11 - t68;
	pImag[6 * stride] = t12 + t67;
	pReal[7 * stride] = t9 - t64;
	pImag[7 * stride] = t10 + t63;
	pReal[8 * stride] = t13 - t16;
	pImag[8 * stride] = t14 + t15;
	pReal[9 * stride] = t13 + t16;
	pImag[9 * stride] = t14 - t15;
	pReal[10 * stride] = t9 + t64;
	pImag[10 * stride] = t10 - t63;
	pReal[11 * stride] = t11 + t68;
	pImag[11 * stride] = t12 - t67;
	pReal[12 * stride] = t17 + t66;
	pImag[12 * stride] = t18 - t65;
	pReal[13 * stride] = t3 + t20;
	pImag[13 * stride] = t4 - t19;
	pReal[14 * stride] = t101 + t62;
	pImag[14 * stride] = t102 - t61;
	pReal[15 * stride] = t21 + t48;
	pImag[15 * stride] = t22 - t47;
	pReal[16 * stride] = t23 - t38;
	pImag[16 * stride] = t24 + t37;
}

template<> void StandardModule<float, 17>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 17>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
