
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

/*
	Number of additions       : 274
	Number of multiplications : 82
*/

template<> StandardModuleComplexity const StandardModule<float, 17>::Complexity = { 274, 82 };
template<> StandardModuleComplexity const StandardModule<double, 17>::Complexity = { 274, 82 };

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
	valueT t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
	valueT t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
	valueT t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
	valueT t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	valueT t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	valueT t60, t61, t62, t63, t64, t65, t66, t67, t68, t69;
	valueT t70, t71, t72, t73, t74, t75, t76, t77, t78, t79;
	valueT t80, t81, t82, t83, t84, t85;

	phasors.Multiply(t0, t1, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t2, t3, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t4, t5, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t6, t7, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t8, t9, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t10, t11, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t12, t13, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t14, t15, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t16, t17, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t18, t19, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t20, t21, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t22, t23, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t24, t25, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t26, t27, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t28, t29, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t30, t31, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t32, t33, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);

	t34 = t2 - t32;
	t35 = t3 - t33;
	t2 += t32;
	t3 += t33;
	t32 = t4 - t30;
	t33 = t5 - t31;
	t4 += t30;
	t5 += t31;
	t30 = t6 - t28;
	t31 = t7 - t29;
	t6 += t28;
	t7 += t29;
	t28 = t8 - t26;
	t29 = t9 - t27;
	t8 += t26;
	t9 += t27;
	t26 = t10 - t24;
	t27 = t11 - t25;
	t10 += t24;
	t11 += t25;
	t24 = t12 - t22;
	t25 = t13 - t23;
	t12 += t22;
	t13 += t23;
	t22 = t14 - t20;
	t23 = t15 - t21;
	t14 += t20;
	t15 += t21;
	t20 = t16 - t18;
	t21 = t17 - t19;
	t16 += t18;
	t17 += t19;
	t18 = t34 + t28;
	t19 = t35 + t29;
	t36 = t2 - t8;
	t37 = t3 - t9;
	t2 += t8;
	t3 += t9;
	t8 = t32 - t20;
	t9 = t33 - t21;
	t38 = t4 - t16;
	t39 = t5 - t17;
	t4 += t16;
	t5 += t17;
	t16 = t30 - t26;
	t17 = t31 - t27;
	t40 = t6 - t10;
	t41 = t7 - t11;
	t6 += t10;
	t7 += t11;
	t10 = t24 - t22;
	t11 = t25 - t23;
	t42 = t12 - t14;
	t43 = t13 - t15;
	t12 += t14;
	t13 += t15;
	t14 = t34 + t20;
	t15 = t35 + t21;
	t44 = t18 - t8;
	t45 = t19 - t9;
	t46 = t36 + t38;
	t47 = t37 + t39;
	t48 = t2 - t4;
	t49 = t3 - t5;
	t2 += t4;
	t3 += t5;
	t4 = t32 - t28;
	t5 = t33 - t29;
	t50 = t30 + t22;
	t51 = t31 + t23;
	t52 = t16 - t10;
	t53 = t17 - t11;
	t54 = t40 + t42;
	t55 = t41 + t43;
	t56 = t6 - t12;
	t57 = t7 - t13;
	t6 += t12;
	t7 += t13;
	t12 = t26 + t24;
	t13 = t27 + t25;
	t58 = t34 - t30;
	t59 = t35 - t31;
	t60 = t14 - t50;
	t61 = t15 - t51;
	t62 = t18 - t16;
	t63 = t19 - t17;
	t64 = t44 - t52;
	t65 = t45 - t53;
	t66 = t36 - t40;
	t67 = t37 - t41;
	t68 = t46 - t54;
	t69 = t47 - t55;
	t70 = t48 - t56;
	t71 = t49 - t57;
	t72 = t2 - t6;
	t73 = t3 - t7;
	t2 += t6;
	t3 += t7;
	t6 = t32 - t24;
	t7 = t33 - t25;
	t74 = t4 - t12;
	t75 = t5 - t13;
	t76 = t8 - t10;
	t77 = t9 - t11;
	t78 = t38 - t42;
	t79 = t39 - t43;
	t80 = t28 + t26;
	t81 = t29 + t27;
	t82 = t22 - t20;
	t83 = t23 - t21;
	t0 += t2;
	t1 += t3;
	t35 *= valueT(0.95939812720072302752);
	t34 *= valueT(0.95939812720072302752);
	t59 *= valueT(0.5325395443702860889);
	t58 *= valueT(0.5325395443702860889);
	t15 *= valueT(2.1818945516207228469);
	t14 *= valueT(2.1818945516207228469);
	t61 *= valueT(1.3244493901575953036);
	t60 *= valueT(1.3244493901575953036);
	t19 *= valueT(1.5056214040490121665);
	t18 *= valueT(1.5056214040490121665);
	t63 *= valueT(0.16380841589257956708);
	t62 *= valueT(0.16380841589257956708);
	t45 *= valueT(1.471712870926796715);
	t44 *= valueT(1.471712870926796715);
	t65 *= valueT(0.79801722728023950333);
	t64 *= valueT(0.79801722728023950333);
	t36 *= valueT(0.20497965023262185845);
	t37 *= valueT(0.20497965023262185845);
	t66 *= valueT(0.23590942324913168399);
	t67 *= valueT(0.23590942324913168399);
	t46 *= valueT(0.98478225812745932858);
	t47 *= valueT(0.98478225812745932858);
	t68 *= valueT(0.12379124967517888148);
	t69 *= valueT(0.12379124967517888148);
	t48 *= valueT(0.72340797728605660184);
	t49 *= valueT(0.72340797728605660184);
	t70 *= valueT(0.40623178445333148629);
	t71 *= valueT(0.40623178445333148629);
	t72 *= valueT(0.25769410160110378436);
	t73 *= valueT(0.25769410160110378436);
	t2 *= valueT(1.0625);
	t3 *= valueT(1.0625);
	t33 *= valueT(1.9840276146528704026);
	t32 *= valueT(1.9840276146528704026);
	t7 *= valueT(2.1285739989307650956);
	t6 *= valueT(2.1285739989307650956);
	t5 *= valueT(0.76153119023287058323);
	t4 *= valueT(0.76153119023287058323);
	t75 *= valueT(0.27158506440288370309);
	t74 *= valueT(0.27158506440288370309);
	t9 *= valueT(2.7281178284690119859);
	t8 *= valueT(2.7281178284690119859);
	t77 *= valueT(1.6931805186353018254);
	t76 *= valueT(1.6931805186353018254);
	t38 *= valueT(1.7645848660222967987);
	t39 *= valueT(1.7645848660222967987);
	t78 *= valueT(0.48349192259948944695);
	t79 *= valueT(0.48349192259948944695);
	t31 *= valueT(1.681881459575028925);
	t30 *= valueT(1.681881459575028925);
	t51 *= valueT(2.6814252326397827742);
	t50 *= valueT(2.6814252326397827742);
	t17 *= valueT(0.87112889394113059338);
	t16 *= valueT(0.87112889394113059338);
	t53 *= valueT(1.1592588934673924521);
	t52 *= valueT(1.1592588934673924521);
	t40 *= valueT(1.0451835201736756678);
	t41 *= valueT(1.0451835201736756678);
	t54 *= valueT(0.54389318464570578614);
	t55 *= valueT(0.54389318464570578614);
	t56 *= valueT(0.08905559162060637075);
	t57 *= valueT(0.08905559162060637075);
	t29 *= valueT(2.0518446808973013055);
	t28 *= valueT(2.0518446808973013055);
	t81 *= valueT(0.20492271258512695475);
	t80 *= valueT(0.20492271258512695475);
	t27 *= valueT(0.060376328307232261758);
	t26 *= valueT(0.060376328307232261758);
	t13 *= valueT(0.36290744570499787004);
	t12 *= valueT(0.36290744570499787004);
	t25 *= valueT(0.63663632735975597915);
	t24 *= valueT(0.63663632735975597915);
	t11 *= valueT(1.8706726670058844426);
	t10 *= valueT(1.8706726670058844426);
	t42 *= valueT(0.042602849117735904509);
	t43 *= valueT(0.042602849117735904509);
	t23 *= valueT(3.104709006652012906);
	t22 *= valueT(3.104709006652012906);
	t83 *= valueT(1.2577870383398385552);
	t82 *= valueT(1.2577870383398385552);
	t21 *= valueT(3.4722080422851535691);
	t20 *= valueT(3.4722080422851535691);
	t2 = t0 - t2;
	t3 = t1 - t3;
	t84 = t2 - t72;
	t85 = t3 - t73;
	t2 += t72;
	t3 += t73;
	t35 += t59;
	t34 += t58;
	t59 -= t31;
	t58 -= t30;
	t15 -= t61;
	t14 -= t60;
	t61 += t51;
	t60 += t50;
	t19 += t63;
	t18 += t62;
	t63 -= t17;
	t62 -= t16;
	t45 -= t65;
	t44 -= t64;
	t65 += t53;
	t64 += t52;
	t36 += t66;
	t37 += t67;
	t66 -= t40;
	t67 -= t41;
	t46 -= t68;
	t47 -= t69;
	t68 += t54;
	t69 += t55;
	t48 -= t70;
	t49 -= t71;
	t70 += t56;
	t71 += t57;
	t33 -= t7;
	t32 -= t6;
	t7 += t25;
	t6 += t24;
	t5 -= t75;
	t4 -= t74;
	t75 -= t13;
	t74 -= t12;
	t9 -= t77;
	t8 -= t76;
	t77 += t11;
	t76 += t10;
	t38 -= t78;
	t39 -= t79;
	t78 += t42;
	t79 += t43;
	t29 -= t81;
	t28 -= t80;
	t81 -= t27;
	t80 -= t26;
	t23 -= t83;
	t22 -= t82;
	t83 += t21;
	t82 += t20;
	t10 = t84 - t70;
	t11 = t85 - t71;
	t84 += t70;
	t85 += t71;
	t12 = t2 - t48;
	t13 = t3 - t49;
	t2 += t48;
	t3 += t49;
	t35 -= t15;
	t34 -= t14;
	t59 += t61;
	t58 += t60;
	t15 -= t83;
	t14 -= t82;
	t61 -= t23;
	t60 -= t22;
	t19 -= t45;
	t18 -= t44;
	t63 += t65;
	t62 += t64;
	t45 += t9;
	t44 += t8;
	t65 += t77;
	t64 += t76;
	t36 -= t46;
	t37 -= t47;
	t66 += t68;
	t67 += t69;
	t46 -= t38;
	t47 -= t39;
	t68 -= t78;
	t69 -= t79;
	t33 -= t5;
	t32 -= t4;
	t7 -= t75;
	t6 -= t74;
	t5 += t29;
	t4 += t28;
	t75 += t81;
	t74 += t80;
	t8 = t10 - t68;
	t9 = t11 - t69;
	t10 += t68;
	t11 += t69;
	t16 = t84 - t66;
	t17 = t85 - t67;
	t84 += t66;
	t85 += t67;
	t20 = t12 + t46;
	t21 = t13 + t47;
	t12 -= t46;
	t13 -= t47;
	t22 = t2 - t36;
	t23 = t3 - t37;
	t2 += t36;
	t3 += t37;
	t35 -= t19;
	t34 -= t18;
	t59 -= t63;
	t58 -= t62;
	t15 -= t45;
	t14 -= t44;
	t61 -= t65;
	t60 -= t64;
	t19 -= t5;
	t18 -= t4;
	t63 += t75;
	t62 += t74;
	t45 -= t33;
	t44 -= t32;
	t65 -= t7;
	t64 -= t6;
	pReal[0 * stride] = t0;
	pImag[0 * stride] = t1;
	pReal[1 * stride] = t22 + t35;
	pImag[1 * stride] = t23 - t34;
	pReal[2 * stride] = t20 - t45;
	pImag[2 * stride] = t21 + t44;
	pReal[3 * stride] = t84 - t59;
	pImag[3 * stride] = t85 + t58;
	pReal[4 * stride] = t2 - t19;
	pImag[4 * stride] = t3 + t18;
	pReal[5 * stride] = t16 - t63;
	pImag[5 * stride] = t17 + t62;
	pReal[6 * stride] = t10 - t65;
	pImag[6 * stride] = t11 + t64;
	pReal[7 * stride] = t8 - t61;
	pImag[7 * stride] = t9 + t60;
	pReal[8 * stride] = t12 - t15;
	pImag[8 * stride] = t13 + t14;
	pReal[9 * stride] = t12 + t15;
	pImag[9 * stride] = t13 - t14;
	pReal[10 * stride] = t8 + t61;
	pImag[10 * stride] = t9 - t60;
	pReal[11 * stride] = t10 + t65;
	pImag[11 * stride] = t11 - t64;
	pReal[12 * stride] = t16 + t63;
	pImag[12 * stride] = t17 - t62;
	pReal[13 * stride] = t2 + t19;
	pImag[13 * stride] = t3 - t18;
	pReal[14 * stride] = t84 + t59;
	pImag[14 * stride] = t85 - t58;
	pReal[15 * stride] = t20 + t45;
	pImag[15 * stride] = t21 - t44;
	pReal[16 * stride] = t22 - t35;
	pImag[16 * stride] = t23 + t34;
}

template<> void StandardModule<float, 17>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 17>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
