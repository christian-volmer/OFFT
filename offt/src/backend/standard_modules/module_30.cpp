
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
	valueT t11, t12, t13, t14, t15, t16, t17, t18, t19, t20;
	valueT t21, t22, t23, t24, t25, t26, t27, t28, t29, t30;
	valueT t31, t32, t33, t34, t35, t36, t37, t38, t39, t40;
	valueT t41, t42, t43, t44, t45, t46, t47, t48, t49, t50;
	valueT t51, t52, t53, t54, t55, t56, t57, t58, t59, t60;
	valueT t63, t64, t65, t66, t67, t68, t69, t70, t73, t74;
	valueT t75, t76, t77, t78;

	phasors.Multiply(t1, t2, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t3, t4, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t5, t6, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t7, t8, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t9, t10, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t11, t12, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t13, t14, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t15, t16, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t17, t18, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t19, t20, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t21, t22, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t23, t24, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t25, t26, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t27, t28, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t29, t30, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t31, t32, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t33, t34, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t35, t36, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t37, t38, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
	phasors.Multiply(t39, t40, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
	phasors.Multiply(t41, t42, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
	phasors.Multiply(t43, t44, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
	phasors.Multiply(t45, t46, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
	phasors.Multiply(t47, t48, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
	phasors.Multiply(t49, t50, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);
	phasors.Multiply(t51, t52, pReal[25 * stride], pImag[25 * stride], twiddleStart + 25 * twiddleIncrement);
	phasors.Multiply(t53, t54, pReal[26 * stride], pImag[26 * stride], twiddleStart + 26 * twiddleIncrement);
	phasors.Multiply(t55, t56, pReal[27 * stride], pImag[27 * stride], twiddleStart + 27 * twiddleIncrement);
	phasors.Multiply(t57, t58, pReal[28 * stride], pImag[28 * stride], twiddleStart + 28 * twiddleIncrement);
	phasors.Multiply(t59, t60, pReal[29 * stride], pImag[29 * stride], twiddleStart + 29 * twiddleIncrement);

	t63 = t3 - t23;
	t64 = t4 - t24;
	t3 += t23;
	t4 += t24;
	t23 = t5 - t45;
	t24 = t6 - t46;
	t5 += t45;
	t6 += t46;
	t45 = t9 - t29;
	t46 = t10 - t30;
	t9 += t29;
	t10 += t30;
	t29 = t11 - t51;
	t30 = t12 - t52;
	t11 += t51;
	t12 += t52;
	t51 = t15 - t35;
	t52 = t16 - t36;
	t15 += t35;
	t16 += t36;
	t35 = t17 - t57;
	t36 = t18 - t58;
	t17 += t57;
	t18 += t58;
	t57 = t21 - t41;
	t58 = t22 - t42;
	t21 += t41;
	t22 += t42;
	t41 = t27 - t47;
	t42 = t28 - t48;
	t27 += t47;
	t28 += t48;
	t47 = t33 - t53;
	t48 = t34 - t54;
	t33 += t53;
	t34 += t54;
	t53 = t39 - t59;
	t54 = t40 - t60;
	t39 += t59;
	t40 += t60;
	t1 += t21;
	t2 += t22;
	t43 = t3 + t43;
	t44 = t4 + t44;
	t25 = t5 + t25;
	t26 = t6 + t26;
	t7 += t27;
	t8 += t28;
	t49 = t9 + t49;
	t50 = t10 + t50;
	t31 = t11 + t31;
	t32 = t12 + t32;
	t13 += t33;
	t14 += t34;
	t55 = t15 + t55;
	t56 = t16 + t56;
	t37 = t17 + t37;
	t38 = t18 + t38;
	t19 += t39;
	t20 += t40;
	t59 = t63 - t53;
	t60 = t64 - t54;
	t63 += t53;
	t64 += t54;
	t53 = t3 - t39;
	t54 = t4 - t40;
	t3 += t39;
	t4 += t40;
	t39 = t43 - t19;
	t40 = t44 - t20;
	t43 += t19;
	t44 += t20;
	t19 = t23 - t35;
	t20 = t24 - t36;
	t23 += t35;
	t24 += t36;
	t35 = t5 - t17;
	t36 = t6 - t18;
	t5 += t17;
	t6 += t18;
	t17 = t25 - t37;
	t18 = t26 - t38;
	t25 += t37;
	t26 += t38;
	t37 = t7 - t55;
	t38 = t8 - t56;
	t7 += t55;
	t8 += t56;
	t55 = t45 - t47;
	t56 = t46 - t48;
	t45 += t47;
	t46 += t48;
	t47 = t9 - t33;
	t48 = t10 - t34;
	t9 += t33;
	t10 += t34;
	t33 = t49 - t13;
	t34 = t50 - t14;
	t49 += t13;
	t50 += t14;
	t13 = t51 - t41;
	t14 = t52 - t42;
	t51 += t41;
	t52 += t42;
	t41 = t15 - t27;
	t42 = t16 - t28;
	t15 += t27;
	t16 += t28;
	t27 = t59 - t13;
	t28 = t60 - t14;
	t65 = t63 - t51;
	t66 = t64 - t52;
	t63 += t51;
	t64 += t52;
	t51 = t53 - t41;
	t52 = t54 - t42;
	t67 = t3 - t15;
	t68 = t4 - t16;
	t3 += t15;
	t4 += t16;
	t15 = t39 + t37;
	t16 = t40 + t38;
	t69 = t43 - t7;
	t70 = t44 - t8;
	t43 += t7;
	t44 += t8;
	t7 = t19 - t55;
	t8 = t20 - t56;
	t73 = t23 - t45;
	t74 = t24 - t46;
	t23 += t45;
	t24 += t46;
	t45 = t35 + t47;
	t46 = t36 + t48;
	t75 = t5 - t9;
	t76 = t6 - t10;
	t5 += t9;
	t6 += t10;
	t9 = t17 + t33;
	t10 = t18 + t34;
	t77 = t25 - t49;
	t78 = t26 - t50;
	t25 += t49;
	t26 += t50;
	t1 += t25;
	t2 += t26;
	t29 = t63 - t29;
	t30 = t64 - t30;
	t11 = t3 + t11;
	t12 = t4 + t12;
	t31 = t43 + t31;
	t32 = t44 + t32;
	t57 = t73 - t57;
	t58 = t74 - t58;
	t21 = t5 + t21;
	t22 = t6 + t22;
	t59 *= valueT(1.3326760640014591093);
	t60 *= valueT(1.3326760640014591093);
	t27 *= valueT(0.50903696045512718345);
	t28 *= valueT(0.50903696045512718345);
	t66 *= valueT(0.48412291827592711065);
	t65 *= valueT(0.48412291827592711065);
	t64 *= valueT(1.0825317547305483085);
	t63 *= valueT(1.0825317547305483085);
	t30 *= valueT(0.86602540378443864676);
	t29 *= valueT(0.86602540378443864676);
	t54 *= valueT(2.3082626528814400519);
	t53 *= valueT(2.3082626528814400519);
	t52 *= valueT(0.88167787843870969375);
	t51 *= valueT(0.88167787843870969375);
	t67 *= valueT(0.83852549156242113615);
	t68 *= valueT(0.83852549156242113615);
	t3 *= valueT(1.875);
	t4 *= valueT(1.875);
	t11 *= valueT(1.5);
	t12 *= valueT(1.5);
	t40 *= valueT(1.5388417685876267013);
	t39 *= valueT(1.5388417685876267013);
	t16 *= valueT(0.58778525229247312917);
	t15 *= valueT(0.58778525229247312917);
	t69 *= valueT(0.5590169943749474241);
	t70 *= valueT(0.5590169943749474241);
	t43 *= valueT(1.25);
	t44 *= valueT(1.25);
	t19 *= valueT(0.31460214309120474243);
	t20 *= valueT(0.31460214309120474243);
	t7 *= valueT(0.50903696045512718345);
	t8 *= valueT(0.50903696045512718345);
	t74 *= valueT(1.0825317547305483085);
	t73 *= valueT(1.0825317547305483085);
	t58 *= valueT(0.86602540378443864676);
	t57 *= valueT(0.86602540378443864676);
	t24 *= valueT(0.48412291827592711065);
	t23 *= valueT(0.48412291827592711065);
	t36 *= valueT(0.54490689600402066442);
	t35 *= valueT(0.54490689600402066442);
	t46 *= valueT(0.88167787843870969375);
	t45 *= valueT(0.88167787843870969375);
	t75 *= valueT(0.83852549156242113615);
	t76 *= valueT(0.83852549156242113615);
	t5 *= valueT(1.875);
	t6 *= valueT(1.875);
	t21 *= valueT(1.5);
	t22 *= valueT(1.5);
	t18 *= valueT(0.36327126400268044295);
	t17 *= valueT(0.36327126400268044295);
	t10 *= valueT(0.58778525229247312917);
	t9 *= valueT(0.58778525229247312917);
	t77 *= valueT(0.5590169943749474241);
	t78 *= valueT(0.5590169943749474241);
	t25 *= valueT(1.25);
	t26 *= valueT(1.25);
	t38 *= valueT(0.36327126400268044295);
	t37 *= valueT(0.36327126400268044295);
	t55 *= valueT(1.3326760640014591093);
	t56 *= valueT(1.3326760640014591093);
	t48 *= valueT(2.3082626528814400519);
	t47 *= valueT(2.3082626528814400519);
	t34 *= valueT(1.5388417685876267013);
	t33 *= valueT(1.5388417685876267013);
	t13 *= valueT(0.31460214309120474243);
	t14 *= valueT(0.31460214309120474243);
	t42 *= valueT(0.54490689600402066442);
	t41 *= valueT(0.54490689600402066442);
	t25 = t1 - t25;
	t26 = t2 - t26;
	t64 -= t30;
	t63 -= t29;
	t3 -= t11;
	t4 -= t12;
	t43 -= t31;
	t44 -= t32;
	t74 -= t58;
	t73 -= t57;
	t5 -= t21;
	t6 -= t22;
	t49 = t25 + t77;
	t50 = t26 + t78;
	t25 -= t77;
	t26 -= t78;
	t59 -= t27;
	t60 -= t28;
	t27 -= t13;
	t28 -= t14;
	t13 = t66 + t64;
	t14 = t65 + t63;
	t66 -= t64;
	t65 -= t63;
	t54 -= t52;
	t53 -= t51;
	t52 -= t42;
	t51 -= t41;
	t41 = t67 + t3;
	t42 = t68 + t4;
	t67 -= t3;
	t68 -= t4;
	t40 -= t16;
	t39 -= t15;
	t16 += t38;
	t15 += t37;
	t3 = t69 + t43;
	t4 = t70 + t44;
	t69 -= t43;
	t70 -= t44;
	t19 += t7;
	t20 += t8;
	t7 += t55;
	t8 += t56;
	t37 = t74 - t24;
	t38 = t73 - t23;
	t74 += t24;
	t73 += t23;
	t36 += t46;
	t35 += t45;
	t46 -= t48;
	t45 -= t47;
	t23 = t75 - t5;
	t24 = t76 - t6;
	t75 += t5;
	t76 += t6;
	t18 += t10;
	t17 += t9;
	t10 -= t34;
	t9 -= t33;
	t5 = t49 - t18;
	t6 = t50 + t17;
	t49 += t18;
	t50 -= t17;
	t17 = t25 + t10;
	t18 = t26 - t9;
	t25 -= t10;
	t26 += t9;
	t9 = t59 - t66;
	t10 = t60 + t65;
	t59 += t66;
	t60 -= t65;
	t33 = t27 + t13;
	t34 = t28 - t14;
	t27 -= t13;
	t28 += t14;
	t13 = t54 + t67;
	t14 = t53 - t68;
	t54 -= t67;
	t53 += t68;
	t43 = t52 - t41;
	t44 = t51 + t42;
	t52 += t41;
	t51 -= t42;
	t41 = t40 + t69;
	t42 = t39 - t70;
	t40 -= t69;
	t39 += t70;
	t47 = t16 - t3;
	t48 = t15 + t4;
	t16 += t3;
	t15 -= t4;
	t3 = t19 - t37;
	t4 = t20 + t38;
	t19 += t37;
	t20 -= t38;
	t37 = t7 + t74;
	t38 = t8 - t73;
	t7 -= t74;
	t8 += t73;
	t55 = t36 - t23;
	t56 = t35 + t24;
	t36 += t23;
	t35 -= t24;
	t23 = t46 - t75;
	t24 = t45 + t76;
	t46 += t75;
	t45 -= t76;
	t63 = t1 - t31;
	t64 = t2 - t32;
	t1 += t31;
	t2 += t32;
	t31 = t5 - t47;
	t32 = t6 + t48;
	t5 += t47;
	t6 -= t48;
	t47 = t49 + t16;
	t48 = t50 - t15;
	t49 -= t16;
	t50 += t15;
	t15 = t17 - t41;
	t16 = t18 + t42;
	t17 += t41;
	t18 -= t42;
	t41 = t25 + t40;
	t42 = t26 - t39;
	t25 -= t40;
	t26 += t39;
	t39 = t9 + t37;
	t40 = t10 + t38;
	t9 -= t37;
	t10 -= t38;
	t37 = t59 + t7;
	t38 = t60 + t8;
	t59 -= t7;
	t60 -= t8;
	t7 = t33 - t3;
	t8 = t34 - t4;
	t33 += t3;
	t34 += t4;
	t3 = t27 - t19;
	t4 = t28 - t20;
	t27 += t19;
	t28 += t20;
	t19 = t30 + t58;
	t20 = t29 + t57;
	t30 -= t58;
	t29 -= t57;
	t57 = t13 - t23;
	t58 = t14 - t24;
	t13 += t23;
	t14 += t24;
	t23 = t54 - t46;
	t24 = t53 - t45;
	t54 += t46;
	t53 += t45;
	t45 = t43 + t55;
	t46 = t44 + t56;
	t43 -= t55;
	t44 -= t56;
	t55 = t52 + t36;
	t56 = t51 + t35;
	t52 -= t36;
	t51 -= t35;
	t35 = t11 - t21;
	t36 = t12 - t22;
	t11 += t21;
	t12 += t22;
	t35 = t63 + t35;
	t36 = t64 + t36;
	t11 = t1 - t11;
	t12 = t2 - t12;
	t45 = t31 + t45;
	t46 = t32 - t46;
	t43 = t5 - t43;
	t44 = t6 + t44;
	t55 = t47 - t55;
	t56 = t48 + t56;
	t52 = t49 + t52;
	t51 = t50 - t51;
	t57 = t15 + t57;
	t58 = t16 - t58;
	t13 = t17 - t13;
	t14 = t18 + t14;
	t23 = t41 - t23;
	t24 = t42 + t24;
	t54 = t25 + t54;
	t53 = t26 - t53;
	pReal[0 * stride] = t1;
	pImag[0 * stride] = t2;
	pReal[1 * stride] = t23 + t37;
	pImag[1 * stride] = t24 + t38;
	pReal[2 * stride] = t52 + t27;
	pImag[2 * stride] = t51 + t28;
	pReal[3 * stride] = t31;
	pImag[3 * stride] = t32;
	pReal[4 * stride] = t13 + t9;
	pImag[4 * stride] = t14 + t10;
	pReal[5 * stride] = t35 - t19;
	pImag[5 * stride] = t36 + t20;
	pReal[6 * stride] = t25;
	pImag[6 * stride] = t26;
	pReal[7 * stride] = t55 + t3;
	pImag[7 * stride] = t56 + t4;
	pReal[8 * stride] = t43 - t33;
	pImag[8 * stride] = t44 - t34;
	pReal[9 * stride] = t15;
	pImag[9 * stride] = t16;
	pReal[10 * stride] = t11 - t30;
	pImag[10 * stride] = t12 + t29;
	pReal[11 * stride] = t23 - t37;
	pImag[11 * stride] = t24 - t38;
	pReal[12 * stride] = t49;
	pImag[12 * stride] = t50;
	pReal[13 * stride] = t45 - t7;
	pImag[13 * stride] = t46 - t8;
	pReal[14 * stride] = t13 - t9;
	pImag[14 * stride] = t14 - t10;
	pReal[15 * stride] = t63;
	pImag[15 * stride] = t64;
	pReal[16 * stride] = t54 - t59;
	pImag[16 * stride] = t53 - t60;
	pReal[17 * stride] = t55 - t3;
	pImag[17 * stride] = t56 - t4;
	pReal[18 * stride] = t5;
	pImag[18 * stride] = t6;
	pReal[19 * stride] = t57 - t39;
	pImag[19 * stride] = t58 - t40;
	pReal[20 * stride] = t11 + t30;
	pImag[20 * stride] = t12 - t29;
	pReal[21 * stride] = t41;
	pImag[21 * stride] = t42;
	pReal[22 * stride] = t52 - t27;
	pImag[22 * stride] = t51 - t28;
	pReal[23 * stride] = t45 + t7;
	pImag[23 * stride] = t46 + t8;
	pReal[24 * stride] = t17;
	pImag[24 * stride] = t18;
	pReal[25 * stride] = t35 + t19;
	pImag[25 * stride] = t36 - t20;
	pReal[26 * stride] = t54 + t59;
	pImag[26 * stride] = t53 + t60;
	pReal[27 * stride] = t47;
	pImag[27 * stride] = t48;
	pReal[28 * stride] = t43 + t33;
	pImag[28 * stride] = t44 + t34;
	pReal[29 * stride] = t57 + t39;
	pImag[29 * stride] = t58 + t40;
}

template<> void StandardModule<float, 30>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 30>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
