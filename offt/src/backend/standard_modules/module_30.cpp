
//          Copyright Christian Volmer 2022, 2023.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

/*
	Number of additions       : 384
	Number of multiplications : 68
*/

template<> StandardModuleComplexity const StandardModule<float, 30>::Complexity = { 384, 68 };
template<> StandardModuleComplexity const StandardModule<double, 30>::Complexity = { 384, 68 };

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
	valueT t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
	valueT t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
	valueT t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
	valueT t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	valueT t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	valueT t60, t61, t62, t63, t64, t65, t66, t67, t68, t69;
	valueT t70, t71, t72, t73;

	phasors.Multiply(t0, t1, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t2, t3, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t4, t5, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t6, t7, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t8, t9, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t10, t11, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t12, t13, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t14, t15, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t16, t17, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t18, t19, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t20, t21, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t22, t23, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t24, t25, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t26, t27, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t28, t29, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t30, t31, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t32, t33, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t34, t35, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t36, t37, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
	phasors.Multiply(t38, t39, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
	phasors.Multiply(t40, t41, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
	phasors.Multiply(t42, t43, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
	phasors.Multiply(t44, t45, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
	phasors.Multiply(t46, t47, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
	phasors.Multiply(t48, t49, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);
	phasors.Multiply(t50, t51, pReal[25 * stride], pImag[25 * stride], twiddleStart + 25 * twiddleIncrement);
	phasors.Multiply(t52, t53, pReal[26 * stride], pImag[26 * stride], twiddleStart + 26 * twiddleIncrement);
	phasors.Multiply(t54, t55, pReal[27 * stride], pImag[27 * stride], twiddleStart + 27 * twiddleIncrement);
	phasors.Multiply(t56, t57, pReal[28 * stride], pImag[28 * stride], twiddleStart + 28 * twiddleIncrement);
	phasors.Multiply(t58, t59, pReal[29 * stride], pImag[29 * stride], twiddleStart + 29 * twiddleIncrement);

	t60 = t2 - t22;
	t61 = t3 - t23;
	t2 += t22;
	t3 += t23;
	t22 = t4 - t44;
	t23 = t5 - t45;
	t4 += t44;
	t5 += t45;
	t44 = t8 - t28;
	t45 = t9 - t29;
	t8 += t28;
	t9 += t29;
	t28 = t10 - t50;
	t29 = t11 - t51;
	t10 += t50;
	t11 += t51;
	t50 = t14 - t34;
	t51 = t15 - t35;
	t14 += t34;
	t15 += t35;
	t34 = t16 - t56;
	t35 = t17 - t57;
	t16 += t56;
	t17 += t57;
	t56 = t20 - t40;
	t57 = t21 - t41;
	t20 += t40;
	t21 += t41;
	t40 = t26 - t46;
	t41 = t27 - t47;
	t26 += t46;
	t27 += t47;
	t46 = t32 - t52;
	t47 = t33 - t53;
	t32 += t52;
	t33 += t53;
	t52 = t38 - t58;
	t53 = t39 - t59;
	t38 += t58;
	t39 += t59;
	t0 += t20;
	t1 += t21;
	t42 = t2 + t42;
	t43 = t3 + t43;
	t24 = t4 + t24;
	t25 = t5 + t25;
	t6 += t26;
	t7 += t27;
	t48 = t8 + t48;
	t49 = t9 + t49;
	t30 = t10 + t30;
	t31 = t11 + t31;
	t12 += t32;
	t13 += t33;
	t54 = t14 + t54;
	t55 = t15 + t55;
	t36 = t16 + t36;
	t37 = t17 + t37;
	t18 += t38;
	t19 += t39;
	t58 = t60 - t52;
	t59 = t61 - t53;
	t60 += t52;
	t61 += t53;
	t52 = t2 - t38;
	t53 = t3 - t39;
	t2 += t38;
	t3 += t39;
	t38 = t42 - t18;
	t39 = t43 - t19;
	t42 += t18;
	t43 += t19;
	t18 = t22 - t34;
	t19 = t23 - t35;
	t22 += t34;
	t23 += t35;
	t34 = t4 - t16;
	t35 = t5 - t17;
	t4 += t16;
	t5 += t17;
	t16 = t24 - t36;
	t17 = t25 - t37;
	t24 += t36;
	t25 += t37;
	t36 = t6 - t54;
	t37 = t7 - t55;
	t6 += t54;
	t7 += t55;
	t54 = t44 - t46;
	t55 = t45 - t47;
	t44 += t46;
	t45 += t47;
	t46 = t8 - t32;
	t47 = t9 - t33;
	t8 += t32;
	t9 += t33;
	t32 = t48 - t12;
	t33 = t49 - t13;
	t48 += t12;
	t49 += t13;
	t12 = t50 - t40;
	t13 = t51 - t41;
	t50 += t40;
	t51 += t41;
	t40 = t14 - t26;
	t41 = t15 - t27;
	t14 += t26;
	t15 += t27;
	t26 = t58 - t12;
	t27 = t59 - t13;
	t62 = t60 - t50;
	t63 = t61 - t51;
	t60 += t50;
	t61 += t51;
	t50 = t52 - t40;
	t51 = t53 - t41;
	t64 = t2 - t14;
	t65 = t3 - t15;
	t2 += t14;
	t3 += t15;
	t14 = t38 + t36;
	t15 = t39 + t37;
	t66 = t42 - t6;
	t67 = t43 - t7;
	t42 += t6;
	t43 += t7;
	t6 = t18 - t54;
	t7 = t19 - t55;
	t68 = t22 - t44;
	t69 = t23 - t45;
	t22 += t44;
	t23 += t45;
	t44 = t34 + t46;
	t45 = t35 + t47;
	t70 = t4 - t8;
	t71 = t5 - t9;
	t4 += t8;
	t5 += t9;
	t8 = t16 + t32;
	t9 = t17 + t33;
	t72 = t24 - t48;
	t73 = t25 - t49;
	t24 += t48;
	t25 += t49;
	t0 += t24;
	t1 += t25;
	t28 = t60 - t28;
	t29 = t61 - t29;
	t10 = t2 + t10;
	t11 = t3 + t11;
	t30 = t42 + t30;
	t31 = t43 + t31;
	t56 = t68 - t56;
	t57 = t69 - t57;
	t20 = t4 + t20;
	t21 = t5 + t21;
	t58 *= valueT(1.3326760640014591093);
	t59 *= valueT(1.3326760640014591093);
	t26 *= valueT(0.50903696045512718345);
	t27 *= valueT(0.50903696045512718345);
	t63 *= valueT(0.48412291827592711065);
	t62 *= valueT(0.48412291827592711065);
	t61 *= valueT(1.0825317547305483085);
	t60 *= valueT(1.0825317547305483085);
	t29 *= valueT(0.86602540378443864676);
	t28 *= valueT(0.86602540378443864676);
	t53 *= valueT(2.3082626528814400519);
	t52 *= valueT(2.3082626528814400519);
	t51 *= valueT(0.88167787843870969375);
	t50 *= valueT(0.88167787843870969375);
	t64 *= valueT(0.83852549156242113615);
	t65 *= valueT(0.83852549156242113615);
	t2 *= valueT(1.875);
	t3 *= valueT(1.875);
	t10 *= valueT(1.5);
	t11 *= valueT(1.5);
	t39 *= valueT(1.5388417685876267013);
	t38 *= valueT(1.5388417685876267013);
	t15 *= valueT(0.58778525229247312917);
	t14 *= valueT(0.58778525229247312917);
	t66 *= valueT(0.5590169943749474241);
	t67 *= valueT(0.5590169943749474241);
	t42 *= valueT(1.25);
	t43 *= valueT(1.25);
	t18 *= valueT(0.31460214309120474243);
	t19 *= valueT(0.31460214309120474243);
	t6 *= valueT(0.50903696045512718345);
	t7 *= valueT(0.50903696045512718345);
	t69 *= valueT(1.0825317547305483085);
	t68 *= valueT(1.0825317547305483085);
	t57 *= valueT(0.86602540378443864676);
	t56 *= valueT(0.86602540378443864676);
	t23 *= valueT(0.48412291827592711065);
	t22 *= valueT(0.48412291827592711065);
	t35 *= valueT(0.54490689600402066442);
	t34 *= valueT(0.54490689600402066442);
	t45 *= valueT(0.88167787843870969375);
	t44 *= valueT(0.88167787843870969375);
	t70 *= valueT(0.83852549156242113615);
	t71 *= valueT(0.83852549156242113615);
	t4 *= valueT(1.875);
	t5 *= valueT(1.875);
	t20 *= valueT(1.5);
	t21 *= valueT(1.5);
	t17 *= valueT(0.36327126400268044295);
	t16 *= valueT(0.36327126400268044295);
	t9 *= valueT(0.58778525229247312917);
	t8 *= valueT(0.58778525229247312917);
	t72 *= valueT(0.5590169943749474241);
	t73 *= valueT(0.5590169943749474241);
	t24 *= valueT(1.25);
	t25 *= valueT(1.25);
	t37 *= valueT(0.36327126400268044295);
	t36 *= valueT(0.36327126400268044295);
	t54 *= valueT(1.3326760640014591093);
	t55 *= valueT(1.3326760640014591093);
	t47 *= valueT(2.3082626528814400519);
	t46 *= valueT(2.3082626528814400519);
	t33 *= valueT(1.5388417685876267013);
	t32 *= valueT(1.5388417685876267013);
	t12 *= valueT(0.31460214309120474243);
	t13 *= valueT(0.31460214309120474243);
	t41 *= valueT(0.54490689600402066442);
	t40 *= valueT(0.54490689600402066442);
	t24 = t0 - t24;
	t25 = t1 - t25;
	t61 -= t29;
	t60 -= t28;
	t2 -= t10;
	t3 -= t11;
	t42 -= t30;
	t43 -= t31;
	t69 -= t57;
	t68 -= t56;
	t4 -= t20;
	t5 -= t21;
	t48 = t24 + t72;
	t49 = t25 + t73;
	t24 -= t72;
	t25 -= t73;
	t58 -= t26;
	t59 -= t27;
	t26 -= t12;
	t27 -= t13;
	t12 = t63 + t61;
	t13 = t62 + t60;
	t63 -= t61;
	t62 -= t60;
	t53 -= t51;
	t52 -= t50;
	t51 -= t41;
	t50 -= t40;
	t40 = t64 + t2;
	t41 = t65 + t3;
	t64 -= t2;
	t65 -= t3;
	t39 -= t15;
	t38 -= t14;
	t15 += t37;
	t14 += t36;
	t2 = t66 + t42;
	t3 = t67 + t43;
	t66 -= t42;
	t67 -= t43;
	t18 += t6;
	t19 += t7;
	t6 += t54;
	t7 += t55;
	t36 = t69 - t23;
	t37 = t68 - t22;
	t69 += t23;
	t68 += t22;
	t35 += t45;
	t34 += t44;
	t45 -= t47;
	t44 -= t46;
	t22 = t70 - t4;
	t23 = t71 - t5;
	t70 += t4;
	t71 += t5;
	t17 += t9;
	t16 += t8;
	t9 -= t33;
	t8 -= t32;
	t4 = t48 - t17;
	t5 = t49 + t16;
	t48 += t17;
	t49 -= t16;
	t16 = t24 + t9;
	t17 = t25 - t8;
	t24 -= t9;
	t25 += t8;
	t8 = t58 - t63;
	t9 = t59 + t62;
	t58 += t63;
	t59 -= t62;
	t32 = t26 + t12;
	t33 = t27 - t13;
	t26 -= t12;
	t27 += t13;
	t12 = t53 + t64;
	t13 = t52 - t65;
	t53 -= t64;
	t52 += t65;
	t42 = t51 - t40;
	t43 = t50 + t41;
	t51 += t40;
	t50 -= t41;
	t40 = t39 + t66;
	t41 = t38 - t67;
	t39 -= t66;
	t38 += t67;
	t46 = t15 - t2;
	t47 = t14 + t3;
	t15 += t2;
	t14 -= t3;
	t2 = t18 - t36;
	t3 = t19 + t37;
	t18 += t36;
	t19 -= t37;
	t36 = t6 + t69;
	t37 = t7 - t68;
	t6 -= t69;
	t7 += t68;
	t54 = t35 - t22;
	t55 = t34 + t23;
	t35 += t22;
	t34 -= t23;
	t22 = t45 - t70;
	t23 = t44 + t71;
	t45 += t70;
	t44 -= t71;
	t60 = t0 - t30;
	t61 = t1 - t31;
	t0 += t30;
	t1 += t31;
	t30 = t4 - t46;
	t31 = t5 + t47;
	t4 += t46;
	t5 -= t47;
	t46 = t48 + t15;
	t47 = t49 - t14;
	t48 -= t15;
	t49 += t14;
	t14 = t16 - t40;
	t15 = t17 + t41;
	t16 += t40;
	t17 -= t41;
	t40 = t24 + t39;
	t41 = t25 - t38;
	t24 -= t39;
	t25 += t38;
	t38 = t8 + t36;
	t39 = t9 + t37;
	t8 -= t36;
	t9 -= t37;
	t36 = t58 + t6;
	t37 = t59 + t7;
	t58 -= t6;
	t59 -= t7;
	t6 = t32 - t2;
	t7 = t33 - t3;
	t32 += t2;
	t33 += t3;
	t2 = t26 - t18;
	t3 = t27 - t19;
	t26 += t18;
	t27 += t19;
	t18 = t29 + t57;
	t19 = t28 + t56;
	t29 -= t57;
	t28 -= t56;
	t56 = t12 - t22;
	t57 = t13 - t23;
	t12 += t22;
	t13 += t23;
	t22 = t53 - t45;
	t23 = t52 - t44;
	t53 += t45;
	t52 += t44;
	t44 = t42 + t54;
	t45 = t43 + t55;
	t42 -= t54;
	t43 -= t55;
	t54 = t51 + t35;
	t55 = t50 + t34;
	t51 -= t35;
	t50 -= t34;
	t34 = t10 - t20;
	t35 = t11 - t21;
	t10 += t20;
	t11 += t21;
	t34 = t60 + t34;
	t35 = t61 + t35;
	t10 = t0 - t10;
	t11 = t1 - t11;
	t44 = t30 + t44;
	t45 = t31 - t45;
	t42 = t4 - t42;
	t43 = t5 + t43;
	t54 = t46 - t54;
	t55 = t47 + t55;
	t51 = t48 + t51;
	t50 = t49 - t50;
	t56 = t14 + t56;
	t57 = t15 - t57;
	t12 = t16 - t12;
	t13 = t17 + t13;
	t22 = t40 - t22;
	t23 = t41 + t23;
	t53 = t24 + t53;
	t52 = t25 - t52;
	pReal[0 * stride] = t0;
	pImag[0 * stride] = t1;
	pReal[1 * stride] = t22 + t36;
	pImag[1 * stride] = t23 + t37;
	pReal[2 * stride] = t51 + t26;
	pImag[2 * stride] = t50 + t27;
	pReal[3 * stride] = t30;
	pImag[3 * stride] = t31;
	pReal[4 * stride] = t12 + t8;
	pImag[4 * stride] = t13 + t9;
	pReal[5 * stride] = t34 - t18;
	pImag[5 * stride] = t35 + t19;
	pReal[6 * stride] = t24;
	pImag[6 * stride] = t25;
	pReal[7 * stride] = t54 + t2;
	pImag[7 * stride] = t55 + t3;
	pReal[8 * stride] = t42 - t32;
	pImag[8 * stride] = t43 - t33;
	pReal[9 * stride] = t14;
	pImag[9 * stride] = t15;
	pReal[10 * stride] = t10 - t29;
	pImag[10 * stride] = t11 + t28;
	pReal[11 * stride] = t22 - t36;
	pImag[11 * stride] = t23 - t37;
	pReal[12 * stride] = t48;
	pImag[12 * stride] = t49;
	pReal[13 * stride] = t44 - t6;
	pImag[13 * stride] = t45 - t7;
	pReal[14 * stride] = t12 - t8;
	pImag[14 * stride] = t13 - t9;
	pReal[15 * stride] = t60;
	pImag[15 * stride] = t61;
	pReal[16 * stride] = t53 - t58;
	pImag[16 * stride] = t52 - t59;
	pReal[17 * stride] = t54 - t2;
	pImag[17 * stride] = t55 - t3;
	pReal[18 * stride] = t4;
	pImag[18 * stride] = t5;
	pReal[19 * stride] = t56 - t38;
	pImag[19 * stride] = t57 - t39;
	pReal[20 * stride] = t10 + t29;
	pImag[20 * stride] = t11 - t28;
	pReal[21 * stride] = t40;
	pImag[21 * stride] = t41;
	pReal[22 * stride] = t51 - t26;
	pImag[22 * stride] = t50 - t27;
	pReal[23 * stride] = t44 + t6;
	pImag[23 * stride] = t45 + t7;
	pReal[24 * stride] = t16;
	pImag[24 * stride] = t17;
	pReal[25 * stride] = t34 + t18;
	pImag[25 * stride] = t35 - t19;
	pReal[26 * stride] = t53 + t58;
	pImag[26 * stride] = t52 + t59;
	pReal[27 * stride] = t46;
	pImag[27 * stride] = t47;
	pReal[28 * stride] = t42 + t32;
	pImag[28 * stride] = t43 + t33;
	pReal[29 * stride] = t56 + t38;
	pImag[29 * stride] = t57 + t39;
}

template<> void StandardModule<float, 30>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 30>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
