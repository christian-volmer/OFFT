
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
	valueT t11, t12, t13, t14, t15, t16, t17, t18, t19, t20;
	valueT t21, t22, t23, t24, t25, t26, t27, t28, t29, t30;
	valueT t31, t32, t33, t34, t35, t36, t37, t38, t39, t40;
	valueT t41, t42, t43, t44, t45, t46, t47, t48, t49, t50;
	valueT t51, t52, t55, t56, t57, t58, t59, t60, t61, t62;
	valueT t63, t64, t65, t66, t67, t68, t69, t70, t71, t72;
	valueT t73, t74, t75, t76, t77, t78, t79, t80, t81, t82;
	valueT t83, t84, t85, t86;

	phasors.Multiply(t1, t2, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t3, t4, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t5, t6, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t7, t8, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t9, t10, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t11, t12, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t13, t14, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t15, t16, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t17, t18, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t19, t20, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t21, t22, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t23, t24, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t25, t26, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t27, t28, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t29, t30, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t31, t32, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t33, t34, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t35, t36, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t37, t38, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
	phasors.Multiply(t39, t40, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
	phasors.Multiply(t41, t42, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
	phasors.Multiply(t43, t44, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
	phasors.Multiply(t45, t46, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
	phasors.Multiply(t47, t48, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
	phasors.Multiply(t49, t50, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);
	phasors.Multiply(t51, t52, pReal[25 * stride], pImag[25 * stride], twiddleStart + 25 * twiddleIncrement);

	t55 = t3 - t51;
	t56 = t4 - t52;
	t3 += t51;
	t4 += t52;
	t51 = t5 - t49;
	t52 = t6 - t50;
	t5 += t49;
	t6 += t50;
	t49 = t7 - t47;
	t50 = t8 - t48;
	t7 += t47;
	t8 += t48;
	t47 = t9 - t45;
	t48 = t10 - t46;
	t9 += t45;
	t10 += t46;
	t45 = t11 - t43;
	t46 = t12 - t44;
	t11 += t43;
	t12 += t44;
	t43 = t13 - t41;
	t44 = t14 - t42;
	t13 += t41;
	t14 += t42;
	t41 = t15 - t39;
	t42 = t16 - t40;
	t15 += t39;
	t16 += t40;
	t39 = t17 - t37;
	t40 = t18 - t38;
	t17 += t37;
	t18 += t38;
	t37 = t19 - t35;
	t38 = t20 - t36;
	t19 += t35;
	t20 += t36;
	t35 = t21 - t33;
	t36 = t22 - t34;
	t21 += t33;
	t22 += t34;
	t33 = t23 - t31;
	t34 = t24 - t32;
	t23 += t31;
	t24 += t32;
	t31 = t25 - t29;
	t32 = t26 - t30;
	t25 += t29;
	t26 += t30;
	t29 = t55 - t49;
	t30 = t56 - t50;
	t49 = t55 + t49 + t37;
	t50 = t56 + t50 + t38;
	t55 -= t37;
	t56 -= t38;
	t37 = t3 - t11;
	t38 = t4 - t12;
	t3 += t11;
	t4 += t12;
	t11 = t51 - t43;
	t12 = t52 - t44;
	t51 += t43 - t39;
	t52 += t44 - t40;
	t57 = t5 - t21;
	t58 = t6 - t22;
	t5 += t21;
	t6 += t22;
	t21 = t7 - t23;
	t22 = t8 - t24;
	t7 += t23;
	t8 += t24;
	t23 = t47 + t35 + t31;
	t24 = t48 + t36 + t32;
	t47 -= t31;
	t48 -= t32;
	t59 = t9 - t13;
	t60 = t10 - t14;
	t9 += t13;
	t10 += t14;
	t13 = t45 + t41;
	t14 = t46 + t42;
	t45 -= t41 + t33;
	t46 -= t42 + t34;
	t43 += t39;
	t44 += t40;
	t41 -= t33;
	t42 -= t34;
	t33 = t15 - t19;
	t34 = t16 - t20;
	t15 += t19;
	t16 += t20;
	t19 = t17 - t25;
	t20 = t18 - t26;
	t17 += t25;
	t18 += t26;
	t35 -= t31;
	t36 -= t32;
	t25 = t29 + t55;
	t26 = t30 + t56;
	t31 = t49 + t45;
	t32 = t50 + t46;
	t39 = t37 - t21;
	t40 = t38 - t22;
	t21 = t37 + t21 - t33;
	t22 = t38 + t22 - t34;
	t37 += t33;
	t38 += t34;
	t33 = t3 - t7;
	t34 = t4 - t8;
	t61 = t3 + t7 + t15;
	t62 = t4 + t8 + t16;
	t3 -= t15;
	t4 -= t16;
	t63 = t11 - t43;
	t64 = t12 - t44;
	t65 = t51 - t23;
	t66 = t52 - t24;
	t67 = t57 - t59 + t19;
	t68 = t58 - t60 + t20;
	t57 -= t19;
	t58 -= t20;
	t69 = t5 - t9;
	t70 = t6 - t10;
	t71 = t5 + t9 + t17;
	t72 = t6 + t10 + t18;
	t5 -= t17;
	t6 -= t18;
	t7 -= t15;
	t8 -= t16;
	t15 = t47 + t35;
	t16 = t48 + t36;
	t59 += t19;
	t60 += t20;
	t9 -= t17;
	t10 -= t18;
	t17 = t13 + t41;
	t18 = t14 + t42;
	t1 += t71;
	t2 += t72;
	t19 = t29 - t13;
	t20 = t30 - t14;
	t73 = t25 - t17;
	t74 = t26 - t18;
	t75 = t55 - t41;
	t76 = t56 - t42;
	t77 = t39 + t37;
	t78 = t40 + t38;
	t27 = t61 + t27;
	t28 = t62 + t28;
	t79 = t11 - t47;
	t80 = t12 - t48;
	t81 = t63 - t15;
	t82 = t64 - t16;
	t83 = t57 - t59;
	t84 = t58 - t60;
	t85 = t43 + t35;
	t86 = t44 + t36;
	t30 *= valueT(0.10417870810104801192);
	t29 *= valueT(0.10417870810104801192);
	t20 *= valueT(0.42380699395323743523);
	t19 *= valueT(0.42380699395323743523);
	t26 *= valueT(0.73058834417912600679);
	t25 *= valueT(0.73058834417912600679);
	t74 *= valueT(0.087981928766792081008);
	t73 *= valueT(0.087981928766792081008);
	t50 *= valueT(0.40100212832186721636);
	t49 *= valueT(0.40100212832186721636);
	t32 *= valueT(0.57514072947400312137);
	t31 *= valueT(0.57514072947400312137);
	t56 *= valueT(2.0875863244363300084);
	t55 *= valueT(2.0875863244363300084);
	t76 *= valueT(0.1598612076528611922);
	t75 *= valueT(0.1598612076528611922);
	t39 *= valueT(1.0407474201500718718);
	t40 *= valueT(1.0407474201500718718);
	t77 *= valueT(0.52422663952658214901);
	t78 *= valueT(0.52422663952658214901);
	t21 *= valueT(0.30046260628866577443);
	t22 *= valueT(0.30046260628866577443);
	t37 *= valueT(0.53193249842967457518);
	t38 *= valueT(0.53193249842967457518);
	t33 *= valueT(0.57944001890096049323);
	t34 *= valueT(0.57944001890096049323);
	t61 *= valueT(1.0833333333333333333);
	t62 *= valueT(1.0833333333333333333);
	t3 *= valueT(0.15180597207438773197);
	t4 *= valueT(0.15180597207438773197);
	t12 *= valueT(1.5596006223820445613);
	t11 *= valueT(1.5596006223820445613);
	t80 *= valueT(0.1598612076528611922);
	t79 *= valueT(0.1598612076528611922);
	t64 *= valueT(1.0211729150707586474);
	t63 *= valueT(1.0211729150707586474);
	t82 *= valueT(0.087981928766792081008);
	t81 *= valueT(0.087981928766792081008);
	t52 *= valueT(0.74927933062613902637);
	t51 *= valueT(0.74927933062613902637);
	t66 *= valueT(0.57514072947400312137);
	t65 *= valueT(0.57514072947400312137);
	t67 *= valueT(0.30046260628866577443);
	t68 *= valueT(0.30046260628866577443);
	t57 *= valueT(1.0407474201500718718);
	t58 *= valueT(1.0407474201500718718);
	t83 *= valueT(0.52422663952658214901);
	t84 *= valueT(0.52422663952658214901);
	t69 *= valueT(0.42763404682657276126);
	t70 *= valueT(0.42763404682657276126);
	t71 *= valueT(1.0833333333333333333);
	t72 *= valueT(1.0833333333333333333);
	t5 *= valueT(0.57944001890096049323);
	t6 *= valueT(0.57944001890096049323);
	t7 *= valueT(0.42763404682657276126);
	t8 *= valueT(0.42763404682657276126);
	t24 *= valueT(0.40100212832186721636);
	t23 *= valueT(0.40100212832186721636);
	t48 *= valueT(2.0875863244363300084);
	t47 *= valueT(2.0875863244363300084);
	t16 *= valueT(0.73058834417912600679);
	t15 *= valueT(0.73058834417912600679);
	t59 *= valueT(0.53193249842967457518);
	t60 *= valueT(0.53193249842967457518);
	t9 *= valueT(0.15180597207438773197);
	t10 *= valueT(0.15180597207438773197);
	t14 *= valueT(1.503918122830231381);
	t13 *= valueT(1.503918122830231381);
	t18 *= valueT(1.0211729150707586474);
	t17 *= valueT(1.0211729150707586474);
	t46 *= valueT(0.74927933062613902637);
	t45 *= valueT(0.74927933062613902637);
	t44 *= valueT(1.503918122830231381);
	t43 *= valueT(1.503918122830231381);
	t86 *= valueT(0.42380699395323743523);
	t85 *= valueT(0.42380699395323743523);
	t42 *= valueT(1.5596006223820445613);
	t41 *= valueT(1.5596006223820445613);
	t36 *= valueT(0.10417870810104801192);
	t35 *= valueT(0.10417870810104801192);
	t71 = t1 - t71;
	t72 = t2 - t72;
	t30 += t20;
	t29 += t19;
	t20 -= t14;
	t19 -= t13;
	t26 += t74;
	t25 += t73;
	t74 -= t18;
	t73 -= t17;
	t56 -= t76;
	t55 -= t75;
	t76 += t42;
	t75 += t41;
	t39 -= t77;
	t40 -= t78;
	t77 -= t37;
	t78 -= t38;
	t61 -= t27;
	t62 -= t28;
	t12 -= t80;
	t11 -= t79;
	t80 += t48;
	t79 += t47;
	t64 += t82;
	t63 += t81;
	t82 -= t16;
	t81 -= t15;
	t57 -= t83;
	t58 -= t84;
	t83 += t59;
	t84 += t60;
	t44 += t86;
	t43 += t85;
	t86 += t36;
	t85 += t35;
	t13 = t71 - t69 + t5;
	t14 = t72 - t70 + t6;
	t69 = t71 + t69 - t9;
	t70 = t72 + t70 - t10;
	t71 -= t5 - t9;
	t72 -= t6 - t10;
	t30 -= t26;
	t29 -= t25;
	t20 -= t74;
	t19 -= t73;
	t26 -= t56;
	t25 -= t55;
	t74 += t76;
	t73 += t75;
	t50 -= t32;
	t49 -= t31;
	t32 -= t46;
	t31 -= t45;
	t5 = t39 - t77 + t21;
	t6 = t40 - t78 + t22;
	t39 -= t21;
	t40 -= t22;
	t77 += t21;
	t78 += t22;
	t9 = t33 - t61 - t3;
	t10 = t34 - t62 - t4;
	t33 += t61 + t7;
	t34 += t62 + t8;
	t61 -= t3 + t7;
	t62 -= t4 + t8;
	t12 -= t64;
	t11 -= t63;
	t80 += t82;
	t79 += t81;
	t64 += t44;
	t63 += t43;
	t82 += t86;
	t81 += t85;
	t52 -= t66;
	t51 -= t65;
	t66 += t24;
	t65 += t23;
	t3 = t67 + t57;
	t4 = t68 + t58;
	t57 = t67 - t57 + t83;
	t58 = t68 - t58 + t84;
	t67 -= t83;
	t68 -= t84;
	t7 = t13 - t3;
	t8 = t14 - t4;
	t13 += t3;
	t14 += t4;
	t3 = t69 + t67;
	t4 = t70 + t68;
	t69 -= t67;
	t70 -= t68;
	t15 = t71 - t57;
	t16 = t72 - t58;
	t71 += t57;
	t72 += t58;
	t17 = t30 - t26 + t50;
	t18 = t29 - t25 + t49;
	t30 -= t50;
	t29 -= t49;
	t21 = t20 - t74 - t32;
	t22 = t19 - t73 - t31;
	t20 += t32;
	t19 += t31;
	t26 += t50;
	t25 += t49;
	t74 -= t32;
	t73 -= t31;
	t23 = t5 + t9;
	t24 = t6 + t10;
	t5 -= t9;
	t6 -= t10;
	t9 = t39 + t33;
	t10 = t40 + t34;
	t39 -= t33;
	t40 -= t34;
	t31 = t77 + t61;
	t32 = t78 + t62;
	t77 -= t61;
	t78 -= t62;
	t33 = t12 - t64 - t52;
	t34 = t11 - t63 - t51;
	t12 += t52;
	t11 += t51;
	t35 = t80 + t82 - t66;
	t36 = t79 + t81 - t65;
	t80 += t66;
	t79 += t65;
	t64 -= t52;
	t63 -= t51;
	t82 += t66;
	t81 += t65;
	t37 = t7 - t82;
	t38 = t8 + t81;
	t7 += t82;
	t8 -= t81;
	t41 = t13 + t12;
	t42 = t14 - t11;
	t13 -= t12;
	t14 += t11;
	t11 = t3 + t33;
	t12 = t4 - t34;
	t3 -= t33;
	t4 += t34;
	t33 = t69 - t80;
	t34 = t70 + t79;
	t69 += t80;
	t70 -= t79;
	t43 = t15 + t35;
	t44 = t16 - t36;
	t15 -= t35;
	t16 += t36;
	t35 = t71 - t64;
	t36 = t72 + t63;
	t71 += t64;
	t72 -= t63;
	t45 = t17 + t23;
	t46 = t18 - t24;
	t17 -= t23;
	t18 += t24;
	t23 = t30 + t9;
	t24 = t29 - t10;
	t30 -= t9;
	t29 += t10;
	t9 = t21 + t31;
	t10 = t22 - t32;
	t21 -= t31;
	t22 += t32;
	t31 = t20 + t5;
	t32 = t19 - t6;
	t20 -= t5;
	t19 += t6;
	t5 = t26 + t77;
	t6 = t25 - t78;
	t26 -= t77;
	t25 += t78;
	t47 = t74 + t39;
	t48 = t73 - t40;
	t74 -= t39;
	t73 += t40;
	pReal[0 * stride] = t1 + t27;
	pImag[0 * stride] = t2 + t28;
	pReal[1 * stride] = t13 + t74;
	pImag[1 * stride] = t14 - t73;
	pReal[2 * stride] = t33 + t5;
	pImag[2 * stride] = t34 - t6;
	pReal[3 * stride] = t11 + t9;
	pImag[3 * stride] = t12 - t10;
	pReal[4 * stride] = t35 - t31;
	pImag[4 * stride] = t36 + t32;
	pReal[5 * stride] = t37 + t23;
	pImag[5 * stride] = t38 - t24;
	pReal[6 * stride] = t43 + t45;
	pImag[6 * stride] = t44 - t46;
	pReal[7 * stride] = t15 + t17;
	pImag[7 * stride] = t16 - t18;
	pReal[8 * stride] = t7 + t30;
	pImag[8 * stride] = t8 - t29;
	pReal[9 * stride] = t71 - t20;
	pImag[9 * stride] = t72 + t19;
	pReal[10 * stride] = t3 + t21;
	pImag[10 * stride] = t4 - t22;
	pReal[11 * stride] = t69 + t26;
	pImag[11 * stride] = t70 - t25;
	pReal[12 * stride] = t41 + t47;
	pImag[12 * stride] = t42 - t48;
	pReal[13 * stride] = t1 - t27;
	pImag[13 * stride] = t2 - t28;
	pReal[14 * stride] = t13 - t74;
	pImag[14 * stride] = t14 + t73;
	pReal[15 * stride] = t33 - t5;
	pImag[15 * stride] = t34 + t6;
	pReal[16 * stride] = t11 - t9;
	pImag[16 * stride] = t12 + t10;
	pReal[17 * stride] = t35 + t31;
	pImag[17 * stride] = t36 - t32;
	pReal[18 * stride] = t37 - t23;
	pImag[18 * stride] = t38 + t24;
	pReal[19 * stride] = t43 - t45;
	pImag[19 * stride] = t44 + t46;
	pReal[20 * stride] = t15 - t17;
	pImag[20 * stride] = t16 + t18;
	pReal[21 * stride] = t7 - t30;
	pImag[21 * stride] = t8 + t29;
	pReal[22 * stride] = t71 + t20;
	pImag[22 * stride] = t72 - t19;
	pReal[23 * stride] = t3 - t21;
	pImag[23 * stride] = t4 + t22;
	pReal[24 * stride] = t69 - t26;
	pImag[24 * stride] = t70 + t25;
	pReal[25 * stride] = t41 - t47;
	pImag[25 * stride] = t42 + t48;
}

template<> void StandardModule<float, 26>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 26>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
