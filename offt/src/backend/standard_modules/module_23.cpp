
//          Copyright Christian Volmer 2022, 2023.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

/*
	Number of additions       : 0
	Number of multiplications : 0
*/

template<> StandardModuleComplexity const StandardModule<float, 23>::Complexity = { 0, 0 };
template<> StandardModuleComplexity const StandardModule<double, 23>::Complexity = { 0, 0 };

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT r23, i23, r25, i25, r46, i46, r35, i35, r34, i34;
	valueT r33, i33, r32, i32, r31, i31, r30, i30, r29, i29;
	valueT r28, i28, r27, i27, r26, i26, r61, i61, r60, i60;
	valueT r62, i62, r63, i63, r64, i64, r65, i65, r66, i66;
	valueT r67, i67, r68, i68, r59, i59, r69, i69, r281, i281;
	valueT r300, i300, r104, i104, r103, i103, r100, i100, r99, i99;
	valueT r86, i86, r302, i302, r96, i96, r83, i83, r95, i95;
	valueT r266, i266, r304, i304, r377, i377, r379, i379, r296, i296;
	valueT r297, i297, r279, i279, r155, i155, r356, i356, r320, i320;
	valueT r352, i352, r351, i351, r387, i387, r374, i374, r373, i373;
	valueT r386, i386, r394, i394, r401, i401, r407, i407, r489, i489;
	valueT r488, i488, r476, i476, r512, i512, r507, i507, r514, i514;
	valueT r533, i533, r538, i538, r532, i532, r531, i531, r534, i534;
	valueT r539, i539, r535, i535, r536, i536, r529, i529, r537, i537;
	valueT r530, i530, r523, i523, r519, i519, r525, i525, r528, i528;
	valueT r520, i520, r524, i524, r522, i522, r521, i521, r518, i518;
	valueT r527, i527;

	phasors.Multiply(r23, i23, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
	{
		valueT s1r, s1i;
		phasors.Multiply(s1r, s1i, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
		r25 = s1r - r23;
		i25 = s1i - i23;
		r46 = r23 + s1r;
		i46 = i23 + s1i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i, s25r, s25i;
		valueT s26r, s26i, s27r, s27i, s28r, s28i, s29r, s29i, s30r, s30i;
		phasors.Multiply(s1r, s1i, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
		phasors.Multiply(s2r, s2i, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
		phasors.Multiply(s3r, s3i, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
		phasors.Multiply(s4r, s4i, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
		phasors.Multiply(s5r, s5i, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
		phasors.Multiply(s6r, s6i, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
		phasors.Multiply(s7r, s7i, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
		phasors.Multiply(s8r, s8i, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
		phasors.Multiply(s9r, s9i, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
		phasors.Multiply(s10r, s10i, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
		phasors.Multiply(s11r, s11i, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
		phasors.Multiply(s12r, s12i, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
		phasors.Multiply(s13r, s13i, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
		phasors.Multiply(s14r, s14i, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
		phasors.Multiply(s15r, s15i, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
		phasors.Multiply(s16r, s16i, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
		phasors.Multiply(s17r, s17i, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
		phasors.Multiply(s18r, s18i, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
		phasors.Multiply(s19r, s19i, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
		phasors.Multiply(s20r, s20i, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
		r35 = s10r - s11r;
		i35 = s10i - s11i;
		s21r = s10r + s11r;
		s21i = s10i + s11i;
		r34 = s9r - s12r;
		i34 = s9i - s12i;
		s22r = s9r + s12r;
		s22i = s9i + s12i;
		r33 = s8r - s13r;
		i33 = s8i - s13i;
		s23r = s8r + s13r;
		s23i = s8i + s13i;
		r32 = s7r - s14r;
		i32 = s7i - s14i;
		s24r = s7r + s14r;
		s24i = s7i + s14i;
		r31 = s6r - s15r;
		i31 = s6i - s15i;
		s25r = s6r + s15r;
		s25i = s6i + s15i;
		r30 = s5r - s16r;
		i30 = s5i - s16i;
		s26r = s5r + s16r;
		s26i = s5i + s16i;
		r29 = s4r - s17r;
		i29 = s4i - s17i;
		s27r = s4r + s17r;
		s27i = s4i + s17i;
		r28 = s3r - s18r;
		i28 = s3i - s18i;
		s28r = s3r + s18r;
		s28i = s3i + s18i;
		r27 = s2r - s19r;
		i27 = s2i - s19i;
		s29r = s2r + s19r;
		s29i = s2i + s19i;
		r26 = s1r - s20r;
		i26 = s1i - s20i;
		s30r = s1r + s20r;
		s30i = s1i + s20i;
		r61 = s23r - s21r;
		i61 = s23i - s21i;
		r60 = s22r - s23r;
		i60 = s22i - s23i;
		r62 = s24r - s23r;
		i62 = s24i - s23i;
		r63 = s25r - s23r;
		i63 = s25i - s23i;
		r64 = s26r - s23r;
		i64 = s26i - s23i;
		r65 = s27r - s23r;
		i65 = s27i - s23i;
		r66 = s28r - s23r;
		i66 = s28i - s23i;
		r67 = s29r - s23r;
		i67 = s29i - s23i;
		r68 = s30r - s23r;
		i68 = s30i - s23i;
		r59 = r46 + s21r + s22r + s23r + s24r + s25r + s26r + s27r + s28r + s29r + s30r;
		i59 = i46 + s21i + s22i + s23i + s24i + s25i + s26i + s27i + s28i + s29i + s30i;
		r69 = r46 - s23r;
		i69 = i46 - s23i;
	}
	r281 = r65 - r62;
	i281 = i65 - i62;
	r300 = valueT(-0.50843790875019616533) * r65;
	i300 = valueT(-0.50843790875019616533) * i65;
	r104 = -r65 - r66;
	i104 = -i65 - i66;
	r103 = r65 - r66;
	i103 = i65 - i66;
	r100 = r62 - r67;
	i100 = i62 - i67;
	r99 = -r63 - r67;
	i99 = -i63 - i67;
	r86 = r63 - r67;
	i86 = i63 - i67;
	r302 = valueT(-0.97916730375705359692) * r67;
	i302 = valueT(-0.97916730375705359692) * i67;
	r96 = r60 - r69;
	i96 = i60 - i69;
	r83 = r60 + r69;
	i83 = i60 + i69;
	r95 = r65 - r69;
	i95 = i65 - i69;
	r266 = r69 - r67;
	i266 = i69 - i67;
	r304 = valueT(0.7507955565833250588) * r69;
	i304 = valueT(0.7507955565833250588) * i69;
	{
		valueT s1r, s1i;
		s1r = valueT(1.0605004792966461433) * r266;
		s1i = valueT(1.0605004792966461433) * i266;
		r377 = r302 - s1r;
		i377 = i302 - s1i;
		r379 = r304 + s1r;
		i379 = i304 + s1i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i, s25r, s25i;
		valueT s26r, s26i, s27r, s27i, s28r, s28i, s29r, s29i, s30r, s30i;
		valueT s31r, s31i, s32r, s32i, s33r, s33i, s34r, s34i, s35r, s35i;
		valueT s36r, s36i, s37r, s37i, s38r, s38i, s39r, s39i, s40r, s40i;
		valueT s41r, s41i, s42r, s42i, s43r, s43i, s44r, s44i, s45r, s45i;
		valueT s46r, s46i, s47r, s47i, s48r, s48i, s49r, s49i, s50r, s50i;
		valueT s51r, s51i, s52r, s52i, s53r, s53i, s54r, s54i, s55r, s55i;
		valueT s56r, s56i, s57r, s57i, s58r, s58i, s59r, s59i, s60r, s60i;
		valueT s61r, s61i, s62r, s62i, s63r, s63i;
		r296 = valueT(-0.65096339149385476267) * r61;
		i296 = valueT(-0.65096339149385476267) * i61;
		s1r = -r61 - r62;
		s1i = -i61 - i62;
		s2r = r61 - r62;
		s2i = i61 - i62;
		r297 = valueT(0.75946127429516550514) * r62;
		i297 = valueT(0.75946127429516550514) * i62;
		r279 = r61 + r66;
		i279 = i61 + i66;
		s3r = s1r - r64;
		s3i = s1i - i64;
		r155 = r64 + s2r;
		i155 = i64 + s2i;
		r356 = valueT(0.78013633516750093113) * r281;
		i356 = valueT(0.78013633516750093113) * i281;
		s4r = -r68 - r104;
		s4i = -i68 - i104;
		s5r = r68 + r103;
		s5i = i68 + i103;
		s6r = valueT(0.75946127429516550514) * r100;
		s6i = valueT(0.75946127429516550514) * i100;
		s7r = r99 + s2r - r64;
		s7i = i99 + s2i - i64;
		s8r = r64 + r99;
		s8i = i64 + i99;
		s9r = s2r - r99;
		s9i = s2i - i99;
		s10r = r64 + r86;
		s10i = i64 + i86;
		s11r = r64 + s1r - r86;
		s11i = i64 + s1i - i86;
		s12r = r103 + r96 - r68;
		s12i = i103 + i96 - i68;
		s13r = r68 + r96;
		s13i = i68 + i96;
		s14r = r83 - r68;
		s14i = i83 - i68;
		s15r = r68 + r83 - r104;
		s15i = i68 + i83 - i104;
		s16r = r104 + r83;
		s16i = i104 + i83;
		s17r = r100 - r95;
		s17i = i100 - i95;
		s18r = valueT(-0.50843790875019616533) * r95;
		s18i = valueT(-0.50843790875019616533) * i95;
		r320 = valueT(-0.99276639557039045688) * s3r;
		i320 = valueT(-0.99276639557039045688) * s3i;
		s19r = r300 + r356;
		s19i = i300 + i356;
		s20r = -r155 - s4r;
		s20i = -i155 - s4i;
		s21r = valueT(-0.3382199053276416787) * s4r;
		s21i = valueT(-0.3382199053276416787) * s4i;
		s22r = s3r + s5r;
		s22i = s3i + s5i;
		s23r = valueT(0.77258482333036237053) * s5r;
		s23i = valueT(0.77258482333036237053) * s5i;
		s24r = valueT(-0.041485093084529874071) * s7r;
		s24i = valueT(-0.041485093084529874071) * s7i;
		s25r = valueT(0.040792328818091398501) * s8r;
		s25i = valueT(0.040792328818091398501) * s8i;
		s26r = valueT(1.0911367804774475258) * s9r;
		s26i = valueT(1.0911367804774475258) * s9i;
		s27r = s10r - s3r;
		s27i = s10i - s3i;
		s28r = valueT(-1.3303017883352506981) * s10r;
		s28i = valueT(-1.3303017883352506981) * s10i;
		s29r = valueT(-0.0070195920621051755738) * s11r;
		s29i = valueT(-0.0070195920621051755738) * s11i;
		s30r = s11r + s12r;
		s30i = s11i + s12i;
		s31r = valueT(0.30863808493063553068) * s12r;
		s31i = valueT(0.30863808493063553068) * s12i;
		s32r = -s5r - s13r;
		s32i = -s5i - s13i;
		s33r = s10r - s13r;
		s33i = s10i - s13i;
		s34r = valueT(-1.1520811934512563819) * s13r;
		s34i = valueT(-1.1520811934512563819) * s13i;
		s35r = -s8r - s14r;
		s35i = -s8i - s14i;
		s36r = valueT(0.44121649074213775555) * s14r;
		s36i = valueT(0.44121649074213775555) * s14i;
		s37r = s7r + s15r;
		s37i = s7i + s15i;
		s38r = valueT(-0.0037979779850209202293) * s15r;
		s38i = valueT(-0.0037979779850209202293) * s15i;
		s39r = s16r - s9r;
		s39i = s16i - s9i;
		s40r = valueT(0.10299658541449607685) * s16r;
		s40i = valueT(0.10299658541449607685) * s16i;
		s41r = valueT(-0.78013633516750093113) * s17r;
		s41i = valueT(-0.78013633516750093113) * s17i;
		r352 = valueT(0.48120983123440233859) * s20r;
		i352 = valueT(0.48120983123440233859) * s20i;
		r351 = valueT(-0.95080541821435668667) * s22r;
		i351 = valueT(-0.95080541821435668667) * s22i;
		s42r = valueT(0.77435606130188038498) * s27r;
		s42i = valueT(0.77435606130188038498) * s27i;
		s43r = valueT(-0.13518730296159495598) * s30r;
		s43i = valueT(-0.13518730296159495598) * s30i;
		s44r = s27r + s32r;
		s44i = s27i + s32i;
		s45r = valueT(-0.64155533892720625081) * s32r;
		s45i = valueT(-0.64155533892720625081) * s32i;
		s46r = valueT(-1.2459694293038749946) * s33r;
		s46i = valueT(-1.2459694293038749946) * s33i;
		s47r = valueT(-0.25478585838854962442) * s35r;
		s47i = valueT(-0.25478585838854962442) * s35i;
		s48r = valueT(0.12173644819145031252) * s37r;
		s48i = valueT(0.12173644819145031252) * s37i;
		s49r = valueT(-0.22642397284585271417) * s39r;
		s49i = valueT(-0.22642397284585271417) * s39i;
		r387 = s6r - s41r;
		i387 = s6i - s41i;
		s50r = s18r + s41r;
		s50i = s18i + s41i;
		s51r = s21r + r352;
		s51i = s21i + i352;
		s52r = s23r + r351;
		s52i = s23i + i351;
		r374 = s29r - s43r;
		i374 = s29i - s43i;
		s53r = s31r + s43r;
		s53i = s31i + s43i;
		s54r = valueT(0.73225828250607722709) * s44r;
		s54i = valueT(0.73225828250607722709) * s44i;
		r373 = s28r - s46r;
		i373 = s28i - s46i;
		s55r = s34r + s46r;
		s55i = s34i + s46i;
		r386 = s25r - s47r;
		i386 = s25i - s47i;
		s56r = s36r + s47r;
		s56i = s36i + s47i;
		r394 = s24r - s48r;
		i394 = s24i - s48i;
		s57r = s38r + s48r;
		s57i = s38i + s48i;
		r401 = s26r - s49r;
		i401 = s26i - s49i;
		s58r = s40r + s49r;
		s58i = s40i + s49i;
		r407 = s42r - s54r;
		i407 = s42i - s54i;
		s59r = s45r + s54r;
		s59i = s45i + s54i;
		r489 = s51r + s58r - s57r;
		i489 = s51i + s58i - s57i;
		s60r = s56r - s57r - s58r;
		s60i = s56i - s57i - s58i;
		s61r = s52r - s59r;
		s61i = s52i - s59i;
		s62r = s55r + s59r;
		s62i = s55i + s59i;
		r488 = s53r + s61r;
		i488 = s53i + s61i;
		r476 = s51r + s56r + s57r + s61r - s53r - s62r;
		i476 = s51i + s56i + s57i + s61i - s53i - s62i;
		s63r = s62r - s53r;
		s63i = s62i - s53i;
		r512 = s19r + r488 - s50r - r489;
		i512 = s19i + i488 - s50i - i489;
		r507 = s60r - r379 - s50r - s63r;
		i507 = s60i - i379 - s50i - s63i;
		r514 = s60r + s63r;
		i514 = s60i + s63i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i;
		phasors.Multiply(s1r, s1i, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
		s2r = valueT(-0.26663719880631517604) * r66;
		s2i = valueT(-0.26663719880631517604) * i66;
		s3r = r59 + s1r;
		s3i = i59 + s1i;
		s4r = valueT(-1.0454545454545454545) * r59;
		s4i = valueT(-1.0454545454545454545) * i59;
		s5r = valueT(-0.92266181791115952847) * r279;
		s5i = valueT(-0.92266181791115952847) * i279;
		pReal[0 * stride] = s3r;
		pImag[0 * stride] = s3i;
		s6r = s3r + s4r;
		s6i = s3i + s4i;
		s7r = valueT(-1.1319291092955389243) * r155;
		s7i = valueT(-1.1319291092955389243) * i155;
		s8r = r297 - r356;
		s8i = i297 - i356;
		s9r = r296 - s5r;
		s9i = i296 - s5i;
		s10r = s2r + s5r;
		s10i = s2i + s5i;
		s11r = s7r - r352;
		s11i = s7i - i352;
		s12r = r320 - r351;
		s12i = i320 - i351;
		s13r = r394 - r401 - s11r;
		s13i = i394 - i401 - s11i;
		s14r = r386 - r394 - r401;
		s14i = i386 - i394 - i401;
		s15r = s12r - r407;
		s15i = s12i - i407;
		s16r = r373 + r407;
		s16i = i373 + i407;
		s17r = r374 + s15r;
		s17i = i374 + s15i;
		s18r = r374 + s16r - r386 - r394 - s11r - s15r;
		s18i = i374 + s16i - i386 - i394 - s11i - s15i;
		s19r = r374 - s16r;
		s19i = i374 - s16i;
		s20r = s8r + s13r + s17r - r387;
		s20i = s8i + s13i + s17i - i387;
		s21r = s9r + s13r - s17r;
		s21i = s9i + s13i - s17i;
		r533 = s18r - s6r;
		i533 = s18i - s6i;
		s22r = s14r + s19r - r377 - r387;
		s22i = s14i + s19i - i377 - i387;
		s23r = s14r - s19r;
		s23i = s14i - s19i;
		s24r = s10r - r489 - r488;
		s24i = s10i - i489 - i488;
		r538 = r476 + s6r;
		i538 = i476 + s6i;
		r532 = s6r + s20r;
		i532 = s6i + s20i;
		r531 = s6r + s21r;
		i531 = s6i + s21i;
		r534 = s22r - s6r;
		i534 = s22i - s6i;
		r539 = s23r - s6r;
		i539 = s23i - s6i;
		r535 = r512 + s6r;
		i535 = i512 + s6i;
		r536 = s6r + s24r;
		i536 = s6i + s24i;
		r529 = s6r - r507;
		i529 = s6i - i507;
		r537 = r514 - s6r;
		i537 = i514 - s6i;
		r530 = r507 + r514 + s6r + s18r + s22r + s23r - r476 - r512 - s20r - s21r - s24r;
		i530 = i507 + i514 + s6i + s18i + s22i + s23i - i476 - i512 - s20i - s21i - s24i;
	}
	{
		valueT s1r, s1i, s2r, s2i, s3r, s3i, s4r, s4i, s5r, s5i;
		valueT s6r, s6i, s7r, s7i, s8r, s8i, s9r, s9i, s10r, s10i;
		valueT s11r, s11i, s12r, s12i, s13r, s13i, s14r, s14i, s15r, s15i;
		valueT s16r, s16i, s17r, s17i, s18r, s18i, s19r, s19i, s20r, s20i;
		valueT s21r, s21i, s22r, s22i, s23r, s23i, s24r, s24i, s25r, s25i;
		valueT s26r, s26i, s27r, s27i, s28r, s28i, s29r, s29i, s30r, s30i;
		valueT s31r, s31i, s32r, s32i, s33r, s33i, s34r, s34i, s35r, s35i;
		valueT s36r, s36i, s37r, s37i, s38r, s38i, s39r, s39i, s40r, s40i;
		valueT s41r, s41i, s42r, s42i, s43r, s43i, s44r, s44i, s45r, s45i;
		valueT s46r, s46i, s47r, s47i, s48r, s48i, s49r, s49i, s50r, s50i;
		valueT s51r, s51i, s52r, s52i, s53r, s53i, s54r, s54i, s55r, s55i;
		valueT s56r, s56i, s57r, s57i, s58r, s58i, s59r, s59i, s60r, s60i;
		valueT s61r, s61i, s62r, s62i, s63r, s63i, s64r, s64i, s65r, s65i;
		valueT s66r, s66i, s67r, s67i, s68r, s68i, s69r, s69i, s70r, s70i;
		valueT s71r, s71i, s72r, s72i, s73r, s73i, s74r, s74i, s75r, s75i;
		valueT s76r, s76i, s77r, s77i, s78r, s78i, s79r, s79i, s80r, s80i;
		valueT s81r, s81i, s82r, s82i, s83r, s83i, s84r, s84i, s85r, s85i;
		valueT s86r, s86i, s87r, s87i, s88r, s88i, s89r, s89i, s90r, s90i;
		valueT s91r, s91i, s92r, s92i, s93r, s93i, s94r, s94i, s95r, s95i;
		valueT s96r, s96i, s97r, s97i, s98r, s98i, s99r, s99i, s100r, s100i;
		valueT s101r, s101i, s102r, s102i, s103r, s103i, s104r, s104i, s105r, s105i;
		valueT s106r, s106i, s107r, s107i, s108r, s108i, s109r, s109i, s110r, s110i;
		valueT s111r, s111i, s112r, s112i, s113r, s113i, s114r, s114i, s115r, s115i;
		valueT s116r, s116i, s117r, s117i, s118r, s118i, s119r, s119i, s120r, s120i;
		valueT s121r, s121i, s122r, s122i, s123r, s123i, s124r, s124i, s125r, s125i;
		valueT s126r, s126i, s127r, s127i, s128r, s128i, s129r, s129i, s130r, s130i;
		valueT s131r, s131i, s132r, s132i, s133r, s133i;
		s1r = r35 + r33;
		s1i = i35 + i33;
		s2r = r34 + r33;
		s2i = i34 + i33;
		s3r = r32 - r33;
		s3i = i32 - i33;
		s4r = r33 + r31;
		s4i = i33 + i31;
		s5r = r30 - r33;
		s5i = i30 - i33;
		s6r = r33 + r29;
		s6i = i33 + i29;
		s7r = r28 - r33;
		s7i = i28 - i33;
		s8r = r27 - r33;
		s8i = i27 - i33;
		s9r = r26 - r33;
		s9i = i26 - i33;
		s10r = r25 + r33 + r32 + r30 + r28 + r27 + r26 - r35 - r34 - r31 - r29;
		s10i = i25 + i33 + i32 + i30 + i28 + i27 + i26 - i35 - i34 - i31 - i29;
		s11r = r33 - r25;
		s11i = i33 - i25;
		s12r = valueT(-2.4548376760279676944) * s1i;
		s12i = valueT(2.4548376760279676944) * s1r;
		s13r = s3r - s1r;
		s13i = s3i - s1i;
		s14r = s1r + s3r;
		s14i = s1i + s3i;
		s15r = valueT(2.3432271025461826383) * s3i;
		s15i = valueT(-2.3432271025461826383) * s3r;
		s16r = s6r - s3r;
		s16i = s6i - s3i;
		s17r = valueT(-3.7728068375656269667) * s6i;
		s17i = valueT(3.7728068375656269667) * s6r;
		s18r = s1r - s7r;
		s18i = s1i - s7i;
		s19r = s7r - s6r;
		s19i = s7i - s6i;
		s20r = s6r + s7r;
		s20i = s6i + s7i;
		s21r = valueT(-0.98376005299914845343) * s7i;
		s21i = valueT(0.98376005299914845343) * s7r;
		s22r = s3r + s8r;
		s22i = s3i + s8i;
		s23r = s4r - s8r;
		s23i = s4i - s8i;
		s24r = s4r + s8r;
		s24i = s4i + s8i;
		s25r = valueT(1.7824398894730114956) * s8i;
		s25i = valueT(-1.7824398894730114956) * s8r;
		s26r = valueT(-0.21799234196875997916) * s10i;
		s26i = valueT(0.21799234196875997916) * s10r;
		s27r = s2r - s11r;
		s27i = s2i - s11i;
		s28r = s2r + s11r;
		s28i = s2i + s11i;
		s29r = -s6r - s11r;
		s29i = -s6i - s11i;
		s30r = s11r - s8r;
		s30i = s11i - s8i;
		s31r = valueT(-2.7645945225911093906) * s11i;
		s31i = valueT(2.7645945225911093906) * s11r;
		s32r = s13r - s5r;
		s32i = s13i - s5i;
		s33r = s5r + s14r;
		s33i = s5i + s14i;
		s34r = valueT(1.7960539806927648926) * s16i;
		s34i = valueT(-1.7960539806927648926) * s16r;
		s35r = valueT(0.47808481915510562032) * s18i;
		s35i = valueT(-0.47808481915510562032) * s18r;
		s36r = s19r - s9r;
		s36i = s19i - s9i;
		s37r = s9r - s20r;
		s37i = s9i - s20i;
		s38r = valueT(-2.3432271025461826383) * s22i;
		s38i = valueT(2.3432271025461826383) * s22r;
		s39r = s23r - s5r - s13r;
		s39i = s23i - s5i - s13i;
		s40r = s5r + s23r;
		s40i = s5i + s23i;
		s41r = s24r - s5r;
		s41i = s24i - s5i;
		s42r = s14r - s5r - s24r;
		s42i = s14i - s5i - s24i;
		s43r = s14r + s24r;
		s43i = s14i + s24i;
		s44r = s27r - s9r;
		s44i = s27i - s9i;
		s45r = s9r + s20r + s27r;
		s45i = s9i + s20i + s27i;
		s46r = s20r - s27r;
		s46i = s20i - s27i;
		s47r = s28r - s9r - s19r;
		s47i = s28i - s9i - s19i;
		s48r = s9r + s28r;
		s48i = s9i + s28i;
		s49r = -s22r - s29r;
		s49i = -s22i - s29i;
		s50r = valueT(-3.7728068375656269667) * s29i;
		s50i = valueT(3.7728068375656269667) * s29r;
		s51r = valueT(1.3350147875716650622) * s30i;
		s51i = valueT(-1.3350147875716650622) * s30r;
		s52r = valueT(-1.6268875613696548269) * s32i;
		s52i = valueT(1.6268875613696548269) * s32r;
		s53r = valueT(-0.38170453238760596548) * s33i;
		s53i = valueT(0.38170453238760596548) * s33r;
		s54r = s15r + s34r;
		s54i = s15i + s34i;
		s55r = s17r + s34r;
		s55i = s17i + s34i;
		s56r = s12r + s35r;
		s56i = s12i + s35i;
		s57r = s21r + s35r;
		s57i = s21i + s35i;
		s58r = s32r + s36r;
		s58i = s32i + s36i;
		s59r = valueT(1.6895707617872591039) * s36i;
		s59i = valueT(-1.6895707617872591039) * s36r;
		s60r = s33r + s37r;
		s60i = s33i + s37i;
		s61r = valueT(0.25619340127384909953) * s37i;
		s61i = valueT(-0.25619340127384909953) * s37r;
		s62r = valueT(-0.28945800373693071684) * s39i;
		s62i = valueT(0.28945800373693071684) * s39r;
		s63r = s32r - s40r;
		s63i = s32i - s40i;
		s64r = valueT(0.19453226266629193939) * s40i;
		s64i = valueT(-0.19453226266629193939) * s40r;
		s65r = valueT(-0.2346676935704091727) * s41i;
		s65i = valueT(0.2346676935704091727) * s41r;
		s66r = valueT(-0.88210737190418308715) * s42i;
		s66i = valueT(0.88210737190418308715) * s42r;
		s67r = valueT(-0.14703683881719679277) * s43i;
		s67i = valueT(0.14703683881719679277) * s43r;
		s68r = -s41r - s44r;
		s68i = -s41i - s44i;
		s69r = valueT(0.034379663070158720829) * s44i;
		s69i = valueT(-0.034379663070158720829) * s44r;
		s70r = s42r - s45r;
		s70i = s42i - s45i;
		s71r = valueT(-0.25453675648342974547) * s45i;
		s71i = valueT(0.25453675648342974547) * s45r;
		s72r = s43r - s46r;
		s72i = s43i - s46i;
		s73r = valueT(0.2218137382036903787) * s46i;
		s73i = valueT(-0.2218137382036903787) * s46r;
		s74r = s39r + s47r;
		s74i = s39i + s47i;
		s75r = valueT(-0.61891681321574106252) * s47i;
		s75i = valueT(0.61891681321574106252) * s47r;
		s76r = s36r - s48r;
		s76i = s36i - s48i;
		s77r = -s40r - s48r;
		s77i = -s40i - s48i;
		s78r = valueT(-0.95488588512274355824) * s48i;
		s78i = valueT(0.95488588512274355824) * s48r;
		s79r = valueT(-1.7960539806927648926) * s49i;
		s79i = valueT(1.7960539806927648926) * s49r;
		s80r = s25r + s51r;
		s80i = s25i + s51i;
		s81r = s31r + s51r;
		s81i = s31i + s51i;
		s82r = valueT(-1.3720037251475807271) * s58i;
		s82i = valueT(1.3720037251475807271) * s58r;
		s83r = valueT(0.20243618718352113996) * s60i;
		s83i = valueT(-0.20243618718352113996) * s60r;
		s84r = valueT(-0.47745176623445429584) * s63i;
		s84i = valueT(0.47745176623445429584) * s63r;
		s85r = valueT(-0.22030224702215803893) * s68i;
		s85i = valueT(0.22030224702215803893) * s68r;
		s86r = valueT(-0.40359265945440124347) * s70i;
		s86i = valueT(0.40359265945440124347) * s70r;
		s87r = valueT(0.017866059838636898966) * s72i;
		s87i = valueT(-0.017866059838636898966) * s72r;
		s88r = valueT(0.24448537100605559632) * s74i;
		s88i = valueT(-0.24448537100605559632) * s74r;
		s89r = s63r + s76r;
		s89i = s63i + s76i;
		s90r = valueT(-0.88148554897000088739) * s76i;
		s90i = valueT(0.88148554897000088739) * s76r;
		s91r = valueT(-0.22139329290838662101) * s77i;
		s91i = valueT(0.22139329290838662101) * s77r;
		s92r = s38r + s79r;
		s92i = s38i + s79i;
		s93r = s50r + s79r;
		s93i = s50i + s79i;
		s94r = s52r - s82r;
		s94i = s52i - s82i;
		s95r = s59r + s82r;
		s95i = s59i + s82i;
		s96r = s53r - s83r;
		s96i = s53i - s83i;
		s97r = s61r + s83r;
		s97i = s61i + s83i;
		s98r = s65r - s85r;
		s98i = s65i - s85i;
		s99r = s69r + s85r;
		s99i = s69i + s85i;
		s100r = s66r - s86r;
		s100i = s66i - s86i;
		s101r = s71r + s86r;
		s101i = s71i + s86i;
		s102r = s67r + s87r;
		s102i = s67i + s87i;
		s103r = s73r + s87r;
		s103i = s73i + s87i;
		s104r = s62r + s88r;
		s104i = s62i + s88i;
		s105r = s75r + s88r;
		s105i = s75i + s88i;
		s106r = valueT(0.53113233935198911604) * s89i;
		s106i = valueT(-0.53113233935198911604) * s89r;
		s107r = s64r + s91r;
		s107i = s64i + s91i;
		s108r = s78r + s91r;
		s108i = s78i + s91i;
		s109r = s96r + s100r - s102r;
		s109i = s96i + s100i - s102i;
		s110r = s98r + s100r + s102r;
		s110i = s98i + s100i + s102i;
		s111r = s97r + s101r + s103r;
		s111i = s97i + s101i + s103i;
		s112r = s99r + s101r - s103r;
		s112i = s99i + s101i - s103i;
		s113r = s84r + s106r;
		s113i = s84i + s106i;
		s114r = s90r + s106r;
		s114i = s90i + s106i;
		s115r = s94r - s113r;
		s115i = s94i - s113i;
		s116r = s107r + s113r;
		s116i = s107i + s113i;
		s117r = s95r + s114r;
		s117i = s95i + s114i;
		s118r = s108r + s114r;
		s118i = s108i + s114i;
		s119r = s104r + s115r;
		s119i = s104i + s115i;
		s120r = s96r + s98r + s104r + s116r - s100r - s115r;
		s120i = s96i + s98i + s104i + s116i - s100i - s115i;
		s121r = s104r - s116r;
		s121i = s104i - s116i;
		s122r = s117r - s105r;
		s122i = s117i - s105i;
		s123r = s101r + s105r + s117r + s118r - s97r - s99r;
		s123i = s101i + s105i + s117i + s118i - s97i - s99i;
		s124r = s105r - s118r;
		s124i = s105i - s118i;
		s125r = s54r + s92r + s109r + s119r;
		s125i = s54i + s92i + s109i + s119i;
		s126r = s56r + s119r - s109r;
		s126i = s56i + s119i - s109i;
		r523 = s120r - s26r;
		i523 = s120i - s26i;
		s127r = s80r + s92r + s121r - s110r;
		s127i = s80i + s92i + s121i - s110i;
		s128r = s110r + s121r;
		s128i = s110i + s121i;
		s129r = s55r + s93r - s111r - s122r;
		s129i = s55i + s93i - s111i - s122i;
		s130r = s57r + s111r - s122r;
		s130i = s57i + s111i - s122i;
		r519 = s123r - s26r;
		i519 = s123i - s26i;
		s131r = s81r + s93r + s112r + s124r;
		s131i = s81i + s93i + s112i + s124i;
		s132r = s124r - s112r;
		s132i = s124i - s112i;
		r525 = s125r - s26r;
		i525 = s125i - s26i;
		r528 = s126r - s26r;
		i528 = s126i - s26i;
		r520 = s127r - s26r;
		i520 = s127i - s26i;
		r524 = s128r - s26r;
		i524 = s128i - s26i;
		r522 = s129r - s26r;
		i522 = s129i - s26i;
		r521 = s130r - s26r;
		i521 = s130i - s26i;
		r518 = s26r - s131r;
		i518 = s26i - s131i;
		r527 = s132r - s26r;
		i527 = s132i - s26i;
		s133r = s26r + s120r + s123r + s125r + s126r + s127r + s128r + s129r + s130r + s131r + s132r;
		s133i = s26i + s120i + s123i + s125i + s126i + s127i + s128i + s129i + s130i + s131i + s132i;
		pReal[14 * stride] = r530 - s133r;
		pImag[14 * stride] = i530 - s133i;
		pReal[9 * stride] = r530 + s133r;
		pImag[9 * stride] = i530 + s133i;
	}
	pReal[13 * stride] = -r537 - r527;
	pImag[13 * stride] = -i537 - i527;
	pReal[10 * stride] = r527 - r537;
	pImag[10 * stride] = i527 - i537;
	pReal[22 * stride] = r529 - r518;
	pImag[22 * stride] = i529 - i518;
	pReal[1 * stride] = r529 + r518;
	pImag[1 * stride] = i529 + i518;
	pReal[4 * stride] = r536 - r521;
	pImag[4 * stride] = i536 - i521;
	pReal[19 * stride] = r536 + r521;
	pImag[19 * stride] = i536 + i521;
	pReal[18 * stride] = r535 - r522;
	pImag[18 * stride] = i535 - i522;
	pReal[5 * stride] = r535 + r522;
	pImag[5 * stride] = i535 + i522;
	pReal[16 * stride] = -r539 - r524;
	pImag[16 * stride] = -i539 - i524;
	pReal[7 * stride] = r524 - r539;
	pImag[7 * stride] = i524 - i539;
	pReal[3 * stride] = -r534 - r520;
	pImag[3 * stride] = -i534 - i520;
	pReal[20 * stride] = r520 - r534;
	pImag[20 * stride] = i520 - i534;
	pReal[12 * stride] = r531 - r528;
	pImag[12 * stride] = i531 - i528;
	pReal[11 * stride] = r531 + r528;
	pImag[11 * stride] = i531 + i528;
	pReal[8 * stride] = r532 - r525;
	pImag[8 * stride] = i532 - i525;
	pReal[15 * stride] = r532 + r525;
	pImag[15 * stride] = i532 + i525;
	pReal[2 * stride] = r538 - r519;
	pImag[2 * stride] = i538 - i519;
	pReal[21 * stride] = r538 + r519;
	pImag[21 * stride] = i538 + i519;
	pReal[6 * stride] = -r533 - r523;
	pImag[6 * stride] = -i533 - i523;
	pReal[17 * stride] = r523 - r533;
	pImag[17 * stride] = i523 - i533;
}

template<> void StandardModule<float, 23>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 23>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
