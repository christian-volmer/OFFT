
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
	valueT t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
	valueT t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
	valueT t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
	valueT t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	valueT t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	valueT t60, t61, t62, t63, t64, t65, t66, t67, t68, t69;
	valueT t70, t71, t72, t73, t74, t75, t76, t77, t78, t79;
	valueT t80, t81, t82, t83, t84, t85, t86, t87, t88, t89;

	phasors.Multiply(t0, t1, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t2, t3, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t4, t5, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t6, t7, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t8, t9, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t10, t11, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t12, t13, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t14, t15, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t16, t17, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t18, t19, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t20, t21, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t22, t23, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t24, t25, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t26, t27, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t28, t29, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t30, t31, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t32, t33, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t34, t35, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t36, t37, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);

	t38 = t2 - t36;
	t39 = t3 - t37;
	t2 += t36;
	t3 += t37;
	t36 = t4 - t34;
	t37 = t5 - t35;
	t4 += t34;
	t5 += t35;
	t34 = t6 - t32;
	t35 = t7 - t33;
	t6 += t32;
	t7 += t33;
	t32 = t8 - t30;
	t33 = t9 - t31;
	t8 += t30;
	t9 += t31;
	t30 = t10 - t28;
	t31 = t11 - t29;
	t10 += t28;
	t11 += t29;
	t28 = t12 - t26;
	t29 = t13 - t27;
	t12 += t26;
	t13 += t27;
	t26 = t14 - t24;
	t27 = t15 - t25;
	t14 += t24;
	t15 += t25;
	t24 = t16 - t22;
	t25 = t17 - t23;
	t16 += t22;
	t17 += t23;
	t22 = t18 - t20;
	t23 = t19 - t21;
	t18 += t20;
	t19 += t21;
	t20 = t38 - t26;
	t21 = t39 - t27;
	t38 += t26 - t24;
	t39 += t27 - t25;
	t40 = t2 - t14;
	t41 = t3 - t15;
	t2 += t14 + t16;
	t3 += t15 + t17;
	t42 = t36 + t34 - t30;
	t43 = t37 + t35 - t31;
	t36 += t30;
	t37 += t31;
	t44 = t4 + t6 + t10;
	t45 = t5 + t7 + t11;
	t4 -= t10;
	t5 -= t11;
	t34 += t30;
	t35 += t31;
	t6 -= t10;
	t7 -= t11;
	t10 = t32 + t28 + t22;
	t11 = t33 + t29 + t23;
	t32 -= t22;
	t33 -= t23;
	t30 = t8 + t12 + t18;
	t31 = t9 + t13 + t19;
	t8 -= t18;
	t9 -= t19;
	t28 -= t22;
	t29 -= t23;
	t12 -= t18;
	t13 -= t19;
	t26 += t24;
	t27 += t25;
	t14 -= t16;
	t15 -= t17;
	t16 = t20 + t32;
	t17 = t21 + t33;
	t18 = t38 - t42 + t10;
	t19 = t39 - t43 + t11;
	t38 -= t10;
	t39 -= t11;
	t22 = t40 + t8;
	t23 = t41 + t9;
	t24 = t2 - t44;
	t25 = t3 - t45;
	t46 = t2 + t44 + t30;
	t47 = t3 + t45 + t31;
	t2 -= t30;
	t3 -= t31;
	t42 += t10;
	t43 += t11;
	t44 -= t30;
	t45 -= t31;
	t10 = t28 - t26;
	t11 = t29 - t27;
	t30 = t12 - t14;
	t31 = t13 - t15;
	t48 = t20 - t36;
	t49 = t21 - t37;
	t50 = t16 - t36;
	t51 = t17 - t37;
	t16 += t36;
	t17 += t37;
	t52 = t38 - t42;
	t53 = t39 - t43;
	t54 = t40 - t4;
	t55 = t41 - t5;
	t56 = t22 - t4;
	t57 = t23 - t5;
	t22 += t4;
	t23 += t5;
	t58 = t34 - t10;
	t59 = t35 - t11;
	t10 = t34 + t10;
	t11 = t35 + t11;
	t60 = t34 + t26;
	t61 = t35 + t27;
	t62 = t6 - t30;
	t63 = t7 - t31;
	t30 = t6 + t30;
	t31 = t7 + t31;
	t64 = t6 + t14;
	t65 = t7 + t15;
	t0 += t46;
	t1 += t47;
	t66 = t20 - t26;
	t67 = t21 - t27;
	t68 = t48 - t60;
	t69 = t49 - t61;
	t70 = t50 - t58;
	t71 = t51 - t59;
	t72 = t16 + t10;
	t73 = t17 + t11;
	t74 = t40 + t14;
	t75 = t41 + t15;
	t76 = t54 + t64;
	t77 = t55 + t65;
	t78 = t56 + t62;
	t79 = t57 + t63;
	t80 = t22 - t30;
	t81 = t23 - t31;
	t82 = t36 + t34;
	t83 = t37 + t35;
	t84 = t4 - t6;
	t85 = t5 - t7;
	t86 = t32 + t28;
	t87 = t33 + t29;
	t88 = t8 - t12;
	t89 = t9 - t13;
	t21 *= valueT(0.68760514632558187155);
	t20 *= valueT(0.68760514632558187155);
	t67 *= valueT(0.32317683965956657285);
	t66 *= valueT(0.32317683965956657285);
	t49 *= valueT(1.4346250692830659266);
	t48 *= valueT(1.4346250692830659266);
	t69 *= valueT(1.2264668273402374962);
	t68 *= valueT(1.2264668273402374962);
	t51 *= valueT(0.57902218221296609619);
	t50 *= valueT(0.57902218221296609619);
	t71 *= valueT(0.38670792371145064592);
	t70 *= valueT(0.38670792371145064592);
	t17 *= valueT(0.63264912149723907301);
	t16 *= valueT(0.63264912149723907301);
	t73 *= valueT(0.15419065801476712294);
	t72 *= valueT(0.15419065801476712294);
	t19 *= valueT(0.24216105241892630846);
	t18 *= valueT(0.24216105241892630846);
	t39 *= valueT(0.34642356159542270339);
	t38 *= valueT(0.34642356159542270339);
	t53 *= valueT(0.39375928506743515593);
	t52 *= valueT(0.39375928506743515593);
	t40 *= valueT(1.5180103763831126486);
	t41 *= valueT(1.5180103763831126486);
	t74 *= valueT(0.052242117792478608243);
	t75 *= valueT(0.052242117792478608243);
	t54 *= valueT(1.6498790548989948758);
	t55 *= valueT(1.6498790548989948758);
	t76 *= valueT(0.60274726202214007732);
	t77 *= valueT(0.60274726202214007732);
	t56 *= valueT(0.87748374592112899047);
	t57 *= valueT(0.87748374592112899047);
	t78 *= valueT(0.22639860011693534447);
	t79 *= valueT(0.22639860011693534447);
	t22 *= valueT(0.27197952282337084426);
	t23 *= valueT(0.27197952282337084426);
	t80 *= valueT(0.24723694446494057458);
	t81 *= valueT(0.24723694446494057458);
	t24 *= valueT(0.473391996237718272);
	t25 *= valueT(0.473391996237718272);
	t46 *= valueT(1.0555555555555555556);
	t47 *= valueT(1.0555555555555555556);
	t2 *= valueT(0.32530152474940867184);
	t3 *= valueT(0.32530152474940867184);
	t43 *= valueT(0.83485429360688276441);
	t42 *= valueT(0.83485429360688276441);
	t37 *= valueT(1.4346250692830659266);
	t36 *= valueT(1.4346250692830659266);
	t83 *= valueT(1.2264668273402374962);
	t82 *= valueT(1.2264668273402374962);
	t44 *= valueT(0.14809047148830960016);
	t45 *= valueT(0.14809047148830960016);
	t4 *= valueT(1.6498790548989948758);
	t5 *= valueT(1.6498790548989948758);
	t84 *= valueT(0.60274726202214007732);
	t85 *= valueT(0.60274726202214007732);
	t35 *= valueT(2.244775412737646562);
	t34 *= valueT(2.244775412737646562);
	t59 *= valueT(0.58110158892138584157);
	t58 *= valueT(0.58110158892138584157);
	t11 *= valueT(0.1700771474529377042);
	t10 *= valueT(0.1700771474529377042);
	t61 *= valueT(2.244775412737646562);
	t60 *= valueT(2.244775412737646562);
	t6 *= valueT(1.0471317928768547985);
	t7 *= valueT(1.0471317928768547985);
	t62 *= valueT(0.651085145804193646);
	t63 *= valueT(0.651085145804193646);
	t30 *= valueT(0.024742578358430269679);
	t31 *= valueT(0.024742578358430269679);
	t64 *= valueT(1.0471317928768547985);
	t65 *= valueT(1.0471317928768547985);
	t33 *= valueT(1.8873779105534714014);
	t32 *= valueT(1.8873779105534714014);
	t87 *= valueT(0.91566545995849517431);
	t86 *= valueT(0.91566545995849517431);
	t8 *= valueT(0.97680829181198902898);
	t9 *= valueT(0.97680829181198902898);
	t88 *= valueT(0.47957744180648981093);
	t89 *= valueT(0.47957744180648981093);
	t29 *= valueT(0.85961846932201412149);
	t28 *= valueT(0.85961846932201412149);
	t12 *= valueT(0.49723085000549921805);
	t13 *= valueT(0.49723085000549921805);
	t27 *= valueT(0.28192537265311784701);
	t26 *= valueT(0.28192537265311784701);
	t14 *= valueT(1.5702524941755912569);
	t15 *= valueT(1.5702524941755912569);
	t46 = t0 - t46;
	t47 = t1 - t47;
	t21 -= t67;
	t20 -= t66;
	t67 += t27;
	t66 += t26;
	t49 -= t69;
	t48 -= t68;
	t69 += t61;
	t68 += t60;
	t51 -= t71;
	t50 -= t70;
	t71 += t59;
	t70 += t58;
	t17 -= t73;
	t16 -= t72;
	t73 += t11;
	t72 += t10;
	t40 += t74;
	t41 += t75;
	t74 -= t14;
	t75 -= t15;
	t54 -= t76;
	t55 -= t77;
	t76 += t64;
	t77 += t65;
	t56 -= t78;
	t57 -= t79;
	t78 += t62;
	t79 += t63;
	t22 -= t80;
	t23 -= t81;
	t80 -= t30;
	t81 -= t31;
	t37 -= t83;
	t36 -= t82;
	t83 -= t35;
	t82 -= t34;
	t4 -= t84;
	t5 -= t85;
	t84 -= t6;
	t85 -= t7;
	t33 -= t87;
	t32 -= t86;
	t87 -= t29;
	t86 -= t28;
	t8 -= t88;
	t9 -= t89;
	t88 -= t12;
	t89 -= t13;
	t21 -= t49;
	t20 -= t48;
	t67 -= t69;
	t66 -= t68;
	t49 -= t51 + t17 - t37;
	t48 -= t50 + t16 - t36;
	t69 -= t71 + t73 - t83;
	t68 -= t70 + t72 - t82;
	t51 -= t17;
	t50 -= t16;
	t71 -= t73;
	t70 -= t72;
	t39 -= t53;
	t38 -= t52;
	t53 += t43;
	t52 += t42;
	t40 -= t54;
	t41 -= t55;
	t74 += t76;
	t75 += t77;
	t54 -= t56 + t22 - t4;
	t55 -= t57 + t23 - t5;
	t76 -= t78 + t80 - t84;
	t77 -= t79 + t81 - t85;
	t56 -= t22;
	t57 -= t23;
	t78 -= t80;
	t79 -= t81;
	t4 = t46 - t24 + t2;
	t5 = t47 - t25 + t3;
	t24 = t46 + t24 + t44;
	t25 = t47 + t25 + t45;
	t46 -= t2 + t44;
	t47 -= t3 + t45;
	t21 += t51;
	t20 += t50;
	t67 += t71;
	t66 += t70;
	t51 += t33;
	t50 += t32;
	t71 += t87;
	t70 += t86;
	t2 = t19 + t39;
	t3 = t18 + t38;
	t39 = t19 - t39 + t53;
	t38 = t18 - t38 + t52;
	t19 -= t53;
	t18 -= t52;
	t40 += t56;
	t41 += t57;
	t74 -= t78;
	t75 -= t79;
	t56 -= t8;
	t57 -= t9;
	t78 -= t88;
	t79 -= t89;
	t6 = t4 + t40;
	t7 = t5 + t41;
	t40 = t4 - t40 + t74;
	t41 = t5 - t41 + t75;
	t4 -= t74;
	t5 -= t75;
	t8 = t24 + t54;
	t9 = t25 + t55;
	t54 = t24 - t54 - t76;
	t55 = t25 - t55 - t77;
	t24 += t76;
	t25 += t77;
	t10 = t46 + t56;
	t11 = t47 + t57;
	t56 = t46 - t56 - t78;
	t57 = t47 - t57 - t79;
	t46 += t78;
	t47 += t79;
	t12 = t21 - t67 + t2;
	t13 = t20 - t66 + t3;
	t21 -= t2;
	t20 -= t3;
	t67 += t2;
	t66 += t3;
	t2 = t49 - t69 - t19;
	t3 = t48 - t68 - t18;
	t49 += t19;
	t48 += t18;
	t69 -= t19;
	t68 -= t18;
	t14 = t51 - t71 + t39;
	t15 = t50 - t70 + t38;
	t51 -= t39;
	t50 -= t38;
	t71 += t39;
	t70 += t38;
	pReal[0 * stride] = t0;
	pImag[0 * stride] = t1;
	pReal[1 * stride] = t6 + t21;
	pImag[1 * stride] = t7 - t20;
	pReal[2 * stride] = t8 + t49;
	pImag[2 * stride] = t9 - t48;
	pReal[3 * stride] = t24 - t69;
	pImag[3 * stride] = t25 + t68;
	pReal[4 * stride] = t10 + t51;
	pImag[4 * stride] = t11 - t50;
	pReal[5 * stride] = t54 + t2;
	pImag[5 * stride] = t55 - t3;
	pReal[6 * stride] = t46 - t71;
	pImag[6 * stride] = t47 + t70;
	pReal[7 * stride] = t40 - t12;
	pImag[7 * stride] = t41 + t13;
	pReal[8 * stride] = t4 + t67;
	pImag[8 * stride] = t5 - t66;
	pReal[9 * stride] = t56 - t14;
	pImag[9 * stride] = t57 + t15;
	pReal[10 * stride] = t56 + t14;
	pImag[10 * stride] = t57 - t15;
	pReal[11 * stride] = t4 - t67;
	pImag[11 * stride] = t5 + t66;
	pReal[12 * stride] = t40 + t12;
	pImag[12 * stride] = t41 - t13;
	pReal[13 * stride] = t46 + t71;
	pImag[13 * stride] = t47 - t70;
	pReal[14 * stride] = t54 - t2;
	pImag[14 * stride] = t55 + t3;
	pReal[15 * stride] = t10 - t51;
	pImag[15 * stride] = t11 + t50;
	pReal[16 * stride] = t24 + t69;
	pImag[16 * stride] = t25 - t68;
	pReal[17 * stride] = t8 - t49;
	pImag[17 * stride] = t9 + t48;
	pReal[18 * stride] = t6 - t21;
	pImag[18 * stride] = t7 + t20;
}

template<> void StandardModule<float, 19>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 19>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
