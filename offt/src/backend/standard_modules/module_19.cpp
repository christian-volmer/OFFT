
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
	valueT t11, t12, t13, t14, t15, t16, t17, t18, t19, t20;
	valueT t21, t22, t23, t24, t25, t26, t27, t28, t29, t30;
	valueT t31, t32, t33, t34, t35, t36, t37, t38, t41, t42;
	valueT t43, t44, t45, t46, t47, t48, t49, t50, t51, t52;
	valueT t53, t54, t55, t56, t57, t58, t59, t60, t61, t62;
	valueT t63, t64, t65, t66, t67, t68, t69, t70, t71, t72;
	valueT t73, t74, t75, t76, t79, t80, t81, t82, t83, t84;
	valueT t85, t86, t87, t88, t89, t90, t91, t92, t93, t94;

	phasors.Multiply(t1, t2, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t3, t4, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t5, t6, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t7, t8, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t9, t10, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t11, t12, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t13, t14, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t15, t16, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t17, t18, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t19, t20, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t21, t22, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t23, t24, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t25, t26, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t27, t28, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t29, t30, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t31, t32, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t33, t34, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t35, t36, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t37, t38, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);

	t41 = t3 - t37;
	t42 = t4 - t38;
	t3 += t37;
	t4 += t38;
	t37 = t5 - t35;
	t38 = t6 - t36;
	t5 += t35;
	t6 += t36;
	t35 = t7 - t33;
	t36 = t8 - t34;
	t7 += t33;
	t8 += t34;
	t33 = t9 - t31;
	t34 = t10 - t32;
	t9 += t31;
	t10 += t32;
	t31 = t11 - t29;
	t32 = t12 - t30;
	t11 += t29;
	t12 += t30;
	t29 = t13 - t27;
	t30 = t14 - t28;
	t13 += t27;
	t14 += t28;
	t27 = t15 - t25;
	t28 = t16 - t26;
	t15 += t25;
	t16 += t26;
	t25 = t17 - t23;
	t26 = t18 - t24;
	t17 += t23;
	t18 += t24;
	t23 = t19 - t21;
	t24 = t20 - t22;
	t19 += t21;
	t20 += t22;
	t21 = t41 - t27;
	t22 = t42 - t28;
	t41 += t27 - t25;
	t42 += t28 - t26;
	t43 = t3 - t15;
	t44 = t4 - t16;
	t3 += t15 + t17;
	t4 += t16 + t18;
	t45 = t37 + t35 - t31;
	t46 = t38 + t36 - t32;
	t37 += t31;
	t38 += t32;
	t47 = t5 + t7 + t11;
	t48 = t6 + t8 + t12;
	t5 -= t11;
	t6 -= t12;
	t35 += t31;
	t36 += t32;
	t7 -= t11;
	t8 -= t12;
	t11 = t33 + t29 + t23;
	t12 = t34 + t30 + t24;
	t33 -= t23;
	t34 -= t24;
	t31 = t9 + t13 + t19;
	t32 = t10 + t14 + t20;
	t9 -= t19;
	t10 -= t20;
	t29 -= t23;
	t30 -= t24;
	t13 -= t19;
	t14 -= t20;
	t27 += t25;
	t28 += t26;
	t15 -= t17;
	t16 -= t18;
	t17 = t21 + t33;
	t18 = t22 + t34;
	t19 = t41 - t45 + t11;
	t20 = t42 - t46 + t12;
	t41 -= t11;
	t42 -= t12;
	t23 = t43 + t9;
	t24 = t44 + t10;
	t25 = t3 - t47;
	t26 = t4 - t48;
	t49 = t3 + t47 + t31;
	t50 = t4 + t48 + t32;
	t3 -= t31;
	t4 -= t32;
	t45 += t11;
	t46 += t12;
	t47 -= t31;
	t48 -= t32;
	t11 = t29 - t27;
	t12 = t30 - t28;
	t31 = t13 - t15;
	t32 = t14 - t16;
	t51 = t21 - t37;
	t52 = t22 - t38;
	t53 = t17 - t37;
	t54 = t18 - t38;
	t17 += t37;
	t18 += t38;
	t55 = t41 - t45;
	t56 = t42 - t46;
	t57 = t43 - t5;
	t58 = t44 - t6;
	t59 = t23 - t5;
	t60 = t24 - t6;
	t23 += t5;
	t24 += t6;
	t61 = t35 - t11;
	t62 = t36 - t12;
	t11 = t35 + t11;
	t12 = t36 + t12;
	t63 = t35 + t27;
	t64 = t36 + t28;
	t65 = t7 - t31;
	t66 = t8 - t32;
	t31 = t7 + t31;
	t32 = t8 + t32;
	t67 = t7 + t15;
	t68 = t8 + t16;
	t1 += t49;
	t2 += t50;
	t69 = t21 - t27;
	t70 = t22 - t28;
	t71 = t51 - t63;
	t72 = t52 - t64;
	t73 = t53 - t61;
	t74 = t54 - t62;
	t75 = t17 + t11;
	t76 = t18 + t12;
	t79 = t43 + t15;
	t80 = t44 + t16;
	t81 = t57 + t67;
	t82 = t58 + t68;
	t83 = t59 + t65;
	t84 = t60 + t66;
	t85 = t23 - t31;
	t86 = t24 - t32;
	t87 = t37 + t35;
	t88 = t38 + t36;
	t89 = t5 - t7;
	t90 = t6 - t8;
	t91 = t33 + t29;
	t92 = t34 + t30;
	t93 = t9 - t13;
	t94 = t10 - t14;
	t22 *= valueT(0.68760514632558187155);
	t21 *= valueT(0.68760514632558187155);
	t70 *= valueT(0.32317683965956657285);
	t69 *= valueT(0.32317683965956657285);
	t52 *= valueT(1.4346250692830659266);
	t51 *= valueT(1.4346250692830659266);
	t72 *= valueT(1.2264668273402374962);
	t71 *= valueT(1.2264668273402374962);
	t54 *= valueT(0.57902218221296609619);
	t53 *= valueT(0.57902218221296609619);
	t74 *= valueT(0.38670792371145064592);
	t73 *= valueT(0.38670792371145064592);
	t18 *= valueT(0.63264912149723907301);
	t17 *= valueT(0.63264912149723907301);
	t76 *= valueT(0.15419065801476712294);
	t75 *= valueT(0.15419065801476712294);
	t20 *= valueT(0.24216105241892630846);
	t19 *= valueT(0.24216105241892630846);
	t42 *= valueT(0.34642356159542270339);
	t41 *= valueT(0.34642356159542270339);
	t56 *= valueT(0.39375928506743515593);
	t55 *= valueT(0.39375928506743515593);
	t43 *= valueT(1.5180103763831126486);
	t44 *= valueT(1.5180103763831126486);
	t79 *= valueT(0.052242117792478608243);
	t80 *= valueT(0.052242117792478608243);
	t57 *= valueT(1.6498790548989948758);
	t58 *= valueT(1.6498790548989948758);
	t81 *= valueT(0.60274726202214007732);
	t82 *= valueT(0.60274726202214007732);
	t59 *= valueT(0.87748374592112899047);
	t60 *= valueT(0.87748374592112899047);
	t83 *= valueT(0.22639860011693534447);
	t84 *= valueT(0.22639860011693534447);
	t23 *= valueT(0.27197952282337084426);
	t24 *= valueT(0.27197952282337084426);
	t85 *= valueT(0.24723694446494057458);
	t86 *= valueT(0.24723694446494057458);
	t25 *= valueT(0.473391996237718272);
	t26 *= valueT(0.473391996237718272);
	t49 *= valueT(1.0555555555555555556);
	t50 *= valueT(1.0555555555555555556);
	t3 *= valueT(0.32530152474940867184);
	t4 *= valueT(0.32530152474940867184);
	t46 *= valueT(0.83485429360688276441);
	t45 *= valueT(0.83485429360688276441);
	t38 *= valueT(1.4346250692830659266);
	t37 *= valueT(1.4346250692830659266);
	t88 *= valueT(1.2264668273402374962);
	t87 *= valueT(1.2264668273402374962);
	t47 *= valueT(0.14809047148830960016);
	t48 *= valueT(0.14809047148830960016);
	t5 *= valueT(1.6498790548989948758);
	t6 *= valueT(1.6498790548989948758);
	t89 *= valueT(0.60274726202214007732);
	t90 *= valueT(0.60274726202214007732);
	t36 *= valueT(2.244775412737646562);
	t35 *= valueT(2.244775412737646562);
	t62 *= valueT(0.58110158892138584157);
	t61 *= valueT(0.58110158892138584157);
	t12 *= valueT(0.1700771474529377042);
	t11 *= valueT(0.1700771474529377042);
	t64 *= valueT(2.244775412737646562);
	t63 *= valueT(2.244775412737646562);
	t7 *= valueT(1.0471317928768547985);
	t8 *= valueT(1.0471317928768547985);
	t65 *= valueT(0.651085145804193646);
	t66 *= valueT(0.651085145804193646);
	t31 *= valueT(0.024742578358430269679);
	t32 *= valueT(0.024742578358430269679);
	t67 *= valueT(1.0471317928768547985);
	t68 *= valueT(1.0471317928768547985);
	t34 *= valueT(1.8873779105534714014);
	t33 *= valueT(1.8873779105534714014);
	t92 *= valueT(0.91566545995849517431);
	t91 *= valueT(0.91566545995849517431);
	t9 *= valueT(0.97680829181198902898);
	t10 *= valueT(0.97680829181198902898);
	t93 *= valueT(0.47957744180648981093);
	t94 *= valueT(0.47957744180648981093);
	t30 *= valueT(0.85961846932201412149);
	t29 *= valueT(0.85961846932201412149);
	t13 *= valueT(0.49723085000549921805);
	t14 *= valueT(0.49723085000549921805);
	t28 *= valueT(0.28192537265311784701);
	t27 *= valueT(0.28192537265311784701);
	t15 *= valueT(1.5702524941755912569);
	t16 *= valueT(1.5702524941755912569);
	t49 = t1 - t49;
	t50 = t2 - t50;
	t22 -= t70;
	t21 -= t69;
	t70 += t28;
	t69 += t27;
	t52 -= t72;
	t51 -= t71;
	t72 += t64;
	t71 += t63;
	t54 -= t74;
	t53 -= t73;
	t74 += t62;
	t73 += t61;
	t18 -= t76;
	t17 -= t75;
	t76 += t12;
	t75 += t11;
	t43 += t79;
	t44 += t80;
	t79 -= t15;
	t80 -= t16;
	t57 -= t81;
	t58 -= t82;
	t81 += t67;
	t82 += t68;
	t59 -= t83;
	t60 -= t84;
	t83 += t65;
	t84 += t66;
	t23 -= t85;
	t24 -= t86;
	t85 -= t31;
	t86 -= t32;
	t38 -= t88;
	t37 -= t87;
	t88 -= t36;
	t87 -= t35;
	t5 -= t89;
	t6 -= t90;
	t89 -= t7;
	t90 -= t8;
	t34 -= t92;
	t33 -= t91;
	t92 -= t30;
	t91 -= t29;
	t9 -= t93;
	t10 -= t94;
	t93 -= t13;
	t94 -= t14;
	t22 -= t52;
	t21 -= t51;
	t70 -= t72;
	t69 -= t71;
	t52 -= t54 + t18 - t38;
	t51 -= t53 + t17 - t37;
	t72 -= t74 + t76 - t88;
	t71 -= t73 + t75 - t87;
	t54 -= t18;
	t53 -= t17;
	t74 -= t76;
	t73 -= t75;
	t42 -= t56;
	t41 -= t55;
	t56 += t46;
	t55 += t45;
	t43 -= t57;
	t44 -= t58;
	t79 += t81;
	t80 += t82;
	t57 -= t59 + t23 - t5;
	t58 -= t60 + t24 - t6;
	t81 -= t83 + t85 - t89;
	t82 -= t84 + t86 - t90;
	t59 -= t23;
	t60 -= t24;
	t83 -= t85;
	t84 -= t86;
	t5 = t49 - t25 + t3;
	t6 = t50 - t26 + t4;
	t25 = t49 + t25 + t47;
	t26 = t50 + t26 + t48;
	t49 -= t3 + t47;
	t50 -= t4 + t48;
	t22 += t54;
	t21 += t53;
	t70 += t74;
	t69 += t73;
	t54 += t34;
	t53 += t33;
	t74 += t92;
	t73 += t91;
	t3 = t20 + t42;
	t4 = t19 + t41;
	t42 = t20 - t42 + t56;
	t41 = t19 - t41 + t55;
	t20 -= t56;
	t19 -= t55;
	t43 += t59;
	t44 += t60;
	t79 -= t83;
	t80 -= t84;
	t59 -= t9;
	t60 -= t10;
	t83 -= t93;
	t84 -= t94;
	t7 = t5 + t43;
	t8 = t6 + t44;
	t43 = t5 - t43 + t79;
	t44 = t6 - t44 + t80;
	t5 -= t79;
	t6 -= t80;
	t9 = t25 + t57;
	t10 = t26 + t58;
	t57 = t25 - t57 - t81;
	t58 = t26 - t58 - t82;
	t25 += t81;
	t26 += t82;
	t11 = t49 + t59;
	t12 = t50 + t60;
	t59 = t49 - t59 - t83;
	t60 = t50 - t60 - t84;
	t49 += t83;
	t50 += t84;
	t13 = t22 - t70 + t3;
	t14 = t21 - t69 + t4;
	t22 -= t3;
	t21 -= t4;
	t70 += t3;
	t69 += t4;
	t3 = t52 - t72 - t20;
	t4 = t51 - t71 - t19;
	t52 += t20;
	t51 += t19;
	t72 -= t20;
	t71 -= t19;
	t15 = t54 - t74 + t42;
	t16 = t53 - t73 + t41;
	t54 -= t42;
	t53 -= t41;
	t74 += t42;
	t73 += t41;
	pReal[0 * stride] = t1;
	pImag[0 * stride] = t2;
	pReal[1 * stride] = t7 + t22;
	pImag[1 * stride] = t8 - t21;
	pReal[2 * stride] = t9 + t52;
	pImag[2 * stride] = t10 - t51;
	pReal[3 * stride] = t25 - t72;
	pImag[3 * stride] = t26 + t71;
	pReal[4 * stride] = t11 + t54;
	pImag[4 * stride] = t12 - t53;
	pReal[5 * stride] = t57 + t3;
	pImag[5 * stride] = t58 - t4;
	pReal[6 * stride] = t49 - t74;
	pImag[6 * stride] = t50 + t73;
	pReal[7 * stride] = t43 - t13;
	pImag[7 * stride] = t44 + t14;
	pReal[8 * stride] = t5 + t70;
	pImag[8 * stride] = t6 - t69;
	pReal[9 * stride] = t59 - t15;
	pImag[9 * stride] = t60 + t16;
	pReal[10 * stride] = t59 + t15;
	pImag[10 * stride] = t60 - t16;
	pReal[11 * stride] = t5 - t70;
	pImag[11 * stride] = t6 + t69;
	pReal[12 * stride] = t43 + t13;
	pImag[12 * stride] = t44 - t14;
	pReal[13 * stride] = t49 + t74;
	pImag[13 * stride] = t50 - t73;
	pReal[14 * stride] = t57 - t3;
	pImag[14 * stride] = t58 + t4;
	pReal[15 * stride] = t11 - t54;
	pImag[15 * stride] = t12 + t53;
	pReal[16 * stride] = t25 + t72;
	pImag[16 * stride] = t26 - t71;
	pReal[17 * stride] = t9 - t52;
	pImag[17 * stride] = t10 + t51;
	pReal[18 * stride] = t7 - t22;
	pImag[18 * stride] = t8 + t21;
}

template<> void StandardModule<float, 19>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 19>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
