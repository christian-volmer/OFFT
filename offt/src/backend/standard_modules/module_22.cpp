
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
	valueT t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
	valueT t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
	valueT t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
	valueT t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	valueT t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	valueT t60, t61, t62, t63, t64, t65, t66, t67, t68, t69;
	valueT t70, t71, t72, t73, t74, t75, t76, t77, t78, t79;
	valueT t80, t81, t82, t83;

	phasors.Multiply(t0, t1, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t2, t3, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t4, t5, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t6, t7, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t8, t9, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t10, t11, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t12, t13, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t14, t15, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t16, t17, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t18, t19, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t20, t21, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t22, t23, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t24, t25, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t26, t27, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t28, t29, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t30, t31, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t32, t33, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t34, t35, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t36, t37, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
	phasors.Multiply(t38, t39, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
	phasors.Multiply(t40, t41, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
	phasors.Multiply(t42, t43, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);

	t44 = t2 - t42;
	t45 = t3 - t43;
	t2 += t42;
	t3 += t43;
	t42 = t4 - t40;
	t43 = t5 - t41;
	t4 += t40;
	t5 += t41;
	t40 = t6 - t38;
	t41 = t7 - t39;
	t6 += t38;
	t7 += t39;
	t38 = t8 - t36;
	t39 = t9 - t37;
	t8 += t36;
	t9 += t37;
	t36 = t10 - t34;
	t37 = t11 - t35;
	t10 += t34;
	t11 += t35;
	t34 = t12 - t32;
	t35 = t13 - t33;
	t12 += t32;
	t13 += t33;
	t32 = t14 - t30;
	t33 = t15 - t31;
	t14 += t30;
	t15 += t31;
	t30 = t16 - t28;
	t31 = t17 - t29;
	t16 += t28;
	t17 += t29;
	t28 = t18 - t26;
	t29 = t19 - t27;
	t18 += t26;
	t19 += t27;
	t26 = t20 - t24;
	t27 = t21 - t25;
	t20 += t24;
	t21 += t25;
	t24 = t44 - t40;
	t25 = t45 - t41;
	t46 = t44 + t40 + t36 - t32 + t28;
	t47 = t45 + t41 + t37 - t33 + t29;
	t48 = t44 - t36;
	t49 = t45 - t37;
	t50 = t44 + t32;
	t51 = t45 + t33;
	t44 -= t28;
	t45 -= t29;
	t52 = t2 - t6;
	t53 = t3 - t7;
	t54 = t2 + t6 + t10 + t14 + t18;
	t55 = t3 + t7 + t11 + t15 + t19;
	t56 = t2 - t10;
	t57 = t3 - t11;
	t58 = t2 - t14;
	t59 = t3 - t15;
	t2 -= t18;
	t3 -= t19;
	t60 = t42 - t38 + t34 + t30 + t26;
	t61 = t43 - t39 + t35 + t31 + t27;
	t62 = t42 - t30;
	t63 = t43 - t31;
	t42 -= t26;
	t43 -= t27;
	t64 = t4 + t8 + t12 + t16 + t20;
	t65 = t5 + t9 + t13 + t17 + t21;
	t66 = t4 - t16;
	t67 = t5 - t17;
	t4 -= t20;
	t5 -= t21;
	t40 -= t28;
	t41 -= t29;
	t6 -= t18;
	t7 -= t19;
	t18 = t38 + t34;
	t19 = t39 + t35;
	t38 += t26;
	t39 += t27;
	t28 = t8 - t12;
	t29 = t9 - t13;
	t8 -= t20;
	t9 -= t21;
	t36 += t32;
	t37 += t33;
	t10 -= t14;
	t11 -= t15;
	t34 -= t26;
	t35 -= t27;
	t12 -= t20;
	t13 -= t21;
	t30 -= t26;
	t31 -= t27;
	t16 -= t20;
	t17 -= t21;
	t0 += t64;
	t1 += t65;
	t14 = t24 + t48;
	t15 = t25 + t49;
	t20 = t50 + t44;
	t21 = t51 + t45;
	t26 = t52 - t56;
	t27 = t53 - t57;
	t22 = t54 + t22;
	t23 = t55 + t23;
	t32 = t58 - t2;
	t33 = t59 - t3;
	t68 = t62 - t18;
	t69 = t63 - t19;
	t70 = t42 - t38;
	t71 = t43 - t39;
	t72 = t66 - t28;
	t73 = t67 - t29;
	t74 = t4 - t8;
	t75 = t5 - t9;
	t76 = t40 + t36;
	t77 = t41 + t37;
	t78 = t6 - t10;
	t79 = t7 - t11;
	t80 = t34 + t30;
	t81 = t35 + t31;
	t82 = t12 - t16;
	t83 = t13 - t17;
	t25 *= valueT(0.492980128140842333);
	t24 *= valueT(0.492980128140842333);
	t15 *= valueT(0.86713730126545034466);
	t14 *= valueT(0.86713730126545034466);
	t47 *= valueT(0.33166247903553998491);
	t46 *= valueT(0.33166247903553998491);
	t49 *= valueT(2.1583616978496189882);
	t48 *= valueT(2.1583616978496189882);
	t51 *= valueT(0.95729268466927362052);
	t50 *= valueT(0.95729268466927362052);
	t21 *= valueT(0.58313551154466560886);
	t20 *= valueT(0.58313551154466560886);
	t45 *= valueT(1.2162009452834415049);
	t44 *= valueT(1.2162009452834415049);
	t52 *= valueT(0.51541501300188642553);
	t53 *= valueT(0.51541501300188642553);
	t26 *= valueT(0.89893869455789602842);
	t27 *= valueT(0.89893869455789602842);
	t54 *= valueT(1.1);
	t55 *= valueT(1.1);
	t56 *= valueT(0.55486073394528506406);
	t57 *= valueT(0.55486073394528506406);
	t58 *= valueT(0.94125353283118116886);
	t59 *= valueT(0.94125353283118116886);
	t32 *= valueT(0.47310017472860128509);
	t33 *= valueT(0.47310017472860128509);
	t2 *= valueT(0.85949297361449738989);
	t3 *= valueT(0.85949297361449738989);
	t61 *= valueT(0.33166247903553998491);
	t60 *= valueT(0.33166247903553998491);
	t63 *= valueT(0.2340718675266744486);
	t62 *= valueT(0.2340718675266744486);
	t69 *= valueT(0.65815896284539274746);
	t68 *= valueT(0.65815896284539274746);
	t43 *= valueT(1.2162009452834415049);
	t42 *= valueT(1.2162009452834415049);
	t71 *= valueT(0.58313551154466560886);
	t70 *= valueT(0.58313551154466560886);
	t64 *= valueT(1.1);
	t65 *= valueT(1.1);
	t66 *= valueT(0.5971755722185702045);
	t67 *= valueT(0.5971755722185702045);
	t72 *= valueT(0.042314838273285140444);
	t73 *= valueT(0.042314838273285140444);
	t4 *= valueT(0.85949297361449738989);
	t5 *= valueT(0.85949297361449738989);
	t74 *= valueT(0.47310017472860128509);
	t75 *= valueT(0.47310017472860128509);
	t41 *= valueT(0.2340718675266744486);
	t40 *= valueT(0.2340718675266744486);
	t77 *= valueT(0.65815896284539274746);
	t76 *= valueT(0.65815896284539274746);
	t6 *= valueT(0.5971755722185702045);
	t7 *= valueT(0.5971755722185702045);
	t78 *= valueT(0.042314838273285140444);
	t79 *= valueT(0.042314838273285140444);
	t19 *= valueT(0.70808888503950303466);
	t18 *= valueT(0.70808888503950303466);
	t39 *= valueT(0.95729268466927362052);
	t38 *= valueT(0.95729268466927362052);
	t28 *= valueT(0.90180781188778253033);
	t29 *= valueT(0.90180781188778253033);
	t8 *= valueT(0.94125353283118116886);
	t9 *= valueT(0.94125353283118116886);
	t37 *= valueT(0.70808888503950303466);
	t36 *= valueT(0.70808888503950303466);
	t10 *= valueT(0.90180781188778253033);
	t11 *= valueT(0.90180781188778253033);
	t35 *= valueT(2.1583616978496189882);
	t34 *= valueT(2.1583616978496189882);
	t81 *= valueT(0.86713730126545034466);
	t80 *= valueT(0.86713730126545034466);
	t12 *= valueT(0.55486073394528506406);
	t13 *= valueT(0.55486073394528506406);
	t82 *= valueT(0.89893869455789602842);
	t83 *= valueT(0.89893869455789602842);
	t31 *= valueT(0.492980128140842333);
	t30 *= valueT(0.492980128140842333);
	t16 *= valueT(0.51541501300188642553);
	t17 *= valueT(0.51541501300188642553);
	t64 = t0 - t64;
	t65 = t1 - t65;
	t25 -= t15;
	t24 -= t14;
	t15 -= t49;
	t14 -= t48;
	t51 -= t21;
	t50 -= t20;
	t21 -= t45;
	t20 -= t44;
	t52 += t26;
	t53 += t27;
	t26 += t56;
	t27 += t57;
	t54 -= t22;
	t55 -= t23;
	t58 += t32;
	t59 += t33;
	t32 += t2;
	t33 += t3;
	t63 -= t69;
	t62 -= t68;
	t69 += t19;
	t68 += t18;
	t43 -= t71;
	t42 -= t70;
	t71 += t39;
	t70 += t38;
	t66 -= t72;
	t67 -= t73;
	t72 += t28;
	t73 += t29;
	t4 -= t74;
	t5 -= t75;
	t74 -= t8;
	t75 -= t9;
	t41 -= t77;
	t40 -= t76;
	t77 -= t37;
	t76 -= t36;
	t6 -= t78;
	t7 -= t79;
	t78 += t10;
	t79 += t11;
	t35 -= t81;
	t34 -= t80;
	t81 -= t31;
	t80 -= t30;
	t12 -= t82;
	t13 -= t83;
	t82 -= t16;
	t83 -= t17;
	t2 = t64 + t66 + t4;
	t3 = t65 + t67 + t5;
	t66 = t64 - t66 + t82;
	t67 = t65 - t67 + t83;
	t8 = t64 + t72 + t74;
	t9 = t65 + t73 + t75;
	t72 = t64 - t72 + t12;
	t73 = t65 - t73 + t13;
	t64 -= t4 + t74 + t12 + t82;
	t65 -= t5 + t75 + t13 + t83;
	t4 = t25 - t15 - t47 - t51 + t21;
	t5 = t24 - t14 - t46 - t50 + t20;
	t25 += t47 + t41;
	t24 += t46 + t40;
	t15 -= t47 - t77;
	t14 -= t46 - t76;
	t51 = t47 - t51 + t77;
	t50 = t46 - t50 + t76;
	t47 += t21 - t41;
	t46 += t20 - t40;
	t10 = t52 - t26 + t54 + t58 - t32;
	t11 = t53 - t27 + t55 + t59 - t33;
	t52 -= t54 - t6;
	t53 -= t55 - t7;
	t26 += t54 - t78;
	t27 += t55 - t79;
	t58 = t54 - t58 + t78;
	t59 = t55 - t59 + t79;
	t54 += t32 + t6;
	t55 += t33 + t7;
	t6 = t61 + t63 + t43;
	t7 = t60 + t62 + t42;
	t63 = t61 - t63 + t81;
	t62 = t60 - t62 + t80;
	t12 = t61 - t69 - t71;
	t13 = t60 - t68 - t70;
	t69 = t61 + t69 - t35;
	t68 = t60 + t68 - t34;
	t61 -= t43 - t71 - t35 + t81;
	t60 -= t42 - t70 - t34 + t80;
	t16 = t2 + t6;
	t17 = t3 - t7;
	t2 -= t6;
	t3 += t7;
	t6 = t66 + t63;
	t7 = t67 - t62;
	t66 -= t63;
	t67 += t62;
	t18 = t8 + t12;
	t19 = t9 - t13;
	t8 -= t12;
	t9 += t13;
	t12 = t72 + t69;
	t13 = t73 - t68;
	t72 -= t69;
	t73 += t68;
	t20 = t64 - t61;
	t21 = t65 + t60;
	t64 += t61;
	t65 -= t60;
	t28 = t4 + t10;
	t29 = t5 - t11;
	t4 -= t10;
	t5 += t11;
	t10 = t25 - t52;
	t11 = t24 + t53;
	t25 += t52;
	t24 -= t53;
	t30 = t15 - t26;
	t31 = t14 + t27;
	t15 += t26;
	t14 -= t27;
	t26 = t51 + t58;
	t27 = t50 - t59;
	t51 -= t58;
	t50 += t59;
	t32 = t47 + t54;
	t33 = t46 - t55;
	t47 -= t54;
	t46 += t55;
	pReal[0 * stride] = t0 + t22;
	pImag[0 * stride] = t1 + t23;
	pReal[1 * stride] = t2 - t47;
	pImag[1 * stride] = t3 + t46;
	pReal[2 * stride] = t18 - t26;
	pImag[2 * stride] = t19 + t27;
	pReal[3 * stride] = t72 + t15;
	pImag[3 * stride] = t73 - t14;
	pReal[4 * stride] = t66 + t25;
	pImag[4 * stride] = t67 - t24;
	pReal[5 * stride] = t20 + t28;
	pImag[5 * stride] = t21 - t29;
	pReal[6 * stride] = t64 + t4;
	pImag[6 * stride] = t65 - t5;
	pReal[7 * stride] = t6 + t10;
	pImag[7 * stride] = t7 - t11;
	pReal[8 * stride] = t12 + t30;
	pImag[8 * stride] = t13 - t31;
	pReal[9 * stride] = t8 - t51;
	pImag[9 * stride] = t9 + t50;
	pReal[10 * stride] = t16 - t32;
	pImag[10 * stride] = t17 + t33;
	pReal[11 * stride] = t0 - t22;
	pImag[11 * stride] = t1 - t23;
	pReal[12 * stride] = t2 + t47;
	pImag[12 * stride] = t3 - t46;
	pReal[13 * stride] = t18 + t26;
	pImag[13 * stride] = t19 - t27;
	pReal[14 * stride] = t72 - t15;
	pImag[14 * stride] = t73 + t14;
	pReal[15 * stride] = t66 - t25;
	pImag[15 * stride] = t67 + t24;
	pReal[16 * stride] = t20 - t28;
	pImag[16 * stride] = t21 + t29;
	pReal[17 * stride] = t64 - t4;
	pImag[17 * stride] = t65 + t5;
	pReal[18 * stride] = t6 - t10;
	pImag[18 * stride] = t7 + t11;
	pReal[19 * stride] = t12 - t30;
	pImag[19 * stride] = t13 + t31;
	pReal[20 * stride] = t8 + t51;
	pImag[20 * stride] = t9 - t50;
	pReal[21 * stride] = t16 + t32;
	pImag[21 * stride] = t17 - t33;
}

template<> void StandardModule<float, 22>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 22>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
