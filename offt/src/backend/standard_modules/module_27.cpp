
//          Copyright Christian Volmer 2022.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          https://www.boost.org/LICENSE_1_0.txt)

#include "../standard_module.h"

namespace offt {
namespace backend {

using std::size_t;
using std::ptrdiff_t;

/*
	Number of additions       : 380
	Number of multiplications : 220
*/

template<> StandardModuleComplexity const StandardModule<float, 27>::Complexity = { 380, 220 };
template<> StandardModuleComplexity const StandardModule<double, 27>::Complexity = { 380, 220 };

template<typename valueT>
static void ComputeCore(Phasors<valueT> const &phasors, valueT *pReal, valueT *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement)
{
	valueT t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
	valueT t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
	valueT t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
	valueT t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
	valueT t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	valueT t50, t51, t52, t53, t54, t55;

	phasors.Multiply(t0, t1, pReal[0 * stride], pImag[0 * stride], twiddleStart + 0 * twiddleIncrement);
	phasors.Multiply(t2, t3, pReal[1 * stride], pImag[1 * stride], twiddleStart + 1 * twiddleIncrement);
	phasors.Multiply(t4, t5, pReal[2 * stride], pImag[2 * stride], twiddleStart + 2 * twiddleIncrement);
	phasors.Multiply(t6, t7, pReal[3 * stride], pImag[3 * stride], twiddleStart + 3 * twiddleIncrement);
	phasors.Multiply(t8, t9, pReal[4 * stride], pImag[4 * stride], twiddleStart + 4 * twiddleIncrement);
	phasors.Multiply(t10, t11, pReal[5 * stride], pImag[5 * stride], twiddleStart + 5 * twiddleIncrement);
	phasors.Multiply(t12, t13, pReal[6 * stride], pImag[6 * stride], twiddleStart + 6 * twiddleIncrement);
	phasors.Multiply(t14, t15, pReal[7 * stride], pImag[7 * stride], twiddleStart + 7 * twiddleIncrement);
	phasors.Multiply(t16, t17, pReal[8 * stride], pImag[8 * stride], twiddleStart + 8 * twiddleIncrement);
	phasors.Multiply(t18, t19, pReal[9 * stride], pImag[9 * stride], twiddleStart + 9 * twiddleIncrement);
	phasors.Multiply(t20, t21, pReal[10 * stride], pImag[10 * stride], twiddleStart + 10 * twiddleIncrement);
	phasors.Multiply(t22, t23, pReal[11 * stride], pImag[11 * stride], twiddleStart + 11 * twiddleIncrement);
	phasors.Multiply(t24, t25, pReal[12 * stride], pImag[12 * stride], twiddleStart + 12 * twiddleIncrement);
	phasors.Multiply(t26, t27, pReal[13 * stride], pImag[13 * stride], twiddleStart + 13 * twiddleIncrement);
	phasors.Multiply(t28, t29, pReal[14 * stride], pImag[14 * stride], twiddleStart + 14 * twiddleIncrement);
	phasors.Multiply(t30, t31, pReal[15 * stride], pImag[15 * stride], twiddleStart + 15 * twiddleIncrement);
	phasors.Multiply(t32, t33, pReal[16 * stride], pImag[16 * stride], twiddleStart + 16 * twiddleIncrement);
	phasors.Multiply(t34, t35, pReal[17 * stride], pImag[17 * stride], twiddleStart + 17 * twiddleIncrement);
	phasors.Multiply(t36, t37, pReal[18 * stride], pImag[18 * stride], twiddleStart + 18 * twiddleIncrement);
	phasors.Multiply(t38, t39, pReal[19 * stride], pImag[19 * stride], twiddleStart + 19 * twiddleIncrement);
	phasors.Multiply(t40, t41, pReal[20 * stride], pImag[20 * stride], twiddleStart + 20 * twiddleIncrement);
	phasors.Multiply(t42, t43, pReal[21 * stride], pImag[21 * stride], twiddleStart + 21 * twiddleIncrement);
	phasors.Multiply(t44, t45, pReal[22 * stride], pImag[22 * stride], twiddleStart + 22 * twiddleIncrement);
	phasors.Multiply(t46, t47, pReal[23 * stride], pImag[23 * stride], twiddleStart + 23 * twiddleIncrement);
	phasors.Multiply(t48, t49, pReal[24 * stride], pImag[24 * stride], twiddleStart + 24 * twiddleIncrement);
	phasors.Multiply(t50, t51, pReal[25 * stride], pImag[25 * stride], twiddleStart + 25 * twiddleIncrement);
	phasors.Multiply(t52, t53, pReal[26 * stride], pImag[26 * stride], twiddleStart + 26 * twiddleIncrement);

	t54 = t18 - t36;
	t55 = t19 - t37;
	t18 += t36;
	t19 += t37;
	t36 = t20 - t38;
	t37 = t21 - t39;
	t20 += t38;
	t21 += t39;
	t38 = t22 - t40;
	t39 = t23 - t41;
	t22 += t40;
	t23 += t41;
	t40 = t24 - t42;
	t41 = t25 - t43;
	t24 += t42;
	t25 += t43;
	t42 = t26 - t44;
	t43 = t27 - t45;
	t26 += t44;
	t27 += t45;
	t44 = t28 - t46;
	t45 = t29 - t47;
	t28 += t46;
	t29 += t47;
	t46 = t30 - t48;
	t47 = t31 - t49;
	t30 += t48;
	t31 += t49;
	t48 = t32 - t50;
	t49 = t33 - t51;
	t32 += t50;
	t33 += t51;
	t50 = t34 - t52;
	t51 = t35 - t53;
	t34 += t52;
	t35 += t53;
	t0 += t18;
	t1 += t19;
	t2 += t20;
	t3 += t21;
	t4 += t22;
	t5 += t23;
	t6 += t24;
	t7 += t25;
	t8 += t26;
	t9 += t27;
	t10 += t28;
	t11 += t29;
	t12 += t30;
	t13 += t31;
	t14 += t32;
	t15 += t33;
	t16 += t34;
	t17 += t35;
	t55 *= valueT(0.86602540378443864676);
	t54 *= valueT(0.86602540378443864676);
	t18 *= valueT(1.5);
	t19 *= valueT(1.5);
	t37 *= valueT(0.86602540378443864676);
	t36 *= valueT(0.86602540378443864676);
	t20 *= valueT(1.5);
	t21 *= valueT(1.5);
	t39 *= valueT(0.86602540378443864676);
	t38 *= valueT(0.86602540378443864676);
	t22 *= valueT(1.5);
	t23 *= valueT(1.5);
	t41 *= valueT(0.86602540378443864676);
	t40 *= valueT(0.86602540378443864676);
	t24 *= valueT(1.5);
	t25 *= valueT(1.5);
	t43 *= valueT(0.86602540378443864676);
	t42 *= valueT(0.86602540378443864676);
	t26 *= valueT(1.5);
	t27 *= valueT(1.5);
	t45 *= valueT(0.86602540378443864676);
	t44 *= valueT(0.86602540378443864676);
	t28 *= valueT(1.5);
	t29 *= valueT(1.5);
	t47 *= valueT(0.86602540378443864676);
	t46 *= valueT(0.86602540378443864676);
	t30 *= valueT(1.5);
	t31 *= valueT(1.5);
	t49 *= valueT(0.86602540378443864676);
	t48 *= valueT(0.86602540378443864676);
	t32 *= valueT(1.5);
	t33 *= valueT(1.5);
	t51 *= valueT(0.86602540378443864676);
	t50 *= valueT(0.86602540378443864676);
	t34 *= valueT(1.5);
	t35 *= valueT(1.5);
	t18 = t0 - t18;
	t19 = t1 - t19;
	t20 = t2 - t20;
	t21 = t3 - t21;
	t22 = t4 - t22;
	t23 = t5 - t23;
	t24 = t6 - t24;
	t25 = t7 - t25;
	t26 = t8 - t26;
	t27 = t9 - t27;
	t28 = t10 - t28;
	t29 = t11 - t29;
	t30 = t12 - t30;
	t31 = t13 - t31;
	t32 = t14 - t32;
	t33 = t15 - t33;
	t34 = t16 - t34;
	t35 = t17 - t35;
	t52 = t18 + t55;
	t53 = t19 - t54;
	t18 -= t55;
	t19 += t54;
	t54 = t20 + t37;
	t55 = t21 - t36;
	t20 -= t37;
	t21 += t36;
	t36 = t22 + t39;
	t37 = t23 - t38;
	t22 -= t39;
	t23 += t38;
	t38 = t24 + t41;
	t39 = t25 - t40;
	t24 -= t41;
	t25 += t40;
	t40 = t26 + t43;
	t41 = t27 - t42;
	t26 -= t43;
	t27 += t42;
	t42 = t28 + t45;
	t43 = t29 - t44;
	t28 -= t45;
	t29 += t44;
	t44 = t30 + t47;
	t45 = t31 - t46;
	t30 -= t47;
	t31 += t46;
	t46 = t32 + t49;
	t47 = t33 - t48;
	t32 -= t49;
	t33 += t48;
	t48 = t34 + t51;
	t49 = t35 - t50;
	t34 -= t51;
	t35 += t50;
	t50 = valueT(0.17364817766693034885) * t38 - valueT(0.98480775301220805937) * t39;
	t38 = valueT(0.98480775301220805937) * t38 + valueT(0.17364817766693034885) * t39;
	t39 = valueT(0.7660444431189780352) * t24 - valueT(0.64278760968653932632) * t25;
	t24 = valueT(0.64278760968653932632) * t24 + valueT(0.7660444431189780352) * t25;
	t25 = valueT(0.17364817766693034885) * t40 - valueT(0.98480775301220805937) * t41;
	t40 = valueT(0.98480775301220805937) * t40 + valueT(0.17364817766693034885) * t41;
	t41 = valueT(0.7660444431189780352) * t26 - valueT(0.64278760968653932632) * t27;
	t26 = valueT(0.64278760968653932632) * t26 + valueT(0.7660444431189780352) * t27;
	t27 = valueT(0.17364817766693034885) * t42 - valueT(0.98480775301220805937) * t43;
	t42 = valueT(0.98480775301220805937) * t42 + valueT(0.17364817766693034885) * t43;
	t43 = valueT(0.7660444431189780352) * t28 - valueT(0.64278760968653932632) * t29;
	t28 = valueT(0.64278760968653932632) * t28 + valueT(0.7660444431189780352) * t29;
	t29 = valueT(0.93969262078590838405) * t44 + valueT(0.34202014332566873304) * t45;
	t44 = valueT(0.34202014332566873304) * t44 - valueT(0.93969262078590838405) * t45;
	t45 = valueT(0.17364817766693034885) * t30 - valueT(0.98480775301220805937) * t31;
	t30 = valueT(0.98480775301220805937) * t30 + valueT(0.17364817766693034885) * t31;
	t31 = valueT(0.93969262078590838405) * t46 + valueT(0.34202014332566873304) * t47;
	t46 = valueT(0.34202014332566873304) * t46 - valueT(0.93969262078590838405) * t47;
	t47 = valueT(0.17364817766693034885) * t32 - valueT(0.98480775301220805937) * t33;
	t32 = valueT(0.98480775301220805937) * t32 + valueT(0.17364817766693034885) * t33;
	t33 = valueT(0.93969262078590838405) * t48 + valueT(0.34202014332566873304) * t49;
	t48 = valueT(0.34202014332566873304) * t48 - valueT(0.93969262078590838405) * t49;
	t49 = valueT(0.17364817766693034885) * t34 - valueT(0.98480775301220805937) * t35;
	t34 = valueT(0.98480775301220805937) * t34 + valueT(0.17364817766693034885) * t35;
	t35 = t6 - t12;
	t51 = t7 - t13;
	t6 += t12;
	t7 += t13;
	t12 = t50 + t29;
	t13 = t38 - t44;
	t50 -= t29;
	t38 += t44;
	t29 = t39 - t45;
	t44 = t24 - t30;
	t39 += t45;
	t24 += t30;
	t30 = t8 - t14;
	t45 = t9 - t15;
	t8 += t14;
	t9 += t15;
	t14 = t25 + t31;
	t15 = t40 - t46;
	t25 -= t31;
	t40 += t46;
	t31 = t41 - t47;
	t46 = t26 - t32;
	t41 += t47;
	t26 += t32;
	t32 = t10 - t16;
	t47 = t11 - t17;
	t10 += t16;
	t11 += t17;
	t16 = t27 + t33;
	t17 = t42 - t48;
	t27 -= t33;
	t42 += t48;
	t33 = t43 - t49;
	t48 = t28 - t34;
	t43 += t49;
	t28 += t34;
	t0 += t6;
	t1 += t7;
	t52 += t50;
	t53 += t38;
	t18 += t39;
	t19 += t24;
	t2 += t8;
	t3 += t9;
	t54 += t25;
	t55 += t40;
	t20 += t41;
	t21 += t26;
	t4 += t10;
	t5 += t11;
	t36 += t27;
	t37 += t42;
	t22 += t43;
	t23 += t28;
	t51 *= valueT(0.86602540378443864676);
	t35 *= valueT(0.86602540378443864676);
	t6 *= valueT(1.5);
	t7 *= valueT(1.5);
	t13 *= valueT(0.86602540378443864676);
	t12 *= valueT(0.86602540378443864676);
	t50 *= valueT(1.5);
	t38 *= valueT(1.5);
	t44 *= valueT(0.86602540378443864676);
	t29 *= valueT(0.86602540378443864676);
	t39 *= valueT(1.5);
	t24 *= valueT(1.5);
	t45 *= valueT(0.86602540378443864676);
	t30 *= valueT(0.86602540378443864676);
	t8 *= valueT(1.5);
	t9 *= valueT(1.5);
	t15 *= valueT(0.86602540378443864676);
	t14 *= valueT(0.86602540378443864676);
	t25 *= valueT(1.5);
	t40 *= valueT(1.5);
	t46 *= valueT(0.86602540378443864676);
	t31 *= valueT(0.86602540378443864676);
	t41 *= valueT(1.5);
	t26 *= valueT(1.5);
	t47 *= valueT(0.86602540378443864676);
	t32 *= valueT(0.86602540378443864676);
	t10 *= valueT(1.5);
	t11 *= valueT(1.5);
	t17 *= valueT(0.86602540378443864676);
	t16 *= valueT(0.86602540378443864676);
	t27 *= valueT(1.5);
	t42 *= valueT(1.5);
	t48 *= valueT(0.86602540378443864676);
	t33 *= valueT(0.86602540378443864676);
	t43 *= valueT(1.5);
	t28 *= valueT(1.5);
	t6 = t0 - t6;
	t7 = t1 - t7;
	t50 = t52 - t50;
	t38 = t53 - t38;
	t39 = t18 - t39;
	t24 = t19 - t24;
	t8 = t2 - t8;
	t9 = t3 - t9;
	t25 = t54 - t25;
	t40 = t55 - t40;
	t41 = t20 - t41;
	t26 = t21 - t26;
	t10 = t4 - t10;
	t11 = t5 - t11;
	t27 = t36 - t27;
	t42 = t37 - t42;
	t43 = t22 - t43;
	t28 = t23 - t28;
	t34 = t6 + t51;
	t49 = t7 - t35;
	t6 -= t51;
	t7 += t35;
	t35 = t50 + t13;
	t51 = t38 - t12;
	t50 -= t13;
	t38 += t12;
	t12 = t39 + t44;
	t13 = t24 - t29;
	t39 -= t44;
	t24 += t29;
	t29 = t8 + t45;
	t44 = t9 - t30;
	t8 -= t45;
	t9 += t30;
	t30 = t25 + t15;
	t45 = t40 - t14;
	t25 -= t15;
	t40 += t14;
	t14 = t41 + t46;
	t15 = t26 - t31;
	t41 -= t46;
	t26 += t31;
	t31 = t10 + t47;
	t46 = t11 - t32;
	t10 -= t47;
	t11 += t32;
	t32 = t27 + t17;
	t47 = t42 - t16;
	t27 -= t17;
	t42 += t16;
	t16 = t43 + t48;
	t17 = t28 - t33;
	t43 -= t48;
	t28 += t33;
	t33 = valueT(0.17364817766693034885) * t29 - valueT(0.98480775301220805937) * t44;
	t29 = valueT(0.98480775301220805937) * t29 + valueT(0.17364817766693034885) * t44;
	t44 = valueT(0.7660444431189780352) * t8 - valueT(0.64278760968653932632) * t9;
	t8 = valueT(0.64278760968653932632) * t8 + valueT(0.7660444431189780352) * t9;
	t9 = valueT(0.89363264032341224819) * t54 - valueT(0.44879918020046217279) * t55;
	t54 = valueT(0.44879918020046217279) * t54 + valueT(0.89363264032341224819) * t55;
	t48 = valueT(0.2868032327110902531) * t30 + valueT(0.95798951231548887444) * t45;
	t30 = valueT(0.95798951231548887444) * t30 - valueT(0.2868032327110902531) * t45;
	t45 = valueT(0.3960797660391568237) * t25 - valueT(0.91821610688027401476) * t40;
	t25 = valueT(0.91821610688027401476) * t25 + valueT(0.3960797660391568237) * t40;
	t40 = valueT(0.97304487057982383883) * t20 - valueT(0.23061587074244017845) * t21;
	t20 = valueT(0.23061587074244017845) * t20 + valueT(0.97304487057982383883) * t21;
	t21 = valueT(0.058144828910475828539) * t14 + valueT(0.99830815827126820805) * t15;
	t14 = valueT(0.99830815827126820805) * t14 - valueT(0.058144828910475828539) * t15;
	t15 = valueT(0.59715859170278616485) * t41 - valueT(0.80212319275504378508) * t26;
	t41 = valueT(0.80212319275504378508) * t41 + valueT(0.59715859170278616485) * t26;
	t26 = valueT(0.93969262078590838405) * t31 + valueT(0.34202014332566873304) * t46;
	t31 = valueT(0.34202014332566873304) * t31 - valueT(0.93969262078590838405) * t46;
	t46 = valueT(0.17364817766693034885) * t10 - valueT(0.98480775301220805937) * t11;
	t10 = valueT(0.98480775301220805937) * t10 + valueT(0.17364817766693034885) * t11;
	t11 = valueT(0.59715859170278616485) * t36 - valueT(0.80212319275504378508) * t37;
	t36 = valueT(0.80212319275504378508) * t36 + valueT(0.59715859170278616485) * t37;
	t37 = valueT(0.83548781141293641965) * t32 - valueT(0.54950897807080603526) * t47;
	t32 = valueT(0.54950897807080603526) * t32 + valueT(0.83548781141293641965) * t47;
	t47 = valueT(0.68624163786873358573) * t27 + valueT(0.72737364157304869599) * t42;
	t27 = valueT(0.72737364157304869599) * t27 - valueT(0.68624163786873358573) * t42;
	t42 = valueT(0.89363264032341224819) * t22 - valueT(0.44879918020046217279) * t23;
	t22 = valueT(0.44879918020046217279) * t22 + valueT(0.89363264032341224819) * t23;
	t23 = valueT(0.99323835774194298855) * t16 - valueT(0.11609291412523022968) * t17;
	t16 = valueT(0.11609291412523022968) * t16 + valueT(0.99323835774194298855) * t17;
	t17 = valueT(0.2868032327110902531) * t43 + valueT(0.95798951231548887444) * t28;
	t43 = valueT(0.95798951231548887444) * t43 - valueT(0.2868032327110902531) * t28;
	t28 = t2 - t4;
	t55 = t3 - t5;
	t2 += t4;
	t3 += t5;
	t4 = t33 + t26;
	t5 = t29 - t31;
	t33 -= t26;
	t29 += t31;
	t26 = t44 - t46;
	t31 = t8 - t10;
	t44 += t46;
	t8 += t10;
	t10 = t9 - t11;
	t46 = t54 - t36;
	t9 += t11;
	t54 += t36;
	t11 = t48 - t37;
	t36 = t30 + t32;
	t48 += t37;
	t30 -= t32;
	t32 = t45 + t47;
	t37 = t25 - t27;
	t45 -= t47;
	t25 += t27;
	t27 = t40 - t42;
	t47 = t20 - t22;
	t40 += t42;
	t20 += t22;
	t22 = t21 - t23;
	t42 = t14 + t16;
	t21 += t23;
	t14 -= t16;
	t16 = t15 + t17;
	t23 = t41 - t43;
	t15 -= t17;
	t41 += t43;
	t0 += t2;
	t1 += t3;
	t34 += t33;
	t49 += t29;
	t6 += t44;
	t7 += t8;
	t52 += t9;
	t53 += t54;
	t35 -= t48;
	t51 += t30;
	t50 += t45;
	t38 += t25;
	t18 += t40;
	t19 += t20;
	t12 -= t21;
	t13 += t14;
	t39 += t15;
	t24 += t41;
	t55 *= valueT(0.86602540378443864676);
	t28 *= valueT(0.86602540378443864676);
	t2 *= valueT(1.5);
	t3 *= valueT(1.5);
	t5 *= valueT(0.86602540378443864676);
	t4 *= valueT(0.86602540378443864676);
	t33 *= valueT(1.5);
	t29 *= valueT(1.5);
	t31 *= valueT(0.86602540378443864676);
	t26 *= valueT(0.86602540378443864676);
	t44 *= valueT(1.5);
	t8 *= valueT(1.5);
	t46 *= valueT(0.86602540378443864676);
	t10 *= valueT(0.86602540378443864676);
	t9 *= valueT(1.5);
	t54 *= valueT(1.5);
	t36 *= valueT(0.86602540378443864676);
	t11 *= valueT(0.86602540378443864676);
	t48 *= valueT(1.5);
	t30 *= valueT(1.5);
	t37 *= valueT(0.86602540378443864676);
	t32 *= valueT(0.86602540378443864676);
	t45 *= valueT(1.5);
	t25 *= valueT(1.5);
	t47 *= valueT(0.86602540378443864676);
	t27 *= valueT(0.86602540378443864676);
	t40 *= valueT(1.5);
	t20 *= valueT(1.5);
	t42 *= valueT(0.86602540378443864676);
	t22 *= valueT(0.86602540378443864676);
	t21 *= valueT(1.5);
	t14 *= valueT(1.5);
	t23 *= valueT(0.86602540378443864676);
	t16 *= valueT(0.86602540378443864676);
	t15 *= valueT(1.5);
	t41 *= valueT(1.5);
	t2 = t0 - t2;
	t3 = t1 - t3;
	t33 = t34 - t33;
	t29 = t49 - t29;
	t44 = t6 - t44;
	t8 = t7 - t8;
	t9 = t52 - t9;
	t54 = t53 - t54;
	t48 = t35 + t48;
	t30 = t51 - t30;
	t45 = t50 - t45;
	t25 = t38 - t25;
	t40 = t18 - t40;
	t20 = t19 - t20;
	t21 = t12 + t21;
	t14 = t13 - t14;
	t15 = t39 - t15;
	t41 = t24 - t41;
	t17 = t2 + t55;
	t43 = t3 - t28;
	t2 -= t55;
	t3 += t28;
	t28 = t33 + t5;
	t55 = t29 - t4;
	t33 -= t5;
	t29 += t4;
	t4 = t44 + t31;
	t5 = t8 - t26;
	t44 -= t31;
	t8 += t26;
	t26 = t9 + t46;
	t31 = t54 - t10;
	t9 -= t46;
	t54 += t10;
	t10 = t48 + t36;
	t46 = t30 + t11;
	t48 -= t36;
	t30 -= t11;
	t11 = t45 + t37;
	t36 = t25 - t32;
	t45 -= t37;
	t25 += t32;
	t32 = t40 + t47;
	t37 = t20 - t27;
	t40 -= t47;
	t20 += t27;
	t27 = t21 + t42;
	t47 = t14 + t22;
	t21 -= t42;
	t14 -= t22;
	t22 = t15 + t23;
	t42 = t41 - t16;
	t15 -= t23;
	t41 += t16;
	pReal[0 * stride] = t0;
	pImag[0 * stride] = t1;
	pReal[1 * stride] = t18;
	pImag[1 * stride] = t19;
	pReal[2 * stride] = t52;
	pImag[2 * stride] = t53;
	pReal[3 * stride] = t6;
	pImag[3 * stride] = t7;
	pReal[4 * stride] = t39;
	pImag[4 * stride] = t24;
	pReal[5 * stride] = t50;
	pImag[5 * stride] = t38;
	pReal[6 * stride] = t34;
	pImag[6 * stride] = t49;
	pReal[7 * stride] = t12;
	pImag[7 * stride] = t13;
	pReal[8 * stride] = t35;
	pImag[8 * stride] = t51;
	pReal[9 * stride] = t2;
	pImag[9 * stride] = t3;
	pReal[10 * stride] = t40;
	pImag[10 * stride] = t20;
	pReal[11 * stride] = t9;
	pImag[11 * stride] = t54;
	pReal[12 * stride] = t44;
	pImag[12 * stride] = t8;
	pReal[13 * stride] = t15;
	pImag[13 * stride] = t41;
	pReal[14 * stride] = t45;
	pImag[14 * stride] = t25;
	pReal[15 * stride] = t33;
	pImag[15 * stride] = t29;
	pReal[16 * stride] = t21;
	pImag[16 * stride] = t14;
	pReal[17 * stride] = t48;
	pImag[17 * stride] = t30;
	pReal[18 * stride] = t17;
	pImag[18 * stride] = t43;
	pReal[19 * stride] = t32;
	pImag[19 * stride] = t37;
	pReal[20 * stride] = t26;
	pImag[20 * stride] = t31;
	pReal[21 * stride] = t4;
	pImag[21 * stride] = t5;
	pReal[22 * stride] = t22;
	pImag[22 * stride] = t42;
	pReal[23 * stride] = t11;
	pImag[23 * stride] = t36;
	pReal[24 * stride] = t28;
	pImag[24 * stride] = t55;
	pReal[25 * stride] = t27;
	pImag[25 * stride] = t47;
	pReal[26 * stride] = t10;
	pImag[26 * stride] = t46;
}

template<> void StandardModule<float, 27>::Compute(float *pReal, float *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

template<> void StandardModule<double, 27>::Compute(double *pReal, double *pImag, ptrdiff_t stride, size_t twiddleStart, size_t twiddleIncrement) const
{
	ComputeCore(mPhasors, pReal, pImag, stride, twiddleStart, twiddleIncrement);
}

}
}
